<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>jotting</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xtobu.github.io/"/>
  <updated>2019-06-06T02:59:02.182Z</updated>
  <id>https://xtobu.github.io/</id>
  
  <author>
    <name>xTobu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《NOTE》：Twenty Nineteen</title>
    <link href="https://xtobu.github.io/2019/05/28/%E3%80%8ANOTE%E3%80%8B%EF%BC%9ATwenty-Nineteen/"/>
    <id>https://xtobu.github.io/2019/05/28/《NOTE》：Twenty-Nineteen/</id>
    <published>2019-05-28T03:47:52.000Z</published>
    <updated>2019-06-06T02:59:02.182Z</updated>
    
    <content type="html"><![CDATA[<h1 id="May"><a href="#May" class="headerlink" title="May"></a>May</h1><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="Naming-命名規則"><a href="#Naming-命名規則" class="headerlink" title="Naming 命名規則"></a>Naming 命名規則</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Function</span></span><br><span class="line">(X) CheckValidToken</span><br><span class="line">(O) chkToken</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bool</span></span><br><span class="line">(X) TokenValid</span><br><span class="line">(O) isTokenValid</span><br><span class="line">(O) isXXX...</span><br><span class="line"></span><br><span class="line"><span class="comment">// Constant</span></span><br><span class="line">(O) IS_VALID</span><br><span class="line"></span><br><span class="line"><span class="comment">// Array</span></span><br><span class="line">(O) policyItems</span><br><span class="line">(O) Policys</span><br><span class="line">(O) </span><br><span class="line"><span class="comment">// Variable</span></span><br><span class="line">(O) countPolicys</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure><h2 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h2><h3 id="複製-Output"><a href="#複製-Output" class="headerlink" title="複製 Output"></a>複製 Output</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"Hello world"</span> | pbcopy</span><br><span class="line"><span class="comment"># "Hello world" is now in your clipboard</span></span><br></pre></td></tr></table></figure><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="檢索-Systemd-日誌-Journalctl"><a href="#檢索-Systemd-日誌-Journalctl" class="headerlink" title="檢索 Systemd 日誌 - Journalctl"></a>檢索 Systemd 日誌 - Journalctl</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">journalctl -f --no-pager -n 50 -u &lt;service&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># -u By Unit </span></span><br><span class="line"><span class="comment"># see messages logged by any systemd unit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -f Follow</span></span><br><span class="line"><span class="comment"># To run journalctl like the Linux tail command so it continuously prints log messages as they are added</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --no-pager</span></span><br><span class="line"><span class="comment"># tell it to not use a pager</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -n &lt;number&gt;</span></span><br><span class="line"><span class="comment"># printing the last number</span></span><br></pre></td></tr></table></figure><hr><h1 id="June"><a href="#June" class="headerlink" title="June"></a>June</h1><h2 id="JavaScript-1"><a href="#JavaScript-1" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.setState(<span class="function">(<span class="params">&#123; PolicyReview &#125;</span>) =&gt;</span> (&#123;</span><br><span class="line">      PolicyReview: &#123;</span><br><span class="line">        ...PolicyReview,</span><br><span class="line">        listHistory: PolicyReview.listHistory.map(<span class="function">(<span class="params">obj, index</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> index === <span class="built_in">Number</span>(indexCollapse)</span><br><span class="line">            ? <span class="built_in">Object</span>.assign(obj, &#123; <span class="attr">isOpen</span>: !obj.isOpen &#125;)</span><br><span class="line">            : obj;</span><br><span class="line">        &#125;),</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;));</span><br></pre></td></tr></table></figure><h2 id="VS-Code"><a href="#VS-Code" class="headerlink" title="VS Code"></a>VS Code</h2><h3 id="回到上下一個工作"><a href="#回到上下一個工作" class="headerlink" title="回到上下一個工作"></a>回到上下一個工作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Mac:</span></span><br><span class="line">prev: Ctrl + -</span><br><span class="line">next: Ctrl + Shift + -</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Take Notes Quickly, Get Off Early
    
    </summary>
    
      <category term="Note" scheme="https://xtobu.github.io/categories/Note/"/>
    
    
      <category term="《NOTE》" scheme="https://xtobu.github.io/tags/%E3%80%8ANOTE%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>Facebook - Comment Bot Review</title>
    <link href="https://xtobu.github.io/2018/08/22/Facebook-Comment-Bot/"/>
    <id>https://xtobu.github.io/2018/08/22/Facebook-Comment-Bot/</id>
    <published>2018-08-22T07:55:37.000Z</published>
    <updated>2019-04-22T05:51:37.434Z</updated>
    
    <content type="html"><![CDATA[<h2 id="說明"><a href="#說明" class="headerlink" title="說明"></a>說明</h2><ul><li>針對貼文，對留言進行回覆或私訊</li><li>第一件事：Webhook feed 與 粉絲專頁 /{page_id}/subscribed_apps</li><li>第二件事：對留言的　/{object-id}/comments 、 /{object-id}/private_replies</li><li>Webhook feed 的訂閱不須審核，但粉絲頁回覆和私訊則要審核</li><li>可以用不同的應用程式分別處理</li></ul><h2 id="需要審查的權限"><a href="#需要審查的權限" class="headerlink" title="需要審查的權限"></a>需要審查的權限</h2><h3 id="需要有以下三者權限的-Token"><a href="#需要有以下三者權限的-Token" class="headerlink" title="需要有以下三者權限的 Token"></a>需要有以下三者權限的 Token</h3><ul><li><a href="https://developers.facebook.com/docs/facebook-login/permissions/" target="_blank" rel="noopener">Permissions Reference</a></li><li>manage_pages - 管理粉絲頁</li><li>publish_pages - 對留言做回覆時，要有此發行訊息的權限</li><li>read_page_mailboxes - 使用粉絲頁信箱的權限，須搭配 manage_pages</li></ul><h2 id="Webhook-Page-Subscribed-Apps"><a href="#Webhook-Page-Subscribed-Apps" class="headerlink" title="Webhook - Page Subscribed Apps"></a>Webhook - Page Subscribed Apps</h2><ul><li><a href="https://developers.facebook.com/tools/explorer/" target="_blank" rel="noopener">圖形 API 測試工具</a></li></ul><ol><li>應用程式 → 選擇 Webhook 在的應用程式<br><img src="/assets/FacebookReview/1.PNG" alt="me" width="900px"></li><li>取得權杖 → 取得用戶權杖 → 選擇 manage_pages、pages_show_list、pages_messaging、pages_messaging_subscriptions<br><img src="/assets/FacebookReview/2.PNG" alt="me" width="900px"></li><li>粉絲專業存取權杖 → 選擇要訂閱的粉絲頁<br><img src="/assets/FacebookReview/3.PNG" alt="me" width="900px"></li><li>執行 POST /me/subscribed_apps 完成訂閱<br><img src="/assets/FacebookReview/4.PNG" alt="me" width="900px"></li><li>查看 GET /me/subscribed_apps</li><li>移除 DELETE /me/subscribed_apps</li><li>應用程式主控版 → Webhook → Edit Subscription<br><img src="/assets/FacebookReview/7.PNG" alt="me" width="900px"></li><li>feed → Subscribe<br><img src="/assets/FacebookReview/8.PNG" alt="me" width="900px"></li></ol><h2 id="Get-Token"><a href="#Get-Token" class="headerlink" title="Get Token"></a>Get Token</h2><ul><li><a href="https://developers.facebook.com/tools/explorer/" target="_blank" rel="noopener">圖形 API 測試工具</a></li></ul><ol><li>應用程式 → 選擇 Webhook 在的應用程式<br><img src="/assets/FacebookReview/1.PNG" alt="me" width="900px"></li><li>取得權杖 → 取得用戶權杖 → 選擇 manage_pages、publish_pages、read_page_mailboxes、pages_show_list<br><img src="/assets/FacebookReview/2-2.PNG" alt="me" width="900px"></li><li>粉絲專業存取權杖 → 選擇要訂閱的粉絲頁<br><img src="/assets/FacebookReview/3.PNG" alt="me" width="900px"></li><li>將其展延<br><img src="/assets/FacebookReview/2-4.PNG" alt="me" width="900px"><br><img src="/assets/FacebookReview/2-4-2.PNG" alt="me" width="900px"></li><li>Done！　此 Token 搭配 PHP cURL 或是 ASP.NET HttpWebRequest</li></ol><h2 id="公開-→-應用程式送審"><a href="#公開-→-應用程式送審" class="headerlink" title="公開 → 應用程式送審"></a>公開 → 應用程式送審</h2><ul><li>踩過的坑暫時沒寫出來，只記錄做法</li></ul><ol><li>審查需要提供網站給他們操作，故搭配 Nuxt.js + Element-UI 簡單寫一個<br><img src="/assets/FacebookReview/3-1.PNG" alt="me" width="900px"><br><img src="/assets/FacebookReview/3-2.PNG" alt="me" width="900px"></li><li>網站連結　：<a href="https://junxiang.webgene.com.tw/" target="_blank" rel="noopener">Facebook-ReplyConsole</a></li><li>原始碼連結：<a href="https://github.com/xTobu/Facebook-ReplyConsole" target="_blank" rel="noopener">GitHub</a></li><li><p>送審說明：</p><blockquote><p>publish_pages<br>為以粉絲專頁的身分對留言進行回覆，故需取得publish_pages、manage_pages</p><p>read_page_mailboxes<br>讓您能夠讀取用戶所管理粉絲專頁的粉絲專頁收件匣，為以粉絲專頁的身分對留言進行{obj-id}/private_replies，<br>故需取得read_page_mailboxes 、manage_pages</p><p>manage_pages 欲取得<br>1.管理使用者的粉絲專頁，取得token<br>2.為以粉絲專頁的身分發佈，故需取得publish_pages、manage_pages  </p></blockquote></li><li><p>送審原文：（三個權限都輸入一樣內容，測試帳號無填寫）</p><blockquote><p>主要功能是對文章的留言進行回覆的功能，<br>因應用程式的測試帳號無法建立粉絲頁，<br>故無提供測試帳號。</p><p>目的：<br>對文章的留言做回覆與私訊的功能</p><p>流程：</p><p>1.<br>登入並授權給應用程式<br>manage_pages,<br>publish_pages,<br>read_page_mailboxes,<br>pages_show_list</p><p>2.<br>取得可控制的粉絲頁列表</p><p>3.<br>選擇要使用的粉絲頁</p><p>4.<br>選擇目標的文章</p><p>5.<br>對文章內的留言進行回覆<br>obj-id / comments<br>( Scope: publish_pages )</p><p>6.<br>對文章內的留言進行私訊回覆<br>obj-id / private_replies<br>( Scope: read_page_mailboxes )</p></blockquote></li><li><p><a href="/assets/FacebookReview/Video.mp4" target="_blank">影片連結</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      回覆機器人送審 筆記
    
    </summary>
    
    
      <category term="Facebook" scheme="https://xtobu.github.io/tags/Facebook/"/>
    
      <category term="回覆" scheme="https://xtobu.github.io/tags/%E5%9B%9E%E8%A6%86/"/>
    
      <category term="機器人" scheme="https://xtobu.github.io/tags/%E6%A9%9F%E5%99%A8%E4%BA%BA/"/>
    
      <category term="留言" scheme="https://xtobu.github.io/tags/%E7%95%99%E8%A8%80/"/>
    
      <category term="私訊" scheme="https://xtobu.github.io/tags/%E7%A7%81%E8%A8%8A/"/>
    
      <category term="Webhook" scheme="https://xtobu.github.io/tags/Webhook/"/>
    
      <category term="Andy" scheme="https://xtobu.github.io/tags/Andy/"/>
    
  </entry>
  
  <entry>
    <title>Google App Engine Flexible for Golang + Cloud SQL for MySQL</title>
    <link href="https://xtobu.github.io/2018/08/22/Google-App-Engine-Flexible-for-Golang-Cloud-SQL-for-MySQL/"/>
    <id>https://xtobu.github.io/2018/08/22/Google-App-Engine-Flexible-for-Golang-Cloud-SQL-for-MySQL/</id>
    <published>2018-08-22T05:58:43.000Z</published>
    <updated>2019-04-22T05:51:37.435Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Google-Cloud-Platform"><a href="#Google-Cloud-Platform" class="headerlink" title="Google Cloud Platform"></a>Google Cloud Platform</h2><ol><li>建立專案</li><li>開啟 App Engine</li><li>開啟 Cloud SQL for MySQL</li></ol><h2 id="Setting-up-Project-and-Application"><a href="#Setting-up-Project-and-Application" class="headerlink" title="Setting up Project and Application"></a>Setting up Project and Application</h2><ol><li>專案要放在 GOPATH</li><li>import 自己的資料夾時，路徑要寫完整 <code>&quot;TsiahPng-Golang/AppStart&quot;</code></li><li>安裝 GAE 套件 <code>go get -u google.golang.org/appengine</code></li><li><p>Add <code>appengine.Main()</code> 到 ./main.go</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    appstart <span class="string">"TsiahPng-Golang/AppStart"</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"google.golang.org/appengine"</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    appstart.RouteConfig()</span><br><span class="line">    appengine.Main()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Setting <strong>app.yaml</strong> file</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">runtime:</span> <span class="string">go</span></span><br><span class="line"><span class="attr">env:</span> <span class="string">flex</span></span><br><span class="line"></span><br><span class="line"><span class="attr">automatic_scaling:</span></span><br><span class="line"><span class="attr">    min_num_instances:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">resources:</span></span><br><span class="line"><span class="attr">    cpu:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">    memory_gb:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">    disk_size_gb:</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env_variables:</span></span><br><span class="line"><span class="attr">    CLOUD_CONNECTION:</span> <span class="string">"user:password@unix(/cloudsql/INSTANCE_CONNECTION_NAME)/dbname"</span></span><br><span class="line"><span class="attr">    PROJECT_ID:</span> <span class="string">"tsiahpng"</span></span><br><span class="line"><span class="attr">beta_settings:</span></span><br><span class="line"><span class="attr">    cloud_sql_instances:</span> <span class="string">"INSTANCE_CONNECTION_NAME"</span></span><br></pre></td></tr></table></figure><p>PS：</p><ul><li>resources -&gt; memory_gb：<a href="https://stackoverflow.com/questions/45719144/502-server-error-in-google-app-engine-flexible-when-load-testing-with-jmeter" target="_blank" rel="noopener">502 server error in Google App Engine Flexible</a></li></ul></li></ol><h2 id="Using-Cloud-SQL-for-MySQL"><a href="#Using-Cloud-SQL-for-MySQL" class="headerlink" title="Using Cloud SQL for MySQL"></a>Using Cloud SQL for MySQL</h2><ol><li><a href="https://cloud.google.com/appengine/docs/flexible/go/using-cloud-sql" target="_blank" rel="noopener">https://cloud.google.com/appengine/docs/flexible/go/using-cloud-sql</a></li><li>*important Before you begin → Enable the Cloud SQL API</li><li>Download Cloud SDK and Install</li><li><code>gcloud init</code></li><li><code>gcloud auth login</code></li><li><code>gcloud auth application-default login</code></li><li><code>gcloud config set project PROJECT_ID</code></li><li>OPTION: Run the proxy.<br><a href="https://dl.google.com/cloudsql/cloud_sql_proxy_x64.exe" target="_blank" rel="noopener">Download</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./cloud_sql_proxy_x64.exe -instances=&lt;INSTANCE_CONNECTION_NAME&gt;=tcp:3306</span><br></pre></td></tr></table></figure></li></ol><h2 id="Deploy-to-App-Engine"><a href="#Deploy-to-App-Engine" class="headerlink" title="Deploy to App Engine"></a>Deploy to App Engine</h2><ul><li><p>發行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gcloud app deploy</span><br><span class="line">&lt;!-- if use bash with Windows --&gt;</span><br><span class="line">gcloud.cmd app deploy</span><br></pre></td></tr></table></figure></li><li><p>PS：</p><ul><li><a href="https://stackoverflow.com/questions/23433998/gcloud-not-recognized-as-an-internal-or-external-command-on-windows" target="_blank" rel="noopener">gcloud command not found windows</a></li></ul></li></ul><h2 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h2><ul><li>Log<ol><li>Google App Engine</li><li>服務 → 診斷 → 工具 → 紀錄</li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      部署流程與重點紀錄
    
    </summary>
    
    
      <category term="Back-end" scheme="https://xtobu.github.io/tags/Back-end/"/>
    
      <category term="Go" scheme="https://xtobu.github.io/tags/Go/"/>
    
      <category term="Golang" scheme="https://xtobu.github.io/tags/Golang/"/>
    
      <category term="Google App Engine" scheme="https://xtobu.github.io/tags/Google-App-Engine/"/>
    
      <category term="GAE" scheme="https://xtobu.github.io/tags/GAE/"/>
    
      <category term="Cloud SQL" scheme="https://xtobu.github.io/tags/Cloud-SQL/"/>
    
      <category term="MySQL" scheme="https://xtobu.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>About Me</title>
    <link href="https://xtobu.github.io/2018/08/13/About-Me/"/>
    <id>https://xtobu.github.io/2018/08/13/About-Me/</id>
    <published>2018-08-13T10:57:46.000Z</published>
    <updated>2019-04-22T05:51:37.434Z</updated>
    
    <content type="html"><![CDATA[<!--## <font color="#028760">❀ 索引</font>-   [關於](#❀-ABOUT)-   [經驗](#❀-EXPERIENCE)-   [近期作品](#❀-RECENT-WORKS)-   [技能](#❀-SKILLS) --><h2 id="❀-Intro"><a href="#❀-Intro" class="headerlink" title="❀ Intro"></a><font color="#028760">❀ Intro</font></h2><p><img src="/assets/images/About/me.jpg" alt="me" width="350px" height="350px"></p><ul><li>姓名： 黃俊翔</li><li>生日： 1993 年 06 月 10 日</li><li>資歷： 3 年 3 個月</li><li>信箱： <a href="mailto:junxiang.oriint@gmail.com" target="_blank" rel="noopener">junxiang.oriint@gmail.com</a></li><li>社群： <a href="https://github.com/xTobu" target="_blank" style="font-weight:bold;color:#007bbb">GitHub</a>、<a href="https://xtobu.github.io/categories/LeetCode/" target="_blank" style="font-weight:bold">LeetCode</a>、<a href="https://xtobu.github.io/" target="_blank" style>Blog</a>、<a href="https://www.instagram.com/junxiang.h/" target="_blank" style>Instagram</a></li><li>關於：<ul><li><h3 id="Back-End"><a href="#Back-End" class="headerlink" title="Back-End"></a><font color="#007bbb">Back-End</font></h3></li><li>擅長 C#、.NET Web API、MVC、SignalR、Web Form</li><li>RESTful API 設計與實作，搭配 Swagger 建立規格文件</li><li>對 Golang 極富興趣，搭配 Gin 完成 CRUD + JWT 驗證</li><li>能夠使用 Node.js 與 Express 搭建輕量 RESTful API</li><li>雲端平台使用經驗（GCP、Azure、AWS）</li><li>熟悉 Facebook Graph API</li><li>能進行 PHP 基礎的錯誤排除</li><li><h3 id="Front-End"><a href="#Front-End" class="headerlink" title="Front-End"></a><font color="#007bbb">Front-End</font></h3></li><li>網站的互動工程、動態效果製作</li><li>各種 SDK 使用，如：Youtube、Instagram…等</li><li>熟練前端工具，如：jQuery、Webpack、Nuxt.js…等</li><li>知悉多種套件，如：TweenMax、Fabric、Create.js、Slick…等</li><li>以 Vue 為主攻的 MVVM 框架，Angular 和 React 有一定的了解</li><li>為了 Server Side Rendering 而學習 Node.js</li><li>搭配 Express 完成了 Isomorphic JavaScript 架構</li><li><h3 id="Else"><a href="#Else" class="headerlink" title="Else"></a><font color="#007bbb">Else</font></h3></li><li>以 Webduino、Arduino 與 Sensor、Firebase、Track.js<br>搭配大螢幕顯示 Website，完成人類辨識與臉部追蹤的實體裝置</li><li>Facebook AR Studio 擴增實境的研究與專案開發</li><li>訓練邏輯能力和通勤時很好用的 <a href="https://xtobu.github.io/categories/LeetCode/" target="_blank" style="font-weight:bold">LeetCode</a></li><li><h3 id="About-Me"><a href="#About-Me" class="headerlink" title="About Me"></a><font color="#007bbb">About Me</font></h3></li><li>實習 1 年、正職 2 年 3 個月</li><li>喜歡思考和面對問題，並熱忱於新技術的學習</li><li>追求更好，並具備實踐的積極性</li><li>相信人外有人，相信問題都存在更優秀的解決方式</li><li>喜歡烹飪、足球、音樂、健力三項、慢跑、Cruiser、散步</li><li>程式碼不是生活的全部</li></ul></li></ul><hr><h2 id="❀-Working-Experience"><a href="#❀-Working-Experience" class="headerlink" title="❀ Working Experience"></a><font color="#028760">❀ Working Experience</font></h2><h3 id="資工系助教"><a href="#資工系助教" class="headerlink" title="資工系助教"></a><font color="#007bbb">資工系助教</font></h3><ul><li>時間：2012 / 09 ~ 2014 / 06 ( 1 年 9 個月 )</li><li>職稱：C# 視窗程式設計 - TA</li><li>負責：<ul><li>協助教學方面的事務，如指導同學的問題、進行補救教學、<br>監考、成績的統計紀錄、教材準備等</li></ul></li></ul><h3 id="微星科技-Msi"><a href="#微星科技-Msi" class="headerlink" title="微星科技 Msi"></a><font color="#007bbb">微星科技 Msi</font></h3><ul><li>時間： 2014 / 06 ~ 2015 /06 ( 1 年 )</li><li>職稱： 網頁組 - ASP.NET Intern</li><li>負責：<ul><li>參與徵才系統的製作，<br>接收來自人力銀行的應徵資料，並對特殊需求做篩選，<br>再由 HR 管理，例如轉至部門主管的與否、內部文件的核章流程，<br>類似處理人力資源的 ERP 系統。</li><li>內部站與活動頁的製作與修改。</li></ul></li></ul><h3 id="網路基因-WebGene"><a href="#網路基因-WebGene" class="headerlink" title="網路基因 WebGene"></a><font color="#007bbb">網路基因 WebGene</font></h3><ul><li>時間： 2016 / 06 ~ 2018 /09 ( 2 年 3 個月 )</li><li>職稱： 技術部 - Web Developer</li><li>負責：<ul><li>ASP.NET Web API、MVC 的製作開發</li><li>搭配 SignalR 建立即時互動的網站</li><li>Front-End 的互動工程、動態效果製作、 SDK 使用<br>API 整合與串接、搭配各式套件營造更棒的使用者體驗</li><li>熟悉 Facebook Webhook 串接、Graph API 操作與送審流程</li><li>對各式各樣的天馬行空進行研究與解答</li><li>做好一位解決問題的人</li></ul></li></ul><hr><h2 id="❀-Recent-Projects"><a href="#❀-Recent-Projects" class="headerlink" title="❀ Recent Projects"></a><font color="#028760">❀ Recent Projects</font></h2><ul><li><h3 id="TsiahPng-中午吃什麼-Golang-Practice"><a href="#TsiahPng-中午吃什麼-Golang-Practice" class="headerlink" title="TsiahPng - 中午吃什麼 ( Golang Practice )"></a><font color="#007bbb">TsiahPng - 中午吃什麼 ( Golang Practice )</font></h3><blockquote><p>Development Site<br>隨機選擇午餐，後台新增餐廳<br>Golang、MySQL 的練習專案，建置於 GCP App Engine</p></blockquote><p><img src="/assets/images/About-Me/TsiahPng/0.PNG" alt="me" width="800px"><br><img src="/assets/images/About-Me/TsiahPng/1.PNG" alt="me" width="800px"><br><img src="/assets/images/About-Me/TsiahPng/2.PNG" alt="me" width="800px"><br><img src="/assets/images/About-Me/TsiahPng/3.PNG" alt="me" width="800px"></p><h4 id="資訊"><a href="#資訊" class="headerlink" title="資訊"></a>資訊</h4><h5 id="Site"><a href="#Site" class="headerlink" title="Site"></a>Site</h5><ul><li>連結：<a href="https://tsiahpng.azurewebsites.net/" target="_blank" rel="noopener">https://tsiahpng.azurewebsites.net/</a></li></ul><h5 id="Admin"><a href="#Admin" class="headerlink" title="Admin"></a>Admin</h5><ul><li>連結：<a href="https://tsiahpng.azurewebsites.net/admin/" target="_blank" rel="noopener">https://tsiahpng.azurewebsites.net/admin/</a></li><li>API：<a href="https://tsiahpng.appspot.com/" target="_blank" rel="noopener">https://tsiahpng.appspot.com/</a></li><li>帳號：admin</li><li>密碼：0000</li></ul><h5 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h5><ul><li>GitHub：<a href="https://github.com/xTobu/TsiahPng-Golang" target="_blank" rel="noopener">https://github.com/xTobu/TsiahPng-Golang</a></li></ul><h4 id="使用技術"><a href="#使用技術" class="headerlink" title="使用技術"></a>使用技術</h4><ul><li>Golang + Gin</li><li>JSON Web Token Auth</li><li>MySQL CRUD with Cloud SQL</li><li>Deploy on GCP App Engine</li></ul></li></ul><hr><ul><li><h3 id="Media-Tech-媒體科技大會-Admin"><a href="#Media-Tech-媒體科技大會-Admin" class="headerlink" title="Media Tech - 媒體科技大會 ( Admin )"></a><font color="#007bbb">Media Tech - 媒體科技大會 ( Admin )</font></h3><blockquote><p>Development Site<br>Media Tech 活動報名的後端<br>負責 API 設計與 Admin 的建置</p></blockquote><p><img src="/assets/images/About-Me/MediaTechAdmin/01.PNG" alt="me" width="800px"><br><img src="/assets/images/About-Me/MediaTechAdmin/02.PNG" alt="me" width="800px"><br><img src="/assets/images/About-Me/MediaTechAdmin/03.PNG" alt="me" width="800px"></p><h4 id="資訊-1"><a href="#資訊-1" class="headerlink" title="資訊"></a>資訊</h4><ul><li>網站連結：<a href="https://wg-mediatech.azurewebsites.net/admin/" target="_blank" rel="noopener">https://wg-mediatech.azurewebsites.net/admin/</a></li><li>帳號：admin</li><li>密碼：mediatech</li></ul><h4 id="使用技術-1"><a href="#使用技術-1" class="headerlink" title="使用技術"></a>使用技術</h4><ul><li>ASP.NET Web API + JWT Auth</li><li>Vue.js + Vuex + Vue-Element-Admin + Element-UI</li><li>API 串接 Axios + Promise + Try / Catch</li><li>Async / Await with forEach()</li><li>Deploy on Azure</li></ul></li></ul><hr><ul><li><h3 id="雪碧-沁涼絕殺-24-秒-for-Mobile"><a href="#雪碧-沁涼絕殺-24-秒-for-Mobile" class="headerlink" title="雪碧 沁涼絕殺 24 秒 ( for Mobile )"></a><font color="#007bbb">雪碧 沁涼絕殺 24 秒 ( for Mobile )</font></h3><blockquote><p>Development Site<br>雪碧活動的即時互動遊戲，一人投球，一人為籃框。<br>負責 SignalR 的設計、網頁前端的製作</p></blockquote><!-- <video width="600" controls><source src="/assets/images/About-Me/sprite.mp4" type="video/mp4"></video> --> <!-- <a href="/assets/images/About-Me/sprite/sprite.mp4" target="_blank">VIDEO LINK</a> --><p><img src="/assets/images/About-Me/sprite/main.png" alt="me" width="800px"></p><h4 id="資訊-2"><a href="#資訊-2" class="headerlink" title="資訊"></a>資訊</h4><ul><li>網站連結：<a href="https://wg-sprite.azurewebsites.net/2017coolgame24s" target="_blank" rel="noopener">https://wg-sprite.azurewebsites.net/2017coolgame24s</a></li><li>介紹影片：<a href="/assets/images/About-Me/sprite/sprite.mp4" target="_blank">Video Link</a></li></ul><h4 id="使用技術-2"><a href="#使用技術-2" class="headerlink" title="使用技術"></a>使用技術</h4><ul><li>使用 ASP.NET SignalR 對兩個裝置完成即時互動</li><li>Create.js + Easel.js 完成 Flash → HTML Canvas</li><li>Deploy on Azure</li></ul></li></ul><hr><ul><li><h3 id="Facebook-ReplyConsole-臉書權限審核用平台"><a href="#Facebook-ReplyConsole-臉書權限審核用平台" class="headerlink" title="Facebook ReplyConsole - 臉書權限審核用平台"></a><font color="#007bbb">Facebook ReplyConsole - 臉書權限審核用平台</font></h3><blockquote><p>Development Site<br>GAP 某活動在 Facebook 上的互動，為了審核回覆機器人的權限而製作的平台</p></blockquote><p><img src="/assets/images/About-Me/Facebook/01.PNG" alt="me" width="800px"><br><img src="/assets/images/About-Me/Facebook/02.PNG" alt="me" width="800px"><br><img src="/assets/images/About-Me/Facebook/03.PNG" alt="me" width="800px"></p><h4 id="資訊-3"><a href="#資訊-3" class="headerlink" title="資訊"></a>資訊</h4><ul><li>網站連結：<a href="https://junxiang.webgene.com.tw/" target="_blank" rel="noopener">https://junxiang.webgene.com.tw/</a></li></ul><h5 id="Source-Code-1"><a href="#Source-Code-1" class="headerlink" title="Source Code"></a>Source Code</h5><ul><li>GitHub：<a href="https://github.com/xTobu/Facebook-ReplyConsole" target="_blank" rel="noopener">https://github.com/xTobu/Facebook-ReplyConsole</a></li></ul><h4 id="使用技術-3"><a href="#使用技術-3" class="headerlink" title="使用技術"></a>使用技術</h4><ul><li>Vue.js + Nuxt.js + Element-UI</li><li>Facebook Graph API SDK</li></ul></li></ul><hr><ul><li><h3 id="DMA-數位奇點獎"><a href="#DMA-數位奇點獎" class="headerlink" title="DMA - 數位奇點獎"></a><font color="#007bbb">DMA - 數位奇點獎</font></h3><blockquote><p>Production Site<br>DMA 數位奇點獎的介紹站與登入後的報名與管理頁面<br>負責 Site 與 Admin 的製作</p></blockquote><p><img src="/assets/images/About-Me/DSA-DMA/01.png" alt="me" width="800px"><br><img src="/assets/images/About-Me/DSA-DMA/02.png" alt="me" width="800px"><br><img src="/assets/images/About-Me/DSA-DMA/03.png" alt="me" width="800px"></p><h4 id="資訊-4"><a href="#資訊-4" class="headerlink" title="資訊"></a>資訊</h4><ul><li>網站連結：<a href="https://www.dsaawards.com/2018/" target="_blank" rel="noopener">https://www.dsaawards.com/2018/</a></li></ul><h4 id="使用技術-4"><a href="#使用技術-4" class="headerlink" title="使用技術"></a>使用技術</h4><ul><li>API 串接 Axios + Async / Await</li><li>Vue.js + Vuex + Nuxt.js + Proxy Module</li><li>Create.js + Easel.js</li></ul></li></ul><hr><ul><li><h3 id="WildAid-野生救援-世界無翅宣言"><a href="#WildAid-野生救援-世界無翅宣言" class="headerlink" title="WildAid 野生救援 - 世界無翅宣言"></a><font color="#007bbb">WildAid 野生救援 - 世界無翅宣言</font></h3><blockquote><p>Production Site<br>WildAid 的官網<br>負責 Site 的製作與 Facebook SDK 的使用</p></blockquote><p><img src="/assets/images/About-Me/WildAid/01.PNG" alt="me" width="800px"><br><img src="/assets/images/About-Me/WildAid/03.PNG" alt="me" width="800px"><br><img src="/assets/images/About-Me/WildAid/02.PNG" alt="me" width="800px"></p><h4 id="資訊-5"><a href="#資訊-5" class="headerlink" title="資訊"></a>資訊</h4><ul><li>網站連結：<a href="https://www.globalsharkpledge.org/" target="_blank" rel="noopener">https://www.globalsharkpledge.org/</a></li></ul><h4 id="使用技術-5"><a href="#使用技術-5" class="headerlink" title="使用技術"></a>使用技術</h4><ul><li>Vue.js + vue-router + vue-i18n</li><li>Fabric、TweenMax、Mixitup、ScrollMagic、Modified Magnific</li></ul></li></ul><hr><ul><li><h3 id="兒童福利聯盟-長假營養廚房"><a href="#兒童福利聯盟-長假營養廚房" class="headerlink" title="兒童福利聯盟 - 長假營養廚房"></a><font color="#007bbb">兒童福利聯盟 - 長假營養廚房</font></h3><blockquote><p>Production Site<br>兒童福利聯盟的官網，2018 年版<br>負責 Site 的前端製作與 PHP API 的串接</p></blockquote><p><img src="/assets/images/About-Me/love/web01.png" alt="me" width="800px"><br><img src="/assets/images/About-Me/love/web02.png" alt="me" width="800px"><br><img src="/assets/images/About-Me/love/web11.png" alt="me" width="800px"></p><h4 id="資訊-6"><a href="#資訊-6" class="headerlink" title="資訊"></a>資訊</h4><ul><li>網站連結：<a href="http://cell2.webgene.com.tw/2018-lovechildren/" target="_blank" rel="noopener">http://cell2.webgene.com.tw/2018-lovechildren/</a></li></ul><h4 id="使用技術-6"><a href="#使用技術-6" class="headerlink" title="使用技術"></a>使用技術</h4><ul><li>Vue + vue-router + Pagination and Filter</li><li>TweenMax、ScrollReveal、Slick、Hammer、Magnific</li></ul></li></ul><hr><h2 id="❀-Skills"><a href="#❀-Skills" class="headerlink" title="❀ Skills"></a><font color="#028760">❀ Skills</font></h2><h3 id="Back-End-1"><a href="#Back-End-1" class="headerlink" title="Back-End"></a><font color="#007bbb">Back-End</font></h3><ul><li><strong>C# .NET Framework</strong><ul><li>Web API</li><li>MVC</li><li>Web Form</li></ul></li><li><strong>Golang</strong><ul><li>Gin</li></ul></li><li><strong>Node.js</strong><ul><li>Express</li></ul></li><li><strong>SQL</strong><ul><li>MS SQL Server</li><li>MySQL</li><li>Firebase</li></ul></li><li><strong>Cloud Platform</strong><ul><li>Google Cloud Platform</li><li>Microsoft Azure</li><li>Amazon Web Services</li></ul></li><li><strong>API Documentation</strong><ul><li>Swagger</li></ul></li></ul><h3 id="Front-End-1"><a href="#Front-End-1" class="headerlink" title="Front-End"></a><font color="#007bbb">Front-End</font></h3><ul><li><strong>Website</strong><ul><li>HTML、Pug</li><li>CSS、Sass</li><li>JavasScript、ECMAScript6</li><li>Webpack、Parcel</li></ul></li><li><strong>JS Framework</strong><ul><li>Vue、Nuxt</li><li>React</li><li>Angular</li></ul></li><li><strong>UI Library</strong><ul><li>Element</li><li>Ant Design</li></ul></li><li><strong>Third Party Library</strong><ul><li>jQuery</li><li>Fabric</li><li>TweenMax</li><li>Create.js</li><li>ScrollReveal</li><li>Slick</li><li>… etc.</li></ul></li></ul><hr>]]></content>
    
    <summary type="html">
    
      My Resume
    
    </summary>
    
    
      <category term="Resume" scheme="https://xtobu.github.io/tags/Resume/"/>
    
      <category term="Portfolio" scheme="https://xtobu.github.io/tags/Portfolio/"/>
    
      <category term="履歷" scheme="https://xtobu.github.io/tags/%E5%B1%A5%E6%AD%B7/"/>
    
  </entry>
  
  <entry>
    <title>ⓁⒸ ‧‧‧ 22. Generate Parentheses</title>
    <link href="https://xtobu.github.io/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-22-Generate-Parentheses/"/>
    <id>https://xtobu.github.io/2018/07/20/LC-‧‧‧-22-Generate-Parentheses/</id>
    <published>2018-07-20T12:45:04.000Z</published>
    <updated>2019-04-22T05:51:37.436Z</updated>
    
    <content type="html"><![CDATA[<h1 id="22-Generate-Parentheses-產生括號組"><a href="#22-Generate-Parentheses-產生括號組" class="headerlink" title="22. Generate Parentheses 產生括號組"></a><a href="https://leetcode.com/problems/generate-parentheses/description/" target="_blank" rel="noopener">22. Generate Parentheses 產生括號組</a></h1><h2 id="❀-Origin"><a href="#❀-Origin" class="headerlink" title="❀ Origin"></a>❀ Origin</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Given <em>n</em> pairs of parentheses, write a function to generate all combinations of well-formed parentheses.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Input: n = 3</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  &quot;((()))&quot;,</span><br><span class="line">  &quot;(()())&quot;,</span><br><span class="line">  &quot;(())()&quot;,</span><br><span class="line">  &quot;()(())&quot;,</span><br><span class="line">  &quot;()()()&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><hr><h2 id="❀-翻譯"><a href="#❀-翻譯" class="headerlink" title="❀ 翻譯"></a>❀ 翻譯</h2><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>給定 <em>n</em> 對的括號, 編寫一個函數來產生所有格式正確的括號的組合.</p><hr><h2 id="❀-Solution"><a href="#❀-Solution" class="headerlink" title="❀ Solution"></a>❀ Solution</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> generateParenthesis = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> arrResult = [];</span><br><span class="line">  <span class="comment">// let countRecurse = 0;</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">recurse</span>(<span class="params">current = <span class="string">""</span>, left = <span class="number">0</span>, right = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// countRecurse++</span></span><br><span class="line">    <span class="comment">// console.log('countRecurse: ',countRecurse,'｜','current :', current, '｜', left, right);</span></span><br><span class="line">    <span class="comment">// 等長度組到了 n*2 (括號長度為二) 的時候, 即可推到 arrResult</span></span><br><span class="line">    <span class="keyword">if</span> (current.length === <span class="number">2</span> * n) &#123;</span><br><span class="line">      arrResult.push(current);</span><br><span class="line">      <span class="comment">// console.log('== push and return ==');</span></span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (left &lt; n)</span><br><span class="line">      <span class="comment">// 追加 '(' , 並left + 1</span></span><br><span class="line">      recurse(current + <span class="string">"("</span>, left + <span class="number">1</span>, right);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (right &lt; left)</span><br><span class="line">      <span class="comment">// 判斷完 left &lt; n</span></span><br><span class="line">      <span class="comment">// 追加 ')' , 並left + 1</span></span><br><span class="line">      recurse(current + <span class="string">")"</span>, left, right + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 回傳結果</span></span><br><span class="line">    <span class="keyword">return</span> arrResult;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 執行遞迴</span></span><br><span class="line">  <span class="comment">// 回傳結果</span></span><br><span class="line">  <span class="keyword">return</span> recurse();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a>Idea</h3><ul><li><em>n</em> 代表每個元素會有 <em>n</em> 個 ‘(‘ 和 <em>n</em> 個 ‘)’</li><li>建立一個字串 <em>current</em> 來暫存還沒組合完成的括弧</li><li><em>current</em> 的長度等於 2 * <em>n</em> 時, 及代表正確括號, 即可推到結果陣列 <em>arrResult</em></li><li>使用遞迴, 先判斷 <em>left</em> 要小於 <em>n</em></li><li>判斷 <em>right</em> 小於 <em>left</em> , 才能滿足括號規則</li><li><a href="https://segmentfault.com/a/1190000013690046" target="_blank" rel="noopener">Ref. soleil 阿璐</a></li></ul><h3 id="Execution"><a href="#Execution" class="headerlink" title="Execution"></a>Execution</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">countRecurse:  1 ｜ current :  ｜ 0 0</span><br><span class="line">countRecurse:  2 ｜ current : ( ｜ 1 0</span><br><span class="line">countRecurse:  3 ｜ current : (( ｜ 2 0</span><br><span class="line">countRecurse:  4 ｜ current : ((( ｜ 3 0</span><br><span class="line">countRecurse:  5 ｜ current : ((() ｜ 3 1</span><br><span class="line">countRecurse:  6 ｜ current : ((()) ｜ 3 2</span><br><span class="line">countRecurse:  7 ｜ current : ((())) ｜ 3 3</span><br><span class="line">== push and return ==</span><br><span class="line">// 跳到 #3 的 right + 1 = 1 判斷</span><br><span class="line">===============================</span><br><span class="line"></span><br><span class="line">// right = 0 + 1</span><br><span class="line">// 遞迴先判斷 left 原則</span><br><span class="line">countRecurse:  8 ｜ current : (() ｜ 2 1</span><br><span class="line">countRecurse:  9 ｜ current : (()( ｜ 3 1</span><br><span class="line">countRecurse:  10 ｜ current : (()() ｜ 3 2</span><br><span class="line">countRecurse:  11 ｜ current : (()()) ｜ 3 3</span><br><span class="line">== push and return ==</span><br><span class="line">// 跳到 #3 的 right + 1 = 2 判斷</span><br><span class="line">===============================</span><br><span class="line"></span><br><span class="line">countRecurse:  12 ｜ current : (()) ｜ 2 2</span><br><span class="line">countRecurse:  13 ｜ current : (())( ｜ 3 2</span><br><span class="line">countRecurse:  14 ｜ current : (())() ｜ 3 3</span><br><span class="line">== push and return ==</span><br><span class="line">// 跳到 #2 的 right + 1 = 1 判斷</span><br><span class="line">===============================</span><br><span class="line"></span><br><span class="line">countRecurse:  15 ｜ current : () ｜ 1 1</span><br><span class="line">countRecurse:  16 ｜ current : ()( ｜ 2 1</span><br><span class="line">countRecurse:  17 ｜ current : ()(( ｜ 3 1</span><br><span class="line">countRecurse:  18 ｜ current : ()(() ｜ 3 2</span><br><span class="line">countRecurse:  19 ｜ current : ()(()) ｜ 3 3</span><br><span class="line">== push and return ==</span><br><span class="line">// 跳到 #16 的 right + 1 = 2 判斷</span><br><span class="line">===============================</span><br><span class="line"></span><br><span class="line">countRecurse:  20 ｜ current : ()() ｜ 2 2</span><br><span class="line">countRecurse:  21 ｜ current : ()()( ｜ 3 2</span><br><span class="line">countRecurse:  22 ｜ current : ()()() ｜ 3 3</span><br><span class="line">== push and return ==</span><br><span class="line">// 因為要滿足 right &lt; left</span><br><span class="line">// 故輸出結果</span><br><span class="line"></span><br><span class="line">[ &apos;((()))&apos;, &apos;(()())&apos;, &apos;(())()&apos;, &apos;()(())&apos;, &apos;()()()&apos; ]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      產生括號組
    
    </summary>
    
      <category term="LeetCode" scheme="https://xtobu.github.io/categories/LeetCode/"/>
    
    
      <category term="JavaScript" scheme="https://xtobu.github.io/tags/JavaScript/"/>
    
      <category term="LeetCode" scheme="https://xtobu.github.io/tags/LeetCode/"/>
    
      <category term="Recursive" scheme="https://xtobu.github.io/tags/Recursive/"/>
    
      <category term="ⓁⒸ - Medium" scheme="https://xtobu.github.io/tags/LC-Medium/"/>
    
      <category term="⭐⭐" scheme="https://xtobu.github.io/tags/%E2%AD%90%E2%AD%90/"/>
    
  </entry>
  
  <entry>
    <title>ⓁⒸ ‧‧‧ 347. Top K Frequent Elements</title>
    <link href="https://xtobu.github.io/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-347-Top-K-Frequent-Elements/"/>
    <id>https://xtobu.github.io/2018/07/20/LC-‧‧‧-347-Top-K-Frequent-Elements/</id>
    <published>2018-07-20T12:41:28.000Z</published>
    <updated>2019-04-22T05:51:37.436Z</updated>
    
    <content type="html"><![CDATA[<h1 id="347-Top-K-Frequent-Elements-前-K-個頻繁出現的元素"><a href="#347-Top-K-Frequent-Elements-前-K-個頻繁出現的元素" class="headerlink" title="347. Top K Frequent Elements 前 K 個頻繁出現的元素"></a><a href="https://leetcode.com/problems/top-k-frequent-elements/description/" target="_blank" rel="noopener">347. Top K Frequent Elements 前 K 個頻繁出現的元素</a></h1><h2 id="❀-Origin"><a href="#❀-Origin" class="headerlink" title="❀ Origin"></a>❀ Origin</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Given a non-empty array of integers, return the <strong>k</strong> most frequent elements.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input:  nums = [1,1,1,2,2,3], k = 2</span><br><span class="line">Output: [1,2]</span><br></pre></td></tr></table></figure><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><ul><li>You may assume _k_ is always valid, 1 ≤ _k_ ≤ number of unique elements.</li><li>Your algorithm’s time complexity <strong>must be</strong> better than O(<em>n</em> log <em>n</em>), where <em>n</em> is the array’s size.</li></ul><hr><h2 id="❀-翻譯"><a href="#❀-翻譯" class="headerlink" title="❀ 翻譯"></a>❀ 翻譯</h2><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>給定一個非空的整數陣列, 回傳 <strong>k</strong> 個最頻繁出現的元素.</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>你可以假設 _k_ 始終有效, 1 ≤ _k_ ≤ 獨一無二的元素的數量</li><li>你算法的時間複雜度<strong>必須</strong>優於 O(<em>n</em> log <em>n</em>), 其中 <em>n</em> 是陣列的大小.</li></ul><hr><h2 id="❀-Solution"><a href="#❀-Solution" class="headerlink" title="❀ Solution"></a>❀ Solution</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; k</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> topKFrequent = <span class="function"><span class="keyword">function</span>(<span class="params">nums, k</span>) </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用 obj 或 Map() 的方式來計算每個元素出現了幾次</span></span><br><span class="line"><span class="comment"> * 將陣列元素的值當作物件 obj 的 key ( obj[value] )</span></span><br><span class="line"><span class="comment"> * obj 的 value 則為次數</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> freqs = nums.reduce(<span class="function">(<span class="params">obj, value</span>) =&gt;</span> &#123;</span><br><span class="line">obj[value] = obj[value] + <span class="number">1</span> || <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line">&#125;, &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用 freqs 新建一個 Object.keys()</span></span><br><span class="line"><span class="comment"> * 並搭配 freqs 做排序</span></span><br><span class="line"><span class="comment"> * 之後以 slice() 取到目標數量 k</span></span><br><span class="line"><span class="comment"> * 再用 map() 整理新的陣列,</span></span><br><span class="line"><span class="comment"> * 因為Object.keys()的關係, 故用 Number(key) 傳入 key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Object</span>.keys(freqs)</span><br><span class="line">.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> freqs[b] - freqs[a])</span><br><span class="line">.slice(<span class="number">0</span>, k)</span><br><span class="line">.map(<span class="function"><span class="params">key</span> =&gt;</span> <span class="built_in">Number</span>(key));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> nums = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> k = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(topKFrequent(nums, k));</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 別種方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// var topKFrequent = function(nums, k) &#123;</span></span><br><span class="line"><span class="comment">// var hash = &#123;&#125;,</span></span><br><span class="line"><span class="comment">// res = [];</span></span><br><span class="line"><span class="comment">// nums.forEach(function(value) &#123;</span></span><br><span class="line"><span class="comment">// hash[value] = hash[value] + 1 || 1;</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// Object.keys(hash)</span></span><br><span class="line"><span class="comment">// .sort(function(a, b) &#123;</span></span><br><span class="line"><span class="comment">// return hash[b] - hash[a];</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="comment">// .slice(0, k)</span></span><br><span class="line"><span class="comment">// .forEach(function(x) &#123;</span></span><br><span class="line"><span class="comment">// res.push(parseInt(x));</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// return res;</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// var topKFrequent = function(nums, k) &#123;</span></span><br><span class="line"><span class="comment">//     const freqs = nums.reduce((map, value) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//         if(map.has(value)) &#123;</span></span><br><span class="line"><span class="comment">//             map.set(value, map.get(value) + 1)</span></span><br><span class="line"><span class="comment">//         &#125; else &#123;</span></span><br><span class="line"><span class="comment">//             map.set(value, 1)</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//         return map;</span></span><br><span class="line"><span class="comment">//     &#125;, new Map());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     return Array</span></span><br><span class="line"><span class="comment">//         .from(freqs.entries())</span></span><br><span class="line"><span class="comment">//         .sort((entry1, entry2) =&gt; entry2[1] - entry1[1])</span></span><br><span class="line"><span class="comment">//         .slice(0,k)</span></span><br><span class="line"><span class="comment">//         .map(entry =&gt; entry[0])</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      前 K 個頻繁出現的元素
    
    </summary>
    
      <category term="LeetCode" scheme="https://xtobu.github.io/categories/LeetCode/"/>
    
    
      <category term="JavaScript" scheme="https://xtobu.github.io/tags/JavaScript/"/>
    
      <category term="LeetCode" scheme="https://xtobu.github.io/tags/LeetCode/"/>
    
      <category term="Array.reduce()" scheme="https://xtobu.github.io/tags/Array-reduce/"/>
    
      <category term="⭐" scheme="https://xtobu.github.io/tags/%E2%AD%90/"/>
    
      <category term="ⓁⒸ - Medium" scheme="https://xtobu.github.io/tags/LC-Medium/"/>
    
      <category term="Array.sort()" scheme="https://xtobu.github.io/tags/Array-sort/"/>
    
      <category term="Array.slice()" scheme="https://xtobu.github.io/tags/Array-slice/"/>
    
      <category term="Array.map()" scheme="https://xtobu.github.io/tags/Array-map/"/>
    
      <category term="Object.keys()" scheme="https://xtobu.github.io/tags/Object-keys/"/>
    
      <category term="Map()" scheme="https://xtobu.github.io/tags/Map/"/>
    
  </entry>
  
  <entry>
    <title>ⓁⒸ ‧‧‧ 238. Product of Array Except Self</title>
    <link href="https://xtobu.github.io/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-238-Product-of-Array-Except-Self/"/>
    <id>https://xtobu.github.io/2018/07/20/LC-‧‧‧-238-Product-of-Array-Except-Self/</id>
    <published>2018-07-20T12:34:31.000Z</published>
    <updated>2019-04-22T05:51:37.436Z</updated>
    
    <content type="html"><![CDATA[<h1 id="238-Product-of-Array-Except-Self-除了自身以外的陣列乘積"><a href="#238-Product-of-Array-Except-Self-除了自身以外的陣列乘積" class="headerlink" title="238. Product of Array Except Self 除了自身以外的陣列乘積"></a><a href="https://leetcode.com/problems/product-of-array-except-self/description/" target="_blank" rel="noopener">238. Product of Array Except Self 除了自身以外的陣列乘積</a></h1><h2 id="❀-Origin"><a href="#❀-Origin" class="headerlink" title="❀ Origin"></a>❀ Origin</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Given an array <code>nums</code> of n integers where <em>n</em> &gt; 1,<br>return an array <code>output</code> such that <code>output[i]</code> is equal to the product of all the elements of <code>nums</code> except <code>nums[i]</code>.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input:  [1,2,3,4]</span><br><span class="line">Output: [24,12,8,6]</span><br></pre></td></tr></table></figure><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p>Please solve it <strong>without division</strong> and in O(<em>n</em>).</p><h3 id="Follow-up"><a href="#Follow-up" class="headerlink" title="Follow up"></a>Follow up</h3><p>Could you solve it with constant space complexity?<br>(The output array <strong>does not</strong> count as extra space for the purpose of space complexity analysis.)</p><hr><h2 id="❀-翻譯"><a href="#❀-翻譯" class="headerlink" title="❀ 翻譯"></a>❀ 翻譯</h2><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>給定一個整數 <em>n</em> &gt; 1 的陣列 <code>nums</code> ,<br>回傳一個陣列 <code>output</code> , 且 <code>output[i]</code> 是等於 <code>nums</code> 裡每一個數除了 <code>nums[i]</code> 以外的乘積.</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>請用沒有<strong>除法</strong>且時間複雜度 O(<em>n</em>) 的方式解決.</p><h3 id="後續"><a href="#後續" class="headerlink" title="後續"></a>後續</h3><p>你可以滿足常數空間複雜度地解決嗎?<br>(出於空間複雜度分析的目的, 輸出陣列<strong>不會</strong>被當作額外空間)</p><hr><h2 id="❀-Solution"><a href="#❀-Solution" class="headerlink" title="❀ Solution"></a>❀ Solution</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * nums = [a, b, c, d] = [1, 2, 3, 4]</span></span><br><span class="line"><span class="comment"> * output = [b*c*d, a*c*d, a*b*d, a*b*c]</span></span><br><span class="line"><span class="comment"> * 往左乘 [1,       a, a*b, a*b*c] = [1 , 1 , 2, 6]</span></span><br><span class="line"><span class="comment"> * 往右乘 [b*c*d, c*d,   d,    1]  = [24, 12, 4, 1]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> productExceptSelf = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (nums.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> nums;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> length = nums.length;</span><br><span class="line"><span class="keyword">let</span> arrResult = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"><span class="keyword">let</span> leftProduct = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> rightProduct = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先從左至右, 算往左乘的乘積</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">arrResult[i] = leftProduct;</span><br><span class="line">leftProduct *= nums[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 從右至左, 算往右的乘積, 並與往左的乘積相乘</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> j = length - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">arrResult[j] *= rightProduct;</span><br><span class="line">rightProduct *= nums[j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> arrResult;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(productExceptSelf([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      除了自身以外的陣列乘積
    
    </summary>
    
      <category term="LeetCode" scheme="https://xtobu.github.io/categories/LeetCode/"/>
    
    
      <category term="JavaScript" scheme="https://xtobu.github.io/tags/JavaScript/"/>
    
      <category term="LeetCode" scheme="https://xtobu.github.io/tags/LeetCode/"/>
    
      <category term="⭐" scheme="https://xtobu.github.io/tags/%E2%AD%90/"/>
    
      <category term="ⓁⒸ - Medium" scheme="https://xtobu.github.io/tags/LC-Medium/"/>
    
  </entry>
  
  <entry>
    <title>ⓁⒸ ‧‧‧ 94. Binary Tree Inorder Traversal</title>
    <link href="https://xtobu.github.io/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-94-Binary-Tree-Inorder-Traversal/"/>
    <id>https://xtobu.github.io/2018/07/20/LC-‧‧‧-94-Binary-Tree-Inorder-Traversal/</id>
    <published>2018-07-20T12:29:23.000Z</published>
    <updated>2019-04-22T05:51:37.440Z</updated>
    
    <content type="html"><![CDATA[<h1 id="94-Binary-Tree-Inorder-Traversal-二元樹中序遍歷"><a href="#94-Binary-Tree-Inorder-Traversal-二元樹中序遍歷" class="headerlink" title="94. Binary Tree Inorder Traversal 二元樹中序遍歷"></a><a href="https://leetcode.com/problems/binary-tree-inorder-traversal/description/" target="_blank" rel="noopener">94. Binary Tree Inorder Traversal 二元樹中序遍歷</a></h1><blockquote><p>前中後序遍歷，參考：<a href="https://www.jianshu.com/p/456af5480cee" target="_blank" rel="noopener">https://www.jianshu.com/p/456af5480cee</a><br>使用堆疊的方式做二元樹遍歷</p></blockquote><h2 id="❀-Origin"><a href="#❀-Origin" class="headerlink" title="❀ Origin"></a>❀ Origin</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Given a binary tree, return the <em>inorder</em> traversal of its nodes’ values.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,null,2,3]</span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    /</span><br><span class="line">   3</span><br><span class="line"></span><br><span class="line">Output: [1,3,2]</span><br></pre></td></tr></table></figure><h3 id="Follow-up"><a href="#Follow-up" class="headerlink" title="Follow up"></a>Follow up</h3><p>Recursive solution is trivial, could you do it iteratively?</p><hr><h2 id="❀-翻譯"><a href="#❀-翻譯" class="headerlink" title="❀ 翻譯"></a>❀ 翻譯</h2><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>給定一個二元樹, 回傳其中序遍歷的節點的值.</p><h3 id="後續"><a href="#後續" class="headerlink" title="後續"></a>後續</h3><p>遞迴的解法並沒有什麼, 你能用迭代帶來處理嗎?</p><hr><h2 id="❀-Solution"><a href="#❀-Solution" class="headerlink" title="❀ Solution"></a>❀ Solution</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 二元樹迭代遍歷, 搭配 stack 堆疊</span></span><br><span class="line"><span class="comment">// 參考：https://www.jianshu.com/p/456af5480cee</span></span><br><span class="line"><span class="keyword">var</span> inorderTraversal = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> result = [];</span><br><span class="line"><span class="keyword">let</span> stack = [];</span><br><span class="line"><span class="comment">// 判斷root樹是否為 null, 或是 stack 的長度大於 0</span></span><br><span class="line"><span class="keyword">while</span> (root !== <span class="literal">null</span> || stack.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (root) &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果該樹 root 不是空值,</span></span><br><span class="line"><span class="comment"> * 便將 root 推入 stack ,</span></span><br><span class="line"><span class="comment"> * 將原本的 root 賦值 root.left,</span></span><br><span class="line"><span class="comment"> * 繼續 while</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">stack.push(root);</span><br><span class="line">root = root.left;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果進來這裡,</span></span><br><span class="line"><span class="comment"> * 代表 root 沒有值,但stack.length &gt; 0</span></span><br><span class="line"><span class="comment"> * 也就是說這裡是最左邊</span></span><br><span class="line"><span class="comment"> * 於是用 root = stack.pop();</span></span><br><span class="line"><span class="comment"> * 將 root 改成 stack 的最後一個元素, 並將 stack 的最後一個元素刪除</span></span><br><span class="line"><span class="comment"> * 之後將當下 root 值推到結果陣列 result , 即為中序遍歷的左子樹優先原則</span></span><br><span class="line"><span class="comment"> * 推完 result.push(root.val); 後</span></span><br><span class="line"><span class="comment"> * 再將 root = root.right;</span></span><br><span class="line"><span class="comment"> * 繼續 while</span></span><br><span class="line"><span class="comment"> * 繼續 從左子樹開始找</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">root = stack.pop();</span><br><span class="line">result.push(root.val);</span><br><span class="line">root = root.right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="JavaScript-II"><a href="#JavaScript-II" class="headerlink" title="JavaScript II"></a>JavaScript II</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 遞迴解法</span></span><br><span class="line"><span class="comment"> * 最後回傳 result</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 中序遍歷,</span></span><br><span class="line"><span class="comment"> * 因此以左子樹為優先</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> inorderTraversal = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> result = [];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inOrder</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (node) &#123;</span><br><span class="line">inOrder(node.left);</span><br><span class="line">result.push(node.val);</span><br><span class="line">inOrder(node.right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">inOrder(root);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      二元樹中序遍歷
    
    </summary>
    
      <category term="LeetCode" scheme="https://xtobu.github.io/categories/LeetCode/"/>
    
    
      <category term="JavaScript" scheme="https://xtobu.github.io/tags/JavaScript/"/>
    
      <category term="LeetCode" scheme="https://xtobu.github.io/tags/LeetCode/"/>
    
      <category term="⭐" scheme="https://xtobu.github.io/tags/%E2%AD%90/"/>
    
      <category term="☄️" scheme="https://xtobu.github.io/tags/%E2%98%84%EF%B8%8F/"/>
    
      <category term="Recursive" scheme="https://xtobu.github.io/tags/Recursive/"/>
    
      <category term="ⓁⒸ - Medium" scheme="https://xtobu.github.io/tags/LC-Medium/"/>
    
      <category term="Iteratively" scheme="https://xtobu.github.io/tags/Iteratively/"/>
    
      <category term="Stack" scheme="https://xtobu.github.io/tags/Stack/"/>
    
  </entry>
  
  <entry>
    <title>ⓁⒸ ‧‧‧ 448. Find All Numbers Disappeared in an Array</title>
    <link href="https://xtobu.github.io/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-448-Find-All-Numbers-Disappeared-in-an-Array/"/>
    <id>https://xtobu.github.io/2018/07/20/LC-‧‧‧-448-Find-All-Numbers-Disappeared-in-an-Array/</id>
    <published>2018-07-20T12:23:43.000Z</published>
    <updated>2019-04-22T05:51:37.437Z</updated>
    
    <content type="html"><![CDATA[<h1 id="448-Find-All-Numbers-Disappeared-in-an-Array-找出所有消失在陣列裡的數字"><a href="#448-Find-All-Numbers-Disappeared-in-an-Array-找出所有消失在陣列裡的數字" class="headerlink" title="448. Find All Numbers Disappeared in an Array 找出所有消失在陣列裡的數字"></a><a href="https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array/description/" target="_blank" rel="noopener">448. Find All Numbers Disappeared in an Array 找出所有消失在陣列裡的數字</a></h1><blockquote><p>算法二很有趣, 找缺少數的問題可以應用</p></blockquote><h2 id="❀-Origin"><a href="#❀-Origin" class="headerlink" title="❀ Origin"></a>❀ Origin</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Given an array of integers where 1 ≤ a[i] ≤ <em>n</em> (<em>n</em> = size of array),<br>some elements appear twice and others appear once.</p><p>Find all the elements of [1, <em>n</em>] inclusive that do not appear in this array.</p><p>Could you do it without extra space and in O(<em>n</em>) runtime?<br>You may assume the returned list does not count as extra space.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">[4,3,2,7,8,2,3,1]</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">[5,6]</span><br></pre></td></tr></table></figure><hr><h2 id="❀-翻譯"><a href="#❀-翻譯" class="headerlink" title="❀ 翻譯"></a>❀ 翻譯</h2><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>給定一個整數陣列, 其中值的範圍在 1 ≤ a[i] ≤ <em>n</em> (<em>n</em> 等於陣列長度),<br>有些元素出現兩次, 其他則出現一次.</p><p>找出所有包含在 [1, <em>n</em>] 裡但沒有出現在這個陣列裡的所有元素.</p><p>你可以做到沒有額外空間並且時間複雜度為 O(<em>n</em>) 嗎?<br>你可以認為那個回傳答案的陣列不算入額外空間.</p><hr><h2 id="❀-Solution"><a href="#❀-Solution" class="headerlink" title="❀ Solution"></a>❀ Solution</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 第一種寫法</span></span><br><span class="line"><span class="comment"> * nums.indexOf(i) 的能太差,</span></span><br><span class="line"><span class="comment"> * 在leetcode上只落在倒數的答案,</span></span><br><span class="line"><span class="comment"> * 母湯, 趕緊爬文</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> findDisappearedNumbers = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> res = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; nums.length + <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (nums.indexOf(i) === <span class="number">-1</span>) res.push(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="JavaScript-II"><a href="#JavaScript-II" class="headerlink" title="JavaScript II"></a>JavaScript II</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 第二種寫法</span></span><br><span class="line"><span class="comment"> * 參考 leetcode 此題第一名的寫法</span></span><br><span class="line"><span class="comment"> *  依題意, 有些數字會出現兩次, 有些一次, 要找出缺少的數字</span></span><br><span class="line"><span class="comment"> *  因此第一名的寫法使用正負關係搭配絕對值, 實在很強</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findDisappearedNumbers = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line"><span class="keyword">const</span> result = [];</span><br><span class="line"><span class="comment">// 因為nums裡的值會是 1 ≤ a[i] ≤ nums.length 的陣列</span></span><br><span class="line"><span class="comment">// 所以不一定要整理, 直接找出該數應該在整理後的陣列的位置</span></span><br><span class="line"><span class="comment">// index = Math.abs(nums[i]) - 1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line"><span class="comment">// nums[i] 取絕對值, 並 -1 ,</span></span><br><span class="line"><span class="comment">// 找出該數應該在整理後的陣列的位置</span></span><br><span class="line"><span class="keyword">const</span> index = <span class="built_in">Math</span>.abs(nums[i]) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log('index', index, 'nums[index]', nums[index]);</span></span><br><span class="line"><span class="comment">// console.log('');</span></span><br><span class="line"><span class="comment">// 使用正負搭配絕對值, 是因為迴圈跑到那數字時, 還要去找那數字的應該存在的位置,</span></span><br><span class="line"><span class="comment">// 用負數, 比較像是個畫記號的概念, 實在是太ㄎㄧㄠˋ了</span></span><br><span class="line"><span class="keyword">if</span> (nums[index] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">nums[index] = -nums[index];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// console.log('nums', nums);</span></span><br><span class="line"><span class="comment">// console.log('---');</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 當上面的程式執行完, 剩下的正數的位置便代表沒被轉換過的數, 即是缺少的數</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">// 因為題意是 1 ≤ a[i] ≤ nums.length ,</span></span><br><span class="line"><span class="comment">// 故找出位置後, 還要 +1 , 才是缺少的那個數字</span></span><br><span class="line">result.push(i + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(findDisappearedNumbers([<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">8</span>]));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      找出所有消失在陣列裡的數字
    
    </summary>
    
      <category term="LeetCode" scheme="https://xtobu.github.io/categories/LeetCode/"/>
    
    
      <category term="JavaScript" scheme="https://xtobu.github.io/tags/JavaScript/"/>
    
      <category term="LeetCode" scheme="https://xtobu.github.io/tags/LeetCode/"/>
    
      <category term="ⓁⒸ - Easy" scheme="https://xtobu.github.io/tags/LC-Easy/"/>
    
      <category term="⭐" scheme="https://xtobu.github.io/tags/%E2%AD%90/"/>
    
      <category term="☄️" scheme="https://xtobu.github.io/tags/%E2%98%84%EF%B8%8F/"/>
    
      <category term="Array.indexOf()" scheme="https://xtobu.github.io/tags/Array-indexOf/"/>
    
      <category term="Math.abs()" scheme="https://xtobu.github.io/tags/Math-abs/"/>
    
  </entry>
  
  <entry>
    <title>ⓁⒸ ‧‧‧ 283. Move Zeroes</title>
    <link href="https://xtobu.github.io/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-283-Move-Zeroes/"/>
    <id>https://xtobu.github.io/2018/07/20/LC-‧‧‧-283-Move-Zeroes/</id>
    <published>2018-07-20T12:20:30.000Z</published>
    <updated>2019-04-22T05:51:37.436Z</updated>
    
    <content type="html"><![CDATA[<h1 id="283-Move-Zeroes-移動零"><a href="#283-Move-Zeroes-移動零" class="headerlink" title="283. Move Zeroes 移動零"></a><a href="https://leetcode.com/problems/move-zeroes/description/" target="_blank" rel="noopener">283. Move Zeroes 移動零</a></h1><h2 id="❀-Origin"><a href="#❀-Origin" class="headerlink" title="❀ Origin"></a>❀ Origin</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Given an array <code>nums</code>,<br>write a function to move all <code>0</code>‘s to the end of it while maintaining the relative order of the non-zero elements.</p><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><ol><li>You must do this <strong>in-place</strong> without making a copy of the array.</li><li>Minimize the total number of operations.</li></ol><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [0,1,0,3,12]</span><br><span class="line">Output: [1,3,12,0,0]</span><br></pre></td></tr></table></figure><hr><h2 id="❀-翻譯"><a href="#❀-翻譯" class="headerlink" title="❀ 翻譯"></a>❀ 翻譯</h2><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>給定一個陣列 <code>nums</code> ,<br>寫一個函數去移動所有的 <code>0</code> 到最後面, 且過程中保持非零元素的相對順序.</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>你必須在不製作一個複製陣列的情況下, 就以此操作.</li><li>最小化所有的操作數.</li></ol><hr><h2 id="❀-Solution"><a href="#❀-Solution" class="headerlink" title="❀ Solution"></a>❀ Solution</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;void&#125; Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 移動所有的零到陣列最後面, 且不能新建多的陣列.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 思路為遍歷每個元素,</span></span><br><span class="line"><span class="comment"> * 如果遇到 0 , 就忽略</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 遇到不是 0 ,</span></span><br><span class="line"><span class="comment"> * 就將該元素 nums[i] 的值放到 nums[position],</span></span><br><span class="line"><span class="comment"> * 並將 position + 1</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 以次類推,</span></span><br><span class="line"><span class="comment"> * nums 全部遍歷完之後,</span></span><br><span class="line"><span class="comment"> * 全部非零元素就會依照原本順序, 排在陣列最前面了.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 之後再從該陣列位置的 position 為起始,</span></span><br><span class="line"><span class="comment"> * 將後面的值改成 0 , 即可.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 例如：</span></span><br><span class="line"><span class="comment"> * position = 0, i = 0,</span></span><br><span class="line"><span class="comment"> * [0, 1, 0, 3, 12],</span></span><br><span class="line"><span class="comment"> * nums[i] = 0, 忽略</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * position = 0, i = 1,</span></span><br><span class="line"><span class="comment"> * [0, 1, 0, 3, 12],</span></span><br><span class="line"><span class="comment"> * nums[i] = 1,</span></span><br><span class="line"><span class="comment"> * nums[position] = nums[i]</span></span><br><span class="line"><span class="comment"> * [1, 1, 0, 3, 12]</span></span><br><span class="line"><span class="comment"> * position + 1</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * position = 1, i = 2,</span></span><br><span class="line"><span class="comment"> * [1, 1, 0, 3, 12],</span></span><br><span class="line"><span class="comment"> * nums[i] = 0, 忽略</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * position = 1, i = 3,</span></span><br><span class="line"><span class="comment"> * [1, 1, 0, 3, 12],</span></span><br><span class="line"><span class="comment"> * nums[i] = 3,</span></span><br><span class="line"><span class="comment"> * nums[position] = nums[i]</span></span><br><span class="line"><span class="comment"> * [1, 3, 0, 3, 12]</span></span><br><span class="line"><span class="comment"> * position + 1</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * position = 2, i = 4,</span></span><br><span class="line"><span class="comment"> * [1, 3, 0, 3, 12],</span></span><br><span class="line"><span class="comment"> * nums[i] = 12,</span></span><br><span class="line"><span class="comment"> * nums[position] = nums[i]</span></span><br><span class="line"><span class="comment"> * [1, 3, 12, 3, 12]</span></span><br><span class="line"><span class="comment"> * position + 1</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 最後將陣列從 position 開始後的元素都置換成 0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> moveZeroes = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> position = <span class="number">0</span>,</span><br><span class="line">len = nums.length;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (nums[i] !== <span class="number">0</span>) &#123;</span><br><span class="line">nums[position] = nums[i];</span><br><span class="line">position++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = position; i &lt; len; i++) &#123;</span><br><span class="line">nums[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// return nums;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// console.log(moveZeroes([0, 1, 0, 3, 12]));</span></span><br></pre></td></tr></table></figure><h3 id="JavaScript-II"><a href="#JavaScript-II" class="headerlink" title="JavaScript II"></a>JavaScript II</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;void&#125; Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 第二種寫法,</span></span><br><span class="line"><span class="comment"> * 比較直覺,</span></span><br><span class="line"><span class="comment"> * 遇到零, 抓出來往後丟</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 從後面開始遍歷,</span></span><br><span class="line"><span class="comment"> * 如果 nums[i] === 0</span></span><br><span class="line"><span class="comment"> * 便將該位置移除 ( nums.splice(i, 1) ),</span></span><br><span class="line"><span class="comment"> * 最後面推一個 0 回去.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 注意：</span></span><br><span class="line"><span class="comment"> * 不能從頭開始找,</span></span><br><span class="line"><span class="comment"> * 因為從頭的話, splice 後會刪除一個元素, 之後 push 加到最後,</span></span><br><span class="line"><span class="comment"> * 這樣又照著遍歷跑時, 有一個元素會被忽略</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 譬如</span></span><br><span class="line"><span class="comment"> * i = 0 [0, 0, 1] -&gt; [0, 1, 0]</span></span><br><span class="line"><span class="comment"> * i = 1 [0, 1, 0] -&gt; [0, 1, 0]</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 連續的第二個也是零的話就會被忽略了</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> moveZeroes = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = nums.length; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">if</span> (nums[i] === <span class="number">0</span>) &#123;</span><br><span class="line">nums.splice(i, <span class="number">1</span>);</span><br><span class="line">nums.push(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// return nums;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// console.log(moveZeroes([0, 0, 1]));</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      移動零
    
    </summary>
    
      <category term="LeetCode" scheme="https://xtobu.github.io/categories/LeetCode/"/>
    
    
      <category term="JavaScript" scheme="https://xtobu.github.io/tags/JavaScript/"/>
    
      <category term="LeetCode" scheme="https://xtobu.github.io/tags/LeetCode/"/>
    
      <category term="ⓁⒸ - Easy" scheme="https://xtobu.github.io/tags/LC-Easy/"/>
    
      <category term="☄️" scheme="https://xtobu.github.io/tags/%E2%98%84%EF%B8%8F/"/>
    
      <category term="Array.splice()" scheme="https://xtobu.github.io/tags/Array-splice/"/>
    
  </entry>
  
  <entry>
    <title>ⓁⒸ ‧‧‧ 226. Invert Binary Tree</title>
    <link href="https://xtobu.github.io/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-226-Invert-Binary-Tree/"/>
    <id>https://xtobu.github.io/2018/07/20/LC-‧‧‧-226-Invert-Binary-Tree/</id>
    <published>2018-07-20T12:16:40.000Z</published>
    <updated>2019-04-22T05:51:37.436Z</updated>
    
    <content type="html"><![CDATA[<h1 id="226-Invert-Binary-Tree-反轉二元樹"><a href="#226-Invert-Binary-Tree-反轉二元樹" class="headerlink" title="226. Invert Binary Tree 反轉二元樹"></a><a href="https://leetcode.com/problems/invert-binary-tree/description/" target="_blank" rel="noopener">226. Invert Binary Tree 反轉二元樹</a></h1><h2 id="❀-Origin"><a href="#❀-Origin" class="headerlink" title="❀ Origin"></a>❀ Origin</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Invert a binary tree.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line"></span><br><span class="line">     4</span><br><span class="line">   /   \</span><br><span class="line">  2     7</span><br><span class="line"> / \   / \</span><br><span class="line">1   3 6   9</span><br><span class="line">Output:</span><br><span class="line"></span><br><span class="line">     4</span><br><span class="line">   /   \</span><br><span class="line">  7     2</span><br><span class="line"> / \   / \</span><br><span class="line">9   6 3   1</span><br></pre></td></tr></table></figure><h3 id="Trivia"><a href="#Trivia" class="headerlink" title="Trivia"></a>Trivia</h3><p>This problem was inspired by this original tweet by Max Howell:</p><blockquote><p>Google:<br>90% of our engineers use the software you wrote (Homebrew),<br>but you can’t invert a binary tree on a whiteboard so f*** off.</p></blockquote><hr><h2 id="❀-翻譯"><a href="#❀-翻譯" class="headerlink" title="❀ 翻譯"></a>❀ 翻譯</h2><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>反轉一個二元樹.</p><h3 id="細故"><a href="#細故" class="headerlink" title="細故"></a>細故</h3><p>此問題的發想源自這個 Max Howell 的 tweet :</p><blockquote><p>Google:<br>我們 90% 的工程師都使用你寫的軟體 (Homebrew),<br>但你卻沒有辦法在白板上反轉二元樹, 所以 f*** off.</p></blockquote><hr><h2 id="❀-Solution"><a href="#❀-Solution" class="headerlink" title="❀ Solution"></a>❀ Solution</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;TreeNode&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// Original Tree</span></span><br><span class="line"><span class="comment">//      4</span></span><br><span class="line"><span class="comment">//    /   \</span></span><br><span class="line"><span class="comment">//   2     7</span></span><br><span class="line"><span class="comment">//  / \   / \</span></span><br><span class="line"><span class="comment">// 1   3 6   9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 反轉二元樹</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 和以前遍歷二元樹的方式一樣, 用遞迴.</span></span><br><span class="line"><span class="comment"> * 反轉的意思是 左 -&gt; 右 , 右 -&gt; 左 .</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 解題思路是判斷當前 root 是否為 null,</span></span><br><span class="line"><span class="comment"> * 如果是, 就回傳 null.</span></span><br><span class="line"><span class="comment"> * 如果不是, 變開始反轉.</span></span><br><span class="line"><span class="comment"> * 建立一個 child 的子節點,</span></span><br><span class="line"><span class="comment"> * 再將 child 的左右子樹做 invertTree 的遞迴後互換,</span></span><br><span class="line"><span class="comment"> * 最後回傳 child .</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * ( 也可以只建立一個 tempLeft ,</span></span><br><span class="line"><span class="comment"> *   之後再將他做 invertTree 遞迴後放入 child.right ,</span></span><br><span class="line"><span class="comment"> *   但我喜歡這樣, 對我閱讀上更直覺一些 )</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> invertTree = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root !== <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> child = <span class="keyword">new</span> TreeNode(root.val);</span><br><span class="line">child.left = invertTree(root.right);</span><br><span class="line">child.right = invertTree(root.left);</span><br><span class="line"><span class="keyword">return</span> child;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(invertTree(tree));</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      反轉二元樹
    
    </summary>
    
      <category term="LeetCode" scheme="https://xtobu.github.io/categories/LeetCode/"/>
    
    
      <category term="JavaScript" scheme="https://xtobu.github.io/tags/JavaScript/"/>
    
      <category term="LeetCode" scheme="https://xtobu.github.io/tags/LeetCode/"/>
    
      <category term="ⓁⒸ - Easy" scheme="https://xtobu.github.io/tags/LC-Easy/"/>
    
      <category term="Binary Tree" scheme="https://xtobu.github.io/tags/Binary-Tree/"/>
    
      <category term="☄️" scheme="https://xtobu.github.io/tags/%E2%98%84%EF%B8%8F/"/>
    
  </entry>
  
  <entry>
    <title>ⓁⒸ ‧‧‧ 647. Palindromic Substrings</title>
    <link href="https://xtobu.github.io/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-647-Palindromic-Substrings/"/>
    <id>https://xtobu.github.io/2018/07/20/LC-‧‧‧-647-Palindromic-Substrings/</id>
    <published>2018-07-20T12:09:42.000Z</published>
    <updated>2019-04-22T05:51:37.438Z</updated>
    
    <content type="html"><![CDATA[<h1 id="647-Palindromic-Substrings-回文子串"><a href="#647-Palindromic-Substrings-回文子串" class="headerlink" title="647. Palindromic Substrings 回文子串"></a><a href="https://leetcode.com/problems/palindromic-substrings/description/" target="_blank" rel="noopener">647. Palindromic Substrings 回文子串</a></h1><h2 id="❀-Origin"><a href="#❀-Origin" class="headerlink" title="❀ Origin"></a>❀ Origin</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Given a string, your task is to count how many palindromic substrings in this string.<br>The substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.</p><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><ol><li>The input string length won’t exceed 1000.</li></ol><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;abc&quot;</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: Three palindromic strings: &quot;a&quot;, &quot;b&quot;, &quot;c&quot;.</span><br></pre></td></tr></table></figure><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;aaa&quot;</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: Six palindromic strings: &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;aa&quot;, &quot;aa&quot;, &quot;aaa&quot;.</span><br></pre></td></tr></table></figure><hr><h2 id="❀-翻譯"><a href="#❀-翻譯" class="headerlink" title="❀ 翻譯"></a>❀ 翻譯</h2><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>給定一個字串, 你的任務是算出這個字串裡有幾個回文子串.<br>具有不同起始位置和結束位置的子字串符會被計算成不同的子字串, 即使他們包含著相同的字元.</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>輸入字串的長度不會超過 1000.</li></ol><hr><h2 id="❀-Solution"><a href="#❀-Solution" class="headerlink" title="❀ Solution"></a>❀ Solution</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> countSubstrings = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> len = s.length;</span><br><span class="line"><span class="keyword">let</span> result_count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用 substr(start, length)</span></span><br><span class="line"><span class="comment"> * 把所有可能的字串找出來,</span></span><br><span class="line"><span class="comment"> * 再用 isPalindrome 判斷是不是回文子串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> length = <span class="number">1</span>; length &lt;= s.length; length++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> start = <span class="number">0</span>; start &lt;= s.length - length; start++) &#123;</span><br><span class="line"><span class="keyword">let</span> newStr = s.substr(start, length);</span><br><span class="line"><span class="keyword">if</span> (isPalindrome(newStr)) result_count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result_count;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判斷字串是不是回文子串</span></span><br><span class="line"><span class="comment"> * 用鏡面位置去判斷是不是對稱,</span></span><br><span class="line"><span class="comment"> * 跑完都一樣就回傳 true</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isPalindrome = <span class="function">(<span class="params">str</span>)=&gt;</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= str.length - i - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (str[i] !== str[str.length - i - <span class="number">1</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// if(str !==str.split('').reverse().join(''))&#123;</span></span><br><span class="line">    <span class="comment">//     return false;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// return true;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(countSubstrings(<span class="string">'abcba'</span>));</span><br></pre></td></tr></table></figure><h3 id="JavaScript-II"><a href="#JavaScript-II" class="headerlink" title="JavaScript II"></a>JavaScript II</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Manacher's Algorithm</span></span><br><span class="line"><span class="comment"> * 還沒搞懂 好難</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> countSubstrings = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    s = preprocess(s);</span><br><span class="line">    <span class="built_in">console</span>.log(s);</span><br><span class="line"><span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line"><span class="keyword">let</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (j &lt; s.length - i &amp;&amp; i &gt;= j &amp;&amp; s[i + j] === s[i - j]) &#123;</span><br><span class="line"><span class="comment">//console.log(j);</span></span><br><span class="line">j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'j/2: '</span>, <span class="built_in">Math</span>.trunc(j / <span class="number">2</span>));</span><br><span class="line">        result += <span class="built_in">Math</span>.trunc(j / <span class="number">2</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> preprocess = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'#'</span> + s.split(<span class="string">''</span>).join(<span class="string">'#'</span>) + <span class="string">'#'</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(countSubstrings(<span class="string">'12212321'</span>));</span><br></pre></td></tr></table></figure><h3 id="JavaScript-III"><a href="#JavaScript-III" class="headerlink" title="JavaScript III"></a>JavaScript III</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * LeetCode官方解答上最快的寫法, 感覺懂又不懂.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 先以 i 為圓心算完後, 再以 i 和 i+1 的中心為圓心,</span></span><br><span class="line"><span class="comment"> * 這邊不太懂.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 先以 i 為圓心, 往外擴展去判斷</span></span><br><span class="line"><span class="comment"> * 再以 i 和 i+1 的中心為圓心, 往外擴展去判斷</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 應該是基數長度與偶數長度的關係 目前未全部搞懂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> countSubstrings = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'i'</span>, i);</span><br><span class="line">cnt += countPalindrome(s, i, i) + countPalindrome(s, i, i + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用start, end當圓心去擴展, 判斷 str[start] === str[end] 是否一樣, 回傳回文子串的數量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countPalindrome</span>(<span class="params">str, start, end</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 起始位置 start 不能比 0 小</span></span><br><span class="line"><span class="comment"> * 結束位置 end 不能大於字串 str 的長度</span></span><br><span class="line"><span class="comment"> *  str[start] === str[end]</span></span><br><span class="line"><span class="comment"> * 上面三點才滿足回文字串的條件</span></span><br><span class="line"><span class="comment"> * 因為判斷東西多, 用 while 會比較好寫</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">while</span> (start &gt;= <span class="number">0</span> &amp;&amp; end &lt; str.length &amp;&amp; str[start] === str[end]) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'start, end'</span>, start, end);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 往左一個位置</span></span><br><span class="line">start--;</span><br><span class="line"><span class="comment">// 往右一個位置</span></span><br><span class="line">end++;</span><br><span class="line"><span class="comment">// 回文字串數量加一</span></span><br><span class="line">count++;</span><br><span class="line"></span><br><span class="line"><span class="comment">//繼續尋找回文子串</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(countSubstrings(<span class="string">'abcdcba'</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      回文子串
    
    </summary>
    
      <category term="LeetCode" scheme="https://xtobu.github.io/categories/LeetCode/"/>
    
    
      <category term="JavaScript" scheme="https://xtobu.github.io/tags/JavaScript/"/>
    
      <category term="LeetCode" scheme="https://xtobu.github.io/tags/LeetCode/"/>
    
      <category term="⭐" scheme="https://xtobu.github.io/tags/%E2%AD%90/"/>
    
      <category term="Recursive" scheme="https://xtobu.github.io/tags/Recursive/"/>
    
      <category term="ⓁⒸ - Medium" scheme="https://xtobu.github.io/tags/LC-Medium/"/>
    
      <category term="⭐⭐" scheme="https://xtobu.github.io/tags/%E2%AD%90%E2%AD%90/"/>
    
      <category term="String.substr()" scheme="https://xtobu.github.io/tags/String-substr/"/>
    
      <category term="Manacher" scheme="https://xtobu.github.io/tags/Manacher/"/>
    
      <category term="Math.trunc()" scheme="https://xtobu.github.io/tags/Math-trunc/"/>
    
  </entry>
  
  <entry>
    <title>ⓁⒸ ‧‧‧ 104. Maximum Depth of Binary Tree</title>
    <link href="https://xtobu.github.io/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-104-Maximum-Depth-of-Binary-Tree/"/>
    <id>https://xtobu.github.io/2018/07/20/LC-‧‧‧-104-Maximum-Depth-of-Binary-Tree/</id>
    <published>2018-07-20T12:04:22.000Z</published>
    <updated>2019-04-22T05:51:37.435Z</updated>
    
    <content type="html"><![CDATA[<h1 id="104-Maximum-Depth-of-Binary-Tree-二元樹最大深度"><a href="#104-Maximum-Depth-of-Binary-Tree-二元樹最大深度" class="headerlink" title="104. Maximum Depth of Binary Tree 二元樹最大深度"></a><a href="https://leetcode.com/problems/maximum-depth-of-binary-tree/description/" target="_blank" rel="noopener">104. Maximum Depth of Binary Tree 二元樹最大深度</a></h1><h2 id="❀-Origin"><a href="#❀-Origin" class="headerlink" title="❀ Origin"></a>❀ Origin</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Given a binary tree, find its maximum depth.<br>The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><ul><li>A leaf is a node with no children.</li></ul><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Given binary tree [3,9,20,null,null,15,7]</span><br><span class="line"></span><br><span class="line">    3</span><br><span class="line">   / \</span><br><span class="line">  9  20</span><br><span class="line">    /  \</span><br><span class="line">   15   7</span><br><span class="line"></span><br><span class="line">return its depth = 3.</span><br></pre></td></tr></table></figure><hr><h2 id="❀-翻譯"><a href="#❀-翻譯" class="headerlink" title="❀ 翻譯"></a>❀ 翻譯</h2><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>給定一個二元樹, 找出它的最大深度.<br>最大深度是從根節點沿著最長的路徑往下到最遠的葉節點.</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>葉子是沒有孩子的節點.</li></ul><hr><h2 id="❀-Solution"><a href="#❀-Solution" class="headerlink" title="❀ Solution"></a>❀ Solution</h2><h3 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a>Idea</h3><p>因為之前解過 #654、#814、#617，<br>所以直覺用遞迴來解，<br>但一開始忘記從深度 1 開始,<br>後來有把結果 + 1 .</p><ol><li>用遞迴</li><li>找出最左和最右深度</li></ol><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TreeNode</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.val = val;</span><br><span class="line"><span class="keyword">this</span>.left = <span class="keyword">this</span>.right = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用遞迴, 去算出左和右的最深身度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxDepth = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 如果沒有, 就回傳 0</span></span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 每次深度加一</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span> + <span class="built_in">Math</span>.max(maxDepth(root.left), maxDepth(root.right));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Execution"><a href="#Execution" class="headerlink" title="Execution"></a>Execution</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">[3,9,20,null,null,15,7]</span><br><span class="line">/////////////////////////////</span><br><span class="line">1.</span><br><span class="line">root.val = 3</span><br><span class="line">root.left = 9</span><br><span class="line">root.right = 10</span><br><span class="line">/////////////////////////////</span><br><span class="line">2. root -&gt; left -&gt; left</span><br><span class="line">val = null</span><br><span class="line">return 0</span><br><span class="line"></span><br><span class="line">↓↓↓↓</span><br><span class="line"></span><br><span class="line">2. root -&gt; left -&gt; right</span><br><span class="line">val = null</span><br><span class="line">return 0</span><br><span class="line"></span><br><span class="line">↓↓↓↓</span><br><span class="line"></span><br><span class="line">2. root -&gt; left</span><br><span class="line">return 1 + Math.max(maxDepth(root.left), maxDepth(root.right));</span><br><span class="line">return 1 + 0 = 1</span><br><span class="line"></span><br><span class="line">↓↓↓↓</span><br><span class="line"></span><br><span class="line">2. root</span><br><span class="line">return 1 + Math.max( 1, maxDepth(root.right));</span><br><span class="line"></span><br><span class="line">/////////////////////////////</span><br><span class="line"></span><br><span class="line">2.root -&gt; right -&gt; left</span><br><span class="line">val = 15</span><br><span class="line">left = null</span><br><span class="line">right = null</span><br><span class="line">return 1 + Math.max(maxDepth(null), maxDepth(null));</span><br><span class="line">return 1 + 0 = 1</span><br><span class="line"></span><br><span class="line">↓↓↓↓</span><br><span class="line"></span><br><span class="line">2. root -&gt; right -&gt; right</span><br><span class="line">val = 7</span><br><span class="line">left = null</span><br><span class="line">right = null</span><br><span class="line">return 1 + Math.max(maxDepth(null), maxDepth(null));</span><br><span class="line">return 1 + 0 = 1</span><br><span class="line"></span><br><span class="line">↓↓↓↓</span><br><span class="line"></span><br><span class="line">2. root -&gt; right</span><br><span class="line">return 1 + Math.max(maxDepth(root.left), maxDepth(root.right));</span><br><span class="line">return 1 + 1 = 2</span><br><span class="line"></span><br><span class="line">/////////////////////////////</span><br><span class="line"></span><br><span class="line">3. root</span><br><span class="line">return 1 + Math.max( 1, 2));</span><br><span class="line">return 1 + 2 = 3</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      二元樹最大深度
    
    </summary>
    
      <category term="LeetCode" scheme="https://xtobu.github.io/categories/LeetCode/"/>
    
    
      <category term="JavaScript" scheme="https://xtobu.github.io/tags/JavaScript/"/>
    
      <category term="LeetCode" scheme="https://xtobu.github.io/tags/LeetCode/"/>
    
      <category term="ⓁⒸ - Easy" scheme="https://xtobu.github.io/tags/LC-Easy/"/>
    
      <category term="⭐" scheme="https://xtobu.github.io/tags/%E2%AD%90/"/>
    
      <category term="Binary Tree" scheme="https://xtobu.github.io/tags/Binary-Tree/"/>
    
      <category term="Math.max()" scheme="https://xtobu.github.io/tags/Math-max/"/>
    
  </entry>
  
  <entry>
    <title>ⓁⒸ ‧‧‧ 136. Single Number</title>
    <link href="https://xtobu.github.io/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-136-Single-Number/"/>
    <id>https://xtobu.github.io/2018/07/20/LC-‧‧‧-136-Single-Number/</id>
    <published>2018-07-20T11:59:58.000Z</published>
    <updated>2019-04-22T05:51:37.435Z</updated>
    
    <content type="html"><![CDATA[<h1 id="136-Single-Number-找出單身狗"><a href="#136-Single-Number-找出單身狗" class="headerlink" title="136. Single Number 找出單身狗"></a><a href="https://leetcode.com/problems/single-number/description/" target="_blank" rel="noopener">136. Single Number 找出單身狗</a></h1><h2 id="❀-Origin"><a href="#❀-Origin" class="headerlink" title="❀ Origin"></a>❀ Origin</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Given a <code>non-empty</code> array of integers, every element appears twice except for one.<br>Find that single one.</p><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><ul><li>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</li></ul><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [2,2,1]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [4,1,2,1,2]</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure><hr><h2 id="❀-翻譯"><a href="#❀-翻譯" class="headerlink" title="❀ 翻譯"></a>❀ 翻譯</h2><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>給定一個非空整數字串, 除了一個元素外, 每個元素會出現兩次.<br>請找出那個單身狗.</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>你的算法應該要有線性的時間複雜度. 你可以完成它, 且不使用額外的記憶體嗎?</li></ul><hr><h2 id="❀-Solution"><a href="#❀-Solution" class="headerlink" title="❀ Solution"></a>❀ Solution</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 最初的想法,</span></span><br><span class="line"><span class="comment"> * 但題目希望時間複雜度是線性的解答</span></span><br><span class="line"><span class="comment"> * 第一個解法每次都執行了兩次 find index 複雜度</span></span><br><span class="line"><span class="comment"> * O(n^2) 不符合題目要求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// var singleNumber = function(nums) &#123;</span></span><br><span class="line"><span class="comment">// for (let i = 0; i &lt; nums.length; i++) &#123;</span></span><br><span class="line"><span class="comment">// if (nums.indexOf(nums[i]) == nums.lastIndexOf(nums[i])) return nums[i];</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 網路上大神的解法,</span></span><br><span class="line"><span class="comment"> * 為了讓時間複雜度能更等於 O(n),</span></span><br><span class="line"><span class="comment"> * 那一定只能執行一次, 裡面還不能有任何尋找的動作</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 所以大神使用了 XOR ^ ,</span></span><br><span class="line"><span class="comment"> * 因為 XOR 的特性, 相同為0 不同為1.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * XOR</span></span><br><span class="line"><span class="comment"> * 9 | 1 0 0 1</span></span><br><span class="line"><span class="comment"> * 2 | 0 0 1 0</span></span><br><span class="line"><span class="comment"> * ============</span></span><br><span class="line"><span class="comment"> * 11| 1 0 1 1</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2 | 0 0 1 0</span></span><br><span class="line"><span class="comment"> * 2 | 0 0 1 0</span></span><br><span class="line"><span class="comment"> * ============</span></span><br><span class="line"><span class="comment"> * 0 | 0 0 0 0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 還有遵守 交換率</span></span><br><span class="line"><span class="comment"> * 所以 A ^ B ^ C  = (A ^ B) ^ C = A ^ (B ^ C)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 依題目,</span></span><br><span class="line"><span class="comment"> * 陣列會是一對對的數字, 要找出單身狗</span></span><br><span class="line"><span class="comment"> * 那因為 XOR 的關係,</span></span><br><span class="line"><span class="comment"> * 自己跟自己 XOR, 那一定等於零,</span></span><br><span class="line"><span class="comment"> * 而任何數跟零做XOR, 會等於自己.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 所以一對一對的數字 XOR後會等於0,</span></span><br><span class="line"><span class="comment"> * 剩下的會是0跟單身狗 , 答案就是單身狗</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> singleNumber = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line"><span class="comment">// var res = 0;</span></span><br><span class="line"><span class="comment">// for(let i =0 ;i&lt;nums.length;i++)&#123;</span></span><br><span class="line"><span class="comment">// res = res ^ nums[i];</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// return res;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> nums.reduce(<span class="function">(<span class="params">accu, item, index</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> accu ^ item;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(singleNumber([<span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>]));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      找出單身狗
    
    </summary>
    
      <category term="LeetCode" scheme="https://xtobu.github.io/categories/LeetCode/"/>
    
    
      <category term="JavaScript" scheme="https://xtobu.github.io/tags/JavaScript/"/>
    
      <category term="LeetCode" scheme="https://xtobu.github.io/tags/LeetCode/"/>
    
      <category term="Array.reduce()" scheme="https://xtobu.github.io/tags/Array-reduce/"/>
    
      <category term="XOR" scheme="https://xtobu.github.io/tags/XOR/"/>
    
      <category term="ⓁⒸ - Easy" scheme="https://xtobu.github.io/tags/LC-Easy/"/>
    
      <category term="⭐" scheme="https://xtobu.github.io/tags/%E2%AD%90/"/>
    
  </entry>
  
  <entry>
    <title>ⓁⒸ ‧‧‧ 406. Queue Reconstruction by Height</title>
    <link href="https://xtobu.github.io/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-406-Queue-Reconstruction-by-Height/"/>
    <id>https://xtobu.github.io/2018/07/20/LC-‧‧‧-406-Queue-Reconstruction-by-Height/</id>
    <published>2018-07-20T11:54:43.000Z</published>
    <updated>2019-04-22T05:51:37.437Z</updated>
    
    <content type="html"><![CDATA[<h1 id="406-Queue-Reconstruction-by-Height-依高度重建隊列"><a href="#406-Queue-Reconstruction-by-Height-依高度重建隊列" class="headerlink" title="406. Queue Reconstruction by Height 依高度重建隊列"></a><a href="https://leetcode.com/problems/queue-reconstruction-by-height/description/" target="_blank" rel="noopener">406. Queue Reconstruction by Height 依高度重建隊列</a></h1><h2 id="❀-Origin"><a href="#❀-Origin" class="headerlink" title="❀ Origin"></a>❀ Origin</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Suppose you have a random list of people standing in a queue.<br>Each person is described by a pair of integers <code>(h, k)</code>,<br>where <code>h</code> is the height of the person and <code>k</code> is the number of people in front of this person who have a height greater than or equal to <code>h</code>. Write an algorithm to reconstruct the queue.</p><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><ul><li>The number of people is less than <code>1,100</code>.</li></ul><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">[[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">[[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]</span><br></pre></td></tr></table></figure><hr><h2 id="❀-翻譯"><a href="#❀-翻譯" class="headerlink" title="❀ 翻譯"></a>❀ 翻譯</h2><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>假設有一個隨機的人們排隊的列表.<br>每個人都用一對整數 <code>(h, k)</code> 來描述,<br><code>h</code> 代表著那人的身高, 而 <code>k</code> 則是身高高於或等於 <code>h</code> 的人在他前面的數量.<br>寫出一個算法來重建這個隊列.</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>人數小於 <code>1,100</code></li></ul><hr><h2 id="❀-Solution"><a href="#❀-Solution" class="headerlink" title="❀ Solution"></a>❀ Solution</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[][]&#125; people</span></span><br><span class="line"><span class="comment"> * @return &#123;number[][]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 想出這解法的大神真的很膜拜,</span></span><br><span class="line"><span class="comment"> * 一直再想該怎麼去判斷每個數的之前與之後,</span></span><br><span class="line"><span class="comment"> * 但如果確定題目給的陣列, 一定能排出正確排序,</span></span><br><span class="line"><span class="comment"> * 那解法會清澈很多.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 大神的解法是先整理出依 h 的降幕排序,</span></span><br><span class="line"><span class="comment"> * 若 h 相等, 則比較 k 的大小, 小的排前面</span></span><br><span class="line"><span class="comment"> * 因此可整理出,</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  [[7, 0], [4, 4], [7, 1], [5, 0], [6, 1], [5, 2]]</span></span><br><span class="line"><span class="comment"> * ==================================================</span></span><br><span class="line"><span class="comment"> *  [[7, 0], [7, 1], [6, 1], [5, 0], [5, 2], [4, 4]]</span></span><br><span class="line"><span class="comment"> * 的陣列.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 之後遍歷每個資料,</span></span><br><span class="line"><span class="comment"> * 搭配 array.splice(start, deleteCount, item, item,...)</span></span><br><span class="line"><span class="comment"> * // 開始位置, 刪除數量, 加入的item</span></span><br><span class="line"><span class="comment"> * // months = ['Jan', 'March', 'April', 'June'];</span></span><br><span class="line"><span class="comment"> * // months.splice(1, 1, 'Feb');</span></span><br><span class="line"><span class="comment"> * // ["Jan", "Feb", "April", "June"]</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 重點,</span></span><br><span class="line"><span class="comment"> * 因為陣列已經整理好身高由大到小, 且 k 值保證正確</span></span><br><span class="line"><span class="comment"> * 意思是說, 遍歷的每個值, 只要去判斷 k 知道前面有 k 個更高或一樣高的人,</span></span><br><span class="line"><span class="comment"> * 那在新建的那個陣列, 只要將當前值直接填入到位置 k 就好,</span></span><br><span class="line"><span class="comment"> * 因為是從大開始遍歷到小,</span></span><br><span class="line"><span class="comment"> * 也不用去想該值之外的人會如何,</span></span><br><span class="line"><span class="comment"> * 依題目 k 絕對合理, 那照著 k 給的位置排下去, 就一定正確.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 超強的 完全沒想過  豁然開朗.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * EXP:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [ [ 7, 0 ], [ 7, 1 ], [ 6, 1 ], [ 5, 0 ], [ 5, 2 ], [ 4, 4 ] ].reduce() 結果如下</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * start:  0   item:  [ 7, 0 ]   result:  []</span></span><br><span class="line"><span class="comment"> * start:  1   item:  [ 7, 1 ]   result:  [ [ 7, 0 ] ]</span></span><br><span class="line"><span class="comment"> * start:  1   item:  [ 6, 1 ]   result:  [ [ 7, 0 ], [ 7, 1 ] ]</span></span><br><span class="line"><span class="comment"> * start:  0   item:  [ 5, 0 ]   result:  [ [ 7, 0 ], [ 6, 1 ], [ 7, 1 ] ]</span></span><br><span class="line"><span class="comment"> * start:  2   item:  [ 5, 2 ]   result:  [ [ 5, 0 ], [ 7, 0 ], [ 6, 1 ], [ 7, 1 ] ]</span></span><br><span class="line"><span class="comment"> * start:  4   item:  [ 4, 4 ]   result:  [ [ 5, 0 ], [ 7, 0 ], [ 5, 2 ], [ 6, 1 ], [ 7, 1 ] ]</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reconstructQueue = <span class="function"><span class="keyword">function</span>(<span class="params">people</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> result = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 整理出依 h 的降幕排序, 若相等(b[0] - a[0] = 0), 則比對 k 的值小的前面, 作升幕,</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// people.sort(function(a, b) &#123;</span></span><br><span class="line"><span class="comment">// return b[0] - a[0] || a[1] - b[1];</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line">people.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b[<span class="number">0</span>] - a[<span class="number">0</span>] || a[<span class="number">1</span>] - b[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> people.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">accumulator, currentValue, currentIndex</span>) </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 對 accumulator 擺入 currentValue</span></span><br><span class="line"><span class="comment"> * 位置則是其 k 值</span></span><br><span class="line"><span class="comment"> * 解釋如上</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">accumulator.splice(currentValue[<span class="number">1</span>], <span class="number">0</span>, currentValue);</span><br><span class="line"><span class="comment">// console.log(</span></span><br><span class="line"><span class="comment">// 'start: ',</span></span><br><span class="line"><span class="comment">// currentValue[1],</span></span><br><span class="line"><span class="comment">// '  item: ',</span></span><br><span class="line"><span class="comment">// currentValue,</span></span><br><span class="line"><span class="comment">// '  result: ',</span></span><br><span class="line"><span class="comment">// accumulator</span></span><br><span class="line"><span class="comment">// );</span></span><br><span class="line"><span class="keyword">return</span> accumulator;</span><br><span class="line">&#125;, []);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = [[<span class="number">7</span>, <span class="number">0</span>], [<span class="number">4</span>, <span class="number">4</span>], [<span class="number">7</span>, <span class="number">1</span>], [<span class="number">5</span>, <span class="number">0</span>], [<span class="number">6</span>, <span class="number">1</span>], [<span class="number">5</span>, <span class="number">2</span>]];</span><br><span class="line"><span class="built_in">console</span>.log(reconstructQueue(data));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      依高度重建隊列
    
    </summary>
    
      <category term="LeetCode" scheme="https://xtobu.github.io/categories/LeetCode/"/>
    
    
      <category term="JavaScript" scheme="https://xtobu.github.io/tags/JavaScript/"/>
    
      <category term="LeetCode" scheme="https://xtobu.github.io/tags/LeetCode/"/>
    
      <category term="Array.reduce()" scheme="https://xtobu.github.io/tags/Array-reduce/"/>
    
      <category term="⭐" scheme="https://xtobu.github.io/tags/%E2%AD%90/"/>
    
      <category term="ⓁⒸ - Medium" scheme="https://xtobu.github.io/tags/LC-Medium/"/>
    
      <category term="Array.splice()" scheme="https://xtobu.github.io/tags/Array-splice/"/>
    
      <category term="Array.sort()" scheme="https://xtobu.github.io/tags/Array-sort/"/>
    
  </entry>
  
  <entry>
    <title>ⓁⒸ ‧‧‧ 541. Reverse String II</title>
    <link href="https://xtobu.github.io/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-541-Reverse-String-II/"/>
    <id>https://xtobu.github.io/2018/07/20/LC-‧‧‧-541-Reverse-String-II/</id>
    <published>2018-07-20T11:50:20.000Z</published>
    <updated>2019-04-22T05:51:37.437Z</updated>
    
    <content type="html"><![CDATA[<h1 id="541-Reverse-String-II-反轉字串-II"><a href="#541-Reverse-String-II-反轉字串-II" class="headerlink" title="541. Reverse String II 反轉字串 II]"></a><a href="https://leetcode.com/problems/reverse-string-ii/description/" target="_blank" rel="noopener">541. Reverse String II 反轉字串 II</a>]</h1><h2 id="❀-Origin"><a href="#❀-Origin" class="headerlink" title="❀ Origin"></a>❀ Origin</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Given a string <code>s</code> and an integer <code>k</code>,<br>you need to reverse the first k characters for every 2k characters counting from the start of the string.<br>If there are less than k characters left, reverse all of them.<br>If there are less than 2k but greater than or equal to k characters,<br>then reverse the first k characters and left the other as original.</p><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><ol><li>The string consists of lower English letters only.</li><li>Length of the given string and k will in the range [1, 10000]</li></ol><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;abcdefg&quot;, k = 2</span><br><span class="line">Output: &quot;bacdfeg&quot;</span><br></pre></td></tr></table></figure><hr><h2 id="❀-翻譯"><a href="#❀-翻譯" class="headerlink" title="❀ 翻譯"></a>❀ 翻譯</h2><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>給定一個字串 <code>s</code> 和一個整數 <code>k</code>,<br>你必須從字串的一開始與每 2k 的位置開始倒轉前 k 個字元.<br>如果字串小於 k 個字元, 倒轉全部.<br>如果字串小於 2k 個字元但是大於 k 個字元, 則倒轉最前面的 k 個字元, 並將其他的照原樣保存.</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>在字串裡只會包含小寫英文字母.</li><li>給定的字符和整數 k 的範圍在 <code>[1, 10000]</code></li></ul><hr><h2 id="❀-Solution"><a href="#❀-Solution" class="headerlink" title="❀ Solution"></a>❀ Solution</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; k</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverseStr = <span class="function"><span class="keyword">function</span>(<span class="params">s, k</span>) </span>&#123;</span><br><span class="line"><span class="comment">//先組成 k 個字串為一組的陣列</span></span><br><span class="line"><span class="keyword">let</span> arrResult = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; i += k) &#123;</span><br><span class="line">arrResult.push(s.slice(i, i + k));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 依題意 從位置 0 開始, 做之後 k 長度字串的倒轉, 其後每 2k 位置都要做一樣動作</span></span><br><span class="line"><span class="keyword">return</span> arrResult</span><br><span class="line">.map(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (index % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">item = reverseString(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> item;</span><br><span class="line">&#125;)</span><br><span class="line">.join(<span class="string">''</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//倒轉字串 參考： https://github.com/xTobu/LeetCode/tree/master/JavaScript/%23344</span></span><br><span class="line"><span class="keyword">var</span> reverseString = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> s.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reverseStr(<span class="string">'abcdefghijklmnopqrstuv'</span>, <span class="number">3</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      反轉字串 II
    
    </summary>
    
      <category term="LeetCode" scheme="https://xtobu.github.io/categories/LeetCode/"/>
    
    
      <category term="JavaScript" scheme="https://xtobu.github.io/tags/JavaScript/"/>
    
      <category term="LeetCode" scheme="https://xtobu.github.io/tags/LeetCode/"/>
    
      <category term="ⓁⒸ - Easy" scheme="https://xtobu.github.io/tags/LC-Easy/"/>
    
      <category term="☄️" scheme="https://xtobu.github.io/tags/%E2%98%84%EF%B8%8F/"/>
    
      <category term="Array.map()" scheme="https://xtobu.github.io/tags/Array-map/"/>
    
      <category term="String.split()" scheme="https://xtobu.github.io/tags/String-split/"/>
    
      <category term="Array.reverse()" scheme="https://xtobu.github.io/tags/Array-reverse/"/>
    
      <category term="Array.join()" scheme="https://xtobu.github.io/tags/Array-join/"/>
    
      <category term="String.slice()" scheme="https://xtobu.github.io/tags/String-slice/"/>
    
  </entry>
  
  <entry>
    <title>ⓁⒸ ‧‧‧ 557. Reverse Words in a String III</title>
    <link href="https://xtobu.github.io/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-557-Reverse-Words-in-a-String-III/"/>
    <id>https://xtobu.github.io/2018/07/20/LC-‧‧‧-557-Reverse-Words-in-a-String-III/</id>
    <published>2018-07-20T11:45:10.000Z</published>
    <updated>2019-04-22T05:51:37.437Z</updated>
    
    <content type="html"><![CDATA[<h1 id="557-Reverse-Words-in-a-String-III-反轉字串裡的單字"><a href="#557-Reverse-Words-in-a-String-III-反轉字串裡的單字" class="headerlink" title="557. Reverse Words in a String III 反轉字串裡的單字"></a><a href="https://leetcode.com/problems/reverse-words-in-a-string-iii/description/" target="_blank" rel="noopener">557. Reverse Words in a String III 反轉字串裡的單字</a></h1><h2 id="❀-Origin"><a href="#❀-Origin" class="headerlink" title="❀ Origin"></a>❀ Origin</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Given a string,<br>you need to reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.</p><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><ul><li>In the string, each word is separated by single space and there will not be any extra space in the string.</li></ul><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;Let&apos;s take LeetCode contest&quot;</span><br><span class="line">Output: &quot;s&apos;teL ekat edoCteeL tsetnoc&quot;</span><br></pre></td></tr></table></figure><hr><h2 id="❀-翻譯"><a href="#❀-翻譯" class="headerlink" title="❀ 翻譯"></a>❀ 翻譯</h2><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>給定一個字串,<br>你必須倒轉每個單字裡的字母的順序, 同時保留空格和原始句子的順單字順序.</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>在字串裡, 每個單字都會用一個空白來隔開, 而且單字裡不會存在額外的空白.</li></ul><hr><h2 id="❀-Solution"><a href="#❀-Solution" class="headerlink" title="❀ Solution"></a>❀ Solution</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 依題意,</span></span><br><span class="line"><span class="comment">// 先將字串 s 拆分成陣列,</span></span><br><span class="line"><span class="comment">// 再用 .map() 對每個 word 做倒轉處理,</span></span><br><span class="line"><span class="comment">// 之後再 join 成字串.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reverseWords = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> s</span><br><span class="line">.split(<span class="string">' '</span>)</span><br><span class="line">.map(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> reverseString(item);</span><br><span class="line">&#125;)</span><br><span class="line">.join(<span class="string">' '</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//參考： https://github.com/xTobu/LeetCode/tree/master/JavaScript/%23344</span></span><br><span class="line"><span class="keyword">var</span> reverseString = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> s.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reverseWords(<span class="string">"Let's take LeetCode contest"</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      反轉字串裡的單字
    
    </summary>
    
      <category term="LeetCode" scheme="https://xtobu.github.io/categories/LeetCode/"/>
    
    
      <category term="JavaScript" scheme="https://xtobu.github.io/tags/JavaScript/"/>
    
      <category term="LeetCode" scheme="https://xtobu.github.io/tags/LeetCode/"/>
    
      <category term="ⓁⒸ - Easy" scheme="https://xtobu.github.io/tags/LC-Easy/"/>
    
      <category term="☄️" scheme="https://xtobu.github.io/tags/%E2%98%84%EF%B8%8F/"/>
    
      <category term="Array.map()" scheme="https://xtobu.github.io/tags/Array-map/"/>
    
      <category term="String.split()" scheme="https://xtobu.github.io/tags/String-split/"/>
    
      <category term="Array.reverse()" scheme="https://xtobu.github.io/tags/Array-reverse/"/>
    
      <category term="Array.join()" scheme="https://xtobu.github.io/tags/Array-join/"/>
    
  </entry>
  
  <entry>
    <title>ⓁⒸ ‧‧‧ 344. Reverse String</title>
    <link href="https://xtobu.github.io/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-344-Reverse-String/"/>
    <id>https://xtobu.github.io/2018/07/20/LC-‧‧‧-344-Reverse-String/</id>
    <published>2018-07-20T11:38:49.000Z</published>
    <updated>2019-04-22T05:51:37.436Z</updated>
    
    <content type="html"><![CDATA[<h1 id="344-Reverse-String-反轉字串"><a href="#344-Reverse-String-反轉字串" class="headerlink" title="344. Reverse String 反轉字串"></a><a href="https://leetcode.com/problems/reverse-string/description/" target="_blank" rel="noopener">344. Reverse String 反轉字串</a></h1><h2 id="❀-Origin"><a href="#❀-Origin" class="headerlink" title="❀ Origin"></a>❀ Origin</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Write a function that takes a string as input and returns the string reversed.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Given s = &quot;hello&quot;, return &quot;olleh&quot;.</span><br></pre></td></tr></table></figure><hr><h2 id="❀-翻譯"><a href="#❀-翻譯" class="headerlink" title="❀ 翻譯"></a>❀ 翻譯</h2><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>寫出一個能夠將字串當作輸入並回傳相反後字串的函數.</p><hr><h2 id="❀-Solution"><a href="#❀-Solution" class="headerlink" title="❀ Solution"></a>❀ Solution</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// var reverseString = function(s) &#123;</span></span><br><span class="line"><span class="comment">// // 建立頭中尾的部分</span></span><br><span class="line"><span class="comment">// var top = '';</span></span><br><span class="line"><span class="comment">// var mid = '';</span></span><br><span class="line"><span class="comment">// var bottom = '';</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// // 如果字串長度為奇數, 傳入中間的字符當作 mid</span></span><br><span class="line"><span class="comment">// s.length % 2 == 0 ? (mid = '') : (mid = s[Math.floor(s.length / 2)]);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// // 使用頭尾互換的方式填入 迴圈少跑一半</span></span><br><span class="line"><span class="comment">// /**</span></span><br><span class="line"><span class="comment">//  *  h e l l o</span></span><br><span class="line"><span class="comment">//  * ===========</span></span><br><span class="line"><span class="comment">//  *  0 1 2 3 4</span></span><br><span class="line"><span class="comment">//  *  0       4</span></span><br><span class="line"><span class="comment">//  *    1   3</span></span><br><span class="line"><span class="comment">//  * mid = s[2]</span></span><br><span class="line"><span class="comment">//  * top = s[4] + s[3]</span></span><br><span class="line"><span class="comment">//  * bottom = s[1] + s[0]</span></span><br><span class="line"><span class="comment">//  *</span></span><br><span class="line"><span class="comment">//  */</span></span><br><span class="line"><span class="comment">// for (let i = 0; i &lt; Math.floor(s.length / 2); i++) &#123;</span></span><br><span class="line"><span class="comment">// // 最初和最鏡面對應的值交換</span></span><br><span class="line"><span class="comment">// top = top + s[s.length - 1 - i];</span></span><br><span class="line"><span class="comment">// bottom = s[i] + bottom;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// return top + mid + bottom;</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 原本以為一開始的for迴圈跑一半的方式會比較快,</span></span><br><span class="line"><span class="comment">// 但原生的 split('') 分成陣列,</span></span><br><span class="line"><span class="comment">// 在用 reverse() 對陣列反轉,</span></span><br><span class="line"><span class="comment">// 之後用 join('') 將陣列組合成字串.</span></span><br><span class="line"><span class="comment">// 實測比較快, 快大概 30~40% 的時間</span></span><br><span class="line"><span class="keyword">var</span> reverseString = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reverseString(<span class="string">'abcde'</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      反轉字串
    
    </summary>
    
      <category term="LeetCode" scheme="https://xtobu.github.io/categories/LeetCode/"/>
    
    
      <category term="JavaScript" scheme="https://xtobu.github.io/tags/JavaScript/"/>
    
      <category term="LeetCode" scheme="https://xtobu.github.io/tags/LeetCode/"/>
    
      <category term="ⓁⒸ - Easy" scheme="https://xtobu.github.io/tags/LC-Easy/"/>
    
      <category term="☄️" scheme="https://xtobu.github.io/tags/%E2%98%84%EF%B8%8F/"/>
    
      <category term="String.split()" scheme="https://xtobu.github.io/tags/String-split/"/>
    
      <category term="Array.reverse()" scheme="https://xtobu.github.io/tags/Array-reverse/"/>
    
      <category term="Array.join()" scheme="https://xtobu.github.io/tags/Array-join/"/>
    
  </entry>
  
  <entry>
    <title>ⓁⒸ ‧‧‧ 821. Shortest Distance to a Character</title>
    <link href="https://xtobu.github.io/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-821-Shortest-Distance-to-a-Character/"/>
    <id>https://xtobu.github.io/2018/07/20/LC-‧‧‧-821-Shortest-Distance-to-a-Character/</id>
    <published>2018-07-20T11:34:41.000Z</published>
    <updated>2019-04-22T05:51:37.439Z</updated>
    
    <content type="html"><![CDATA[<h1 id="821-Shortest-Distance-to-a-Character-與字元的最短距離"><a href="#821-Shortest-Distance-to-a-Character-與字元的最短距離" class="headerlink" title="821. Shortest Distance to a Character 與字元的最短距離"></a><a href="https://leetcode.com/problems/shortest-distance-to-a-character/description/" target="_blank" rel="noopener">821. Shortest Distance to a Character 與字元的最短距離</a></h1><h2 id="❀-Origin"><a href="#❀-Origin" class="headerlink" title="❀ Origin"></a>❀ Origin</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Given a string <code>S</code> and a character <code>C</code>,<br>return an array of integers representing the shortest distance from the character <code>C</code> in the string.</p><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: S = &quot;loveleetcode&quot;, C = &apos;e&apos;</span><br><span class="line">Output: [3, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0]</span><br></pre></td></tr></table></figure><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><ol><li><code>S</code> string length is in <code>[1, 10000]</code>.</li><li><code>C</code> is a single character, and guaranteed to be in string <code>S</code>.</li><li>All letters in <code>S</code> and <code>C</code> are lowercase.</li></ol><hr><h2 id="❀-翻譯"><a href="#❀-翻譯" class="headerlink" title="❀ 翻譯"></a>❀ 翻譯</h2><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>給定一個字串 <code>S</code>, 一個字符 <code>C</code>,<br>回傳字符 <code>C</code> 在字串裡代表的最短距離的數字字串.</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>字串 <code>S</code> 的長度在 <code>[1, 10000]</code> 之間.</li><li><code>C</code> 是單一字符, 而且保證會出現在字串 <code>S</code> 裡面.</li><li>所有字串 <code>S</code> 和字符 <code>C</code>都會是小寫字母.</li></ol><hr><h2 id="❀-Solution"><a href="#❀-Solution" class="headerlink" title="❀ Solution"></a>❀ Solution</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; S</span></span><br><span class="line"><span class="comment"> * @param &#123;character&#125; C</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> shortestToChar = <span class="function"><span class="keyword">function</span>(<span class="params">S, C</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 找出所有目標字 C 的位置</span></span><br><span class="line"><span class="keyword">var</span> arrIndexC = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; S.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (S[i] === C) &#123;</span><br><span class="line">arrIndexC.push(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 結果陣列</span></span><br><span class="line"><span class="keyword">var</span> arrReult = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先從 arrIndexC 的第 0 個位置開始找</span></span><br><span class="line"><span class="keyword">var</span> nowC = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; S.length; i++) &#123;</span><br><span class="line">arrReult.push(</span><br><span class="line"><span class="comment">// 取決對值 在傳入較小的那個</span></span><br><span class="line"><span class="built_in">Math</span>.min(</span><br><span class="line"><span class="built_in">Math</span>.abs(detect(arrIndexC[nowC]) - i),</span><br><span class="line"><span class="built_in">Math</span>.abs(detect(arrIndexC[nowC - <span class="number">1</span>]) - i)</span><br><span class="line">)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 若目前遍歷到的位置, 已經超過暫存的 nowC , 將 nowC + 1</span></span><br><span class="line"><span class="keyword">if</span> (i &gt;= detect(arrIndexC[nowC])) nowC++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arrReult;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 如果遇到 undefined , 傳入無限大</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">detect</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> c !== <span class="literal">undefined</span> ? c : <span class="literal">Infinity</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(shortestToChar(<span class="string">'loveleetcode'</span>, <span class="string">'e'</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      與字元的最短距離
    
    </summary>
    
      <category term="LeetCode" scheme="https://xtobu.github.io/categories/LeetCode/"/>
    
    
      <category term="JavaScript" scheme="https://xtobu.github.io/tags/JavaScript/"/>
    
      <category term="LeetCode" scheme="https://xtobu.github.io/tags/LeetCode/"/>
    
      <category term="ⓁⒸ - Easy" scheme="https://xtobu.github.io/tags/LC-Easy/"/>
    
      <category term="☄️" scheme="https://xtobu.github.io/tags/%E2%98%84%EF%B8%8F/"/>
    
      <category term="Math.abs()" scheme="https://xtobu.github.io/tags/Math-abs/"/>
    
      <category term="Math.min()" scheme="https://xtobu.github.io/tags/Math-min/"/>
    
  </entry>
  
  <entry>
    <title>ⓁⒸ ‧‧‧ 476. Number Complement</title>
    <link href="https://xtobu.github.io/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-476-Number-Complement/"/>
    <id>https://xtobu.github.io/2018/07/20/LC-‧‧‧-476-Number-Complement/</id>
    <published>2018-07-20T11:30:21.000Z</published>
    <updated>2019-04-22T05:51:37.437Z</updated>
    
    <content type="html"><![CDATA[<h1 id="476-Number-Complement-數字補數"><a href="#476-Number-Complement-數字補數" class="headerlink" title="476. Number Complement 數字補數"></a><a href="https://leetcode.com/problems/number-complement/description/" target="_blank" rel="noopener">476. Number Complement 數字補數</a></h1><h2 id="❀-Origin"><a href="#❀-Origin" class="headerlink" title="❀ Origin"></a>❀ Origin</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Given a positive integer, output its complement number.<br>The complement strategy is to flip the bits of its binary representation.</p><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><ol><li>The given integer is guaranteed to fit within the range of a 32-bit signed integer.</li><li>You could assume no leading zero bit in the integer’s binary representation.</li></ol><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: 5</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.</span><br></pre></td></tr></table></figure><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: 1</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.</span><br></pre></td></tr></table></figure><hr><h2 id="❀-翻譯"><a href="#❀-翻譯" class="headerlink" title="❀ 翻譯"></a>❀ 翻譯</h2><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>給定一個正整數, 輸出其補數.<br>補數的定義是翻轉其二進制數的每個代表位元.</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>給定的整數保證符合在 32 位元有號數的範圍內.</li><li>你可以在整數的二進制表示裡假設其沒有前面的 0 位元.</li></ol><hr><h2 id="❀-Solution"><a href="#❀-Solution" class="headerlink" title="❀ Solution"></a>❀ Solution</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; num</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * XOR 相同為零 不同為一</span></span><br><span class="line"><span class="comment"> * NOR 理論上也可以, 只是目前不曉得如何在JS使用 NOR</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findComplement = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 先取得目標數的二進制的長度</span></span><br><span class="line"><span class="keyword">var</span> binaryLength = num.toString(<span class="number">2</span>).length;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 Math.pow() , 取得全為 1 的數, 2的n次方 -1</span></span><br><span class="line"><span class="keyword">var</span> TheAllOneNum = <span class="built_in">Math</span>.pow(<span class="number">2</span>, binaryLength) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 與其執行 NOR</span></span><br><span class="line"><span class="keyword">return</span> num ^ TheAllOneNum;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(findComplement(<span class="number">9</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      數字補數
    
    </summary>
    
      <category term="LeetCode" scheme="https://xtobu.github.io/categories/LeetCode/"/>
    
    
      <category term="JavaScript" scheme="https://xtobu.github.io/tags/JavaScript/"/>
    
      <category term="LeetCode" scheme="https://xtobu.github.io/tags/LeetCode/"/>
    
      <category term="XOR" scheme="https://xtobu.github.io/tags/XOR/"/>
    
      <category term="ⓁⒸ - Easy" scheme="https://xtobu.github.io/tags/LC-Easy/"/>
    
      <category term="☄️" scheme="https://xtobu.github.io/tags/%E2%98%84%EF%B8%8F/"/>
    
      <category term="Math.pow()" scheme="https://xtobu.github.io/tags/Math-pow/"/>
    
      <category term="NOR" scheme="https://xtobu.github.io/tags/NOR/"/>
    
  </entry>
  
</feed>
