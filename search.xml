<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ⓁⒸ ‧‧‧ 283. Move Zeroes</title>
      <link href="/2019/07/12/LC-%E2%80%A7%E2%80%A7%E2%80%A7-283-Move-Zeroes/"/>
      <url>/2019/07/12/LC-%E2%80%A7%E2%80%A7%E2%80%A7-283-Move-Zeroes/</url>
      
        <content type="html"><![CDATA[<h1 id="283-Move-Zeroes-移動零"><a href="#283-Move-Zeroes-移動零" class="headerlink" title="283. Move Zeroes 移動零"></a><a href="https://leetcode.com/problems/move-zeroes/description/" target="_blank" rel="noopener">283. Move Zeroes 移動零</a></h1><h2 id="❀-Origin"><a href="#❀-Origin" class="headerlink" title="❀ Origin"></a>❀ Origin</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Given an array <code>nums</code>,<br>write a function to move all <code>0</code>‘s to the end of it while maintaining the relative order of the non-zero elements.</p><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><ol><li>You must do this <strong>in-place</strong> without making a copy of the array.</li><li>Minimize the total number of operations.</li></ol><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [0,1,0,3,12]</span><br><span class="line">Output: [1,3,12,0,0]</span><br></pre></td></tr></table></figure><hr><h2 id="❀-翻譯"><a href="#❀-翻譯" class="headerlink" title="❀ 翻譯"></a>❀ 翻譯</h2><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>給定一個陣列 <code>nums</code> ,<br>寫一個函數去移動所有的 <code>0</code> 到最後面, 且過程中保持非零元素的相對順序.</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>你必須在不製作一個複製陣列的情況下, 就以此操作.</li><li>最小化所有的操作數.</li></ol><hr><h2 id="❀-Solution"><a href="#❀-Solution" class="headerlink" title="❀ Solution"></a>❀ Solution</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;void&#125; Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 移動所有的零到陣列最後面, 且不能新建多的陣列.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 思路為遍歷每個元素,</span></span><br><span class="line"><span class="comment"> * 如果遇到 0 , 就忽略</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 遇到不是 0 ,</span></span><br><span class="line"><span class="comment"> * 就將該元素 nums[i] 的值放到 nums[position],</span></span><br><span class="line"><span class="comment"> * 並將 position + 1</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 以次類推,</span></span><br><span class="line"><span class="comment"> * nums 全部遍歷完之後,</span></span><br><span class="line"><span class="comment"> * 全部非零元素就會依照原本順序, 排在陣列最前面了.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 之後再從該陣列位置的 position 為起始,</span></span><br><span class="line"><span class="comment"> * 將後面的值改成 0 , 即可.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 例如：</span></span><br><span class="line"><span class="comment"> * position = 0, i = 0,</span></span><br><span class="line"><span class="comment"> * [0, 1, 0, 3, 12],</span></span><br><span class="line"><span class="comment"> * nums[i] = 0, 忽略</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * position = 0, i = 1,</span></span><br><span class="line"><span class="comment"> * [0, 1, 0, 3, 12],</span></span><br><span class="line"><span class="comment"> * nums[i] = 1,</span></span><br><span class="line"><span class="comment"> * nums[position] = nums[i]</span></span><br><span class="line"><span class="comment"> * [1, 1, 0, 3, 12]</span></span><br><span class="line"><span class="comment"> * position + 1</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * position = 1, i = 2,</span></span><br><span class="line"><span class="comment"> * [1, 1, 0, 3, 12],</span></span><br><span class="line"><span class="comment"> * nums[i] = 0, 忽略</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * position = 1, i = 3,</span></span><br><span class="line"><span class="comment"> * [1, 1, 0, 3, 12],</span></span><br><span class="line"><span class="comment"> * nums[i] = 3,</span></span><br><span class="line"><span class="comment"> * nums[position] = nums[i]</span></span><br><span class="line"><span class="comment"> * [1, 3, 0, 3, 12]</span></span><br><span class="line"><span class="comment"> * position + 1</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * position = 2, i = 4,</span></span><br><span class="line"><span class="comment"> * [1, 3, 0, 3, 12],</span></span><br><span class="line"><span class="comment"> * nums[i] = 12,</span></span><br><span class="line"><span class="comment"> * nums[position] = nums[i]</span></span><br><span class="line"><span class="comment"> * [1, 3, 12, 3, 12]</span></span><br><span class="line"><span class="comment"> * position + 1</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 最後將陣列從 position 開始後的元素都置換成 0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> moveZeroes = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> position = <span class="number">0</span>,</span><br><span class="line">len = nums.length;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (nums[i] !== <span class="number">0</span>) &#123;</span><br><span class="line">nums[position] = nums[i];</span><br><span class="line">position++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = position; i &lt; len; i++) &#123;</span><br><span class="line">nums[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// return nums;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// console.log(moveZeroes([0, 1, 0, 3, 12]));</span></span><br></pre></td></tr></table></figure><h3 id="JavaScript-II"><a href="#JavaScript-II" class="headerlink" title="JavaScript II"></a>JavaScript II</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;void&#125; Do not return anything, modify nums in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 第二種寫法,</span></span><br><span class="line"><span class="comment"> * 比較直覺,</span></span><br><span class="line"><span class="comment"> * 遇到零, 抓出來往後丟</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 從後面開始遍歷,</span></span><br><span class="line"><span class="comment"> * 如果 nums[i] === 0</span></span><br><span class="line"><span class="comment"> * 便將該位置移除 ( nums.splice(i, 1) ),</span></span><br><span class="line"><span class="comment"> * 最後面推一個 0 回去.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 注意：</span></span><br><span class="line"><span class="comment"> * 不能從頭開始找,</span></span><br><span class="line"><span class="comment"> * 因為從頭的話, splice 後會刪除一個元素, 之後 push 加到最後,</span></span><br><span class="line"><span class="comment"> * 這樣又照著遍歷跑時, 有一個元素會被忽略</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 譬如</span></span><br><span class="line"><span class="comment"> * i = 0 [0, 0, 1] -&gt; [0, 1, 0]</span></span><br><span class="line"><span class="comment"> * i = 1 [0, 1, 0] -&gt; [0, 1, 0]</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 連續的第二個也是零的話就會被忽略了</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> moveZeroes = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = nums.length; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">if</span> (nums[i] === <span class="number">0</span>) &#123;</span><br><span class="line">nums.splice(i, <span class="number">1</span>);</span><br><span class="line">nums.push(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// return nums;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// console.log(moveZeroes([0, 0, 1]));</span></span><br></pre></td></tr></table></figure><h3 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">moveZeroes2</span><span class="params">(nums []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> position, lengthNums <span class="keyword">int</span></span><br><span class="line">lengthNums = <span class="built_in">len</span>(nums)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> nums &#123;</span><br><span class="line"><span class="keyword">if</span> v != <span class="number">0</span> &#123;</span><br><span class="line">nums[position] = v</span><br><span class="line">position++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := position; i &lt; lengthNums; i++ &#123;</span><br><span class="line">nums[i] = <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Golang-II"><a href="#Golang-II" class="headerlink" title="Golang II"></a>Golang II</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">moveZeroes</span><span class="params">(nums []<span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="built_in">len</span>(nums) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line"><span class="keyword">if</span> nums[i] == <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">// Golang - remove element in a array </span></span><br><span class="line"><span class="comment">// 參考：https://stackoverflow.com/questions/25025409/delete-element-in-a-slice</span></span><br><span class="line"><span class="comment">// 將 nums 用 append 置換</span></span><br><span class="line"><span class="comment">// 假設要移除的位置 i ， 以 i 將陣列分成頭尾兩部分</span></span><br><span class="line"><span class="comment">// 再將其用 append 組合起來。</span></span><br><span class="line">nums = <span class="built_in">append</span>(nums[:i], nums[i+<span class="number">1</span>:]...)</span><br><span class="line">nums = <span class="built_in">append</span>(nums, <span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ⓁⒸ - Easy </tag>
            
            <tag> ☄️ </tag>
            
            <tag> Array.splice() </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ⓁⒸ ‧‧‧ 242. Valid Anagram</title>
      <link href="/2019/07/12/LC-%E2%80%A7%E2%80%A7%E2%80%A7-242-Valid-Anagram/"/>
      <url>/2019/07/12/LC-%E2%80%A7%E2%80%A7%E2%80%A7-242-Valid-Anagram/</url>
      
        <content type="html"><![CDATA[<h1 id="242-Valid-Anagram"><a href="#242-Valid-Anagram" class="headerlink" title="242. Valid Anagram"></a><a href="https://leetcode.com/problems/valid-anagram/" target="_blank" rel="noopener">242. Valid Anagram</a></h1><h2 id="❀-Origin"><a href="#❀-Origin" class="headerlink" title="❀ Origin"></a>❀ Origin</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Given two strings <code>s</code> and <code>t</code> , write a function to determine if <code>t</code> is an anagram of <code>s</code>.</p><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;anagram&quot;, t = &quot;nagaram&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;rat&quot;, t = &quot;car&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p>You may assume the string contains only lowercase alphabets.</p><h3 id="Follow-up"><a href="#Follow-up" class="headerlink" title="Follow up"></a>Follow up</h3><p>What if the inputs contain unicode characters? How would you adapt your solution to such case?</p><hr><h2 id="❀-翻譯"><a href="#❀-翻譯" class="headerlink" title="❀ 翻譯"></a>❀ 翻譯</h2><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>給定兩個字串 <code>s</code> 和 <code>t</code> ，<br>寫出一個 function 去判斷 <code>t</code> 是否為 <code>s</code> 的異位字謎。</p><h3 id="筆記"><a href="#筆記" class="headerlink" title="筆記"></a>筆記</h3><p>你可以假設字串裡包含的字母只會是小寫。</p><h3 id="進一步思考"><a href="#進一步思考" class="headerlink" title="進一步思考"></a>進一步思考</h3><p>如果 inputs 包含了 unicode characters，<br>你會如何使你的解法適應這種狀況？</p><hr><h2 id="❀-Solution"><a href="#❀-Solution" class="headerlink" title="❀ Solution"></a>❀ Solution</h2><h3 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* *</span></span><br><span class="line"><span class="comment"> * 解題方向：</span></span><br><span class="line"><span class="comment"> * 計算出 s 每個英文字母出現過幾次，</span></span><br><span class="line"><span class="comment"> * 在依照 t 的出現次數去相減，</span></span><br><span class="line"><span class="comment"> * 最後去判斷全字母是否都為 0 即可。</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">isAnagram</span><span class="params">(s <span class="keyword">string</span>, t <span class="keyword">string</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">  <span class="comment">// 為英文字母總數暫存而建立一個 26 長度的整數陣列，</span></span><br><span class="line">  <span class="keyword">var</span> alphabets [<span class="number">26</span>]<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 將字串 s 轉成 byte 型態後遍歷，</span></span><br><span class="line">  <span class="comment">// 將其代表的英文字母數量加一。</span></span><br><span class="line">  <span class="keyword">for</span> _, v := <span class="keyword">range</span> []<span class="keyword">byte</span>(s) &#123;</span><br><span class="line">    alphabets[v<span class="number">-97</span>]++</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 將字串 t 轉成 byte 型態後遍歷，</span></span><br><span class="line">  <span class="comment">// 將其代表的英文字母數量減一。</span></span><br><span class="line">  <span class="keyword">for</span> _, v := <span class="keyword">range</span> []<span class="keyword">byte</span>(t) &#123;</span><br><span class="line">    alphabets[v<span class="number">-97</span>]--</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 遍歷作為英文字母總數暫存的陣列，</span></span><br><span class="line">  <span class="comment">// 若其值不等於 0 , 則代表有某字母出現次數無法對應，</span></span><br><span class="line">  <span class="comment">// 於是便可證明 s 、 t 不為易位構詞遊戲。</span></span><br><span class="line">  <span class="keyword">for</span> _, v := <span class="keyword">range</span> alphabets &#123;</span><br><span class="line">    <span class="keyword">if</span> v != <span class="number">0</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ⓁⒸ - Easy </tag>
            
            <tag> ☄️ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ⓁⒸ ‧‧‧ 217. Contains Duplicate</title>
      <link href="/2019/07/12/LC-%E2%80%A7%E2%80%A7%E2%80%A7-217-Contains-Duplicate/"/>
      <url>/2019/07/12/LC-%E2%80%A7%E2%80%A7%E2%80%A7-217-Contains-Duplicate/</url>
      
        <content type="html"><![CDATA[<h1 id="217-Contains-Duplicate"><a href="#217-Contains-Duplicate" class="headerlink" title="217. Contains Duplicate"></a><a href="https://leetcode.com/problems/contains-duplicate/" target="_blank" rel="noopener">217. Contains Duplicate</a></h1><h2 id="❀-Origin"><a href="#❀-Origin" class="headerlink" title="❀ Origin"></a>❀ Origin</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Given an array of integers, find if the array contains any duplicates.<br>Your function should return true if any value appears at least twice in the array,<br>and it should return false if every element is distinct.</p><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,2,3,1]</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,2,3,4]</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><h3 id="Example-3"><a href="#Example-3" class="headerlink" title="Example 3"></a>Example 3</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,1,1,3,3,4,3,2,4,2]</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><hr><h2 id="❀-翻譯"><a href="#❀-翻譯" class="headerlink" title="❀ 翻譯"></a>❀ 翻譯</h2><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>給定一個整數陣列，找出陣列是否包含任何重複值。<br>如果在陣列裡有任何數字出現了至少兩次以上，你的 function 應該要回傳 true，<br>而如果每個元素都是有明顯差異的，則回傳 false 。</p><hr><h2 id="❀-Solution"><a href="#❀-Solution" class="headerlink" title="❀ Solution"></a>❀ Solution</h2><h3 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解法一：建立 map 去作為 hash 表</span></span><br><span class="line"><span class="comment">// 依照其 key 去檢查是否該數曾出現過。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">containsDuplicate</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">  m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">bool</span>)</span><br><span class="line">  <span class="keyword">for</span> _, v := <span class="keyword">range</span> nums &#123;</span><br><span class="line">    <span class="keyword">if</span> _, ok := m[v]; ok &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    m[v] = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解法二：先 sort ，再和下一個位置判斷是否重複</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">containsDuplicate2</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">  sort.Ints(nums)</span><br><span class="line">  <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(nums)<span class="number">-1</span>; i++ &#123;</span><br><span class="line">    <span class="keyword">if</span> nums[i] == nums[i+<span class="number">1</span>] &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 兩個解法在 LeetCode 上 Runtime 都差不多，</span></span><br><span class="line"><span class="comment"> * 但因為第一個方法有建立了 map ，</span></span><br><span class="line"><span class="comment"> * 所以在 Memory 的使用上會高出只操作陣列的方法二。</span></span><br><span class="line"><span class="comment"> ** /</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ⓁⒸ - Easy </tag>
            
            <tag> ☄️ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ⓁⒸ ‧‧‧ 189. Rotate Array</title>
      <link href="/2019/07/11/LC-%E2%80%A7%E2%80%A7%E2%80%A7-189-Rotate-Array/"/>
      <url>/2019/07/11/LC-%E2%80%A7%E2%80%A7%E2%80%A7-189-Rotate-Array/</url>
      
        <content type="html"><![CDATA[<h1 id="189-Rotate-Array"><a href="#189-Rotate-Array" class="headerlink" title="189. Rotate Array"></a><a href="https://leetcode.com/problems/rotate-array/" target="_blank" rel="noopener">189. Rotate Array</a></h1><h2 id="❀-Origin"><a href="#❀-Origin" class="headerlink" title="❀ Origin"></a>❀ Origin</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Given an array, rotate the array to the right by k steps, where k is non-negative.</p><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,2,3,4,5,6,7] and k = 3</span><br><span class="line">Output: [5,6,7,1,2,3,4]</span><br><span class="line">Explanation:</span><br><span class="line">rotate 1 steps to the right: [7,1,2,3,4,5,6]</span><br><span class="line">rotate 2 steps to the right: [6,7,1,2,3,4,5]</span><br><span class="line">rotate 3 steps to the right: [5,6,7,1,2,3,4]</span><br></pre></td></tr></table></figure><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: [-1,-100,3,99] and k = 2</span><br><span class="line">Output: [3,99,-1,-100]</span><br><span class="line">Explanation: </span><br><span class="line">rotate 1 steps to the right: [99,-1,-100,3]</span><br><span class="line">rotate 2 steps to the right: [3,99,-1,-100]</span><br></pre></td></tr></table></figure><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><ul><li>Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.</li><li>Could you do it in-place with O(1) extra space?</li></ul><hr><h2 id="❀-翻譯"><a href="#❀-翻譯" class="headerlink" title="❀ 翻譯"></a>❀ 翻譯</h2><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>給定一個陣列，<br>將陣列往右旋轉 k 個階段，<br>其中 k 為非負數。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>盡你可能地提出解決方式，這裏至少有 3 種不同的方式能解決這問題。</li><li>你可以在時間複雜度 O(1) 額外空間的情況下做到嗎？</li></ul><hr><h2 id="❀-Solution"><a href="#❀-Solution" class="headerlink" title="❀ Solution"></a>❀ Solution</h2><h3 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">rotate</span><span class="params">(nums []<span class="keyword">int</span>, k <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">  <span class="comment">// 取出 nums 的總長</span></span><br><span class="line">  <span class="keyword">var</span> lenNums <span class="keyword">int</span> = <span class="built_in">len</span>(nums)</span><br><span class="line">  <span class="comment">// 將 k 除與 lenNums 並取其 餘數 設為 k (steps)</span></span><br><span class="line">  k %= lenNums</span><br><span class="line">  <span class="keyword">if</span> k == <span class="number">0</span> &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// nums 已 k 為範圍分前後兩部分，並將其相反 append 進 temp</span></span><br><span class="line">  <span class="comment">// 關於後面三個點：</span></span><br><span class="line">  <span class="comment">// func append(slice []Type, elems ...Type) []Type</span></span><br><span class="line">  <span class="comment">// append 第一個可以擺 slice，但往後則是擺和第一個 slice 一樣 Type 的 數個 value </span></span><br><span class="line">  <span class="comment">// 故後面必須加上 ... 將 slice 打散後加入 append 。</span></span><br><span class="line">  <span class="comment">// 參照：</span></span><br><span class="line">  <span class="comment">// https://github.com/zhangyachen/zhangyachen.github.io/issues/137</span></span><br><span class="line">  <span class="comment">// https://coderwall.com/p/tlnhmg/appending-two-slices-in-go-what-s-with-that</span></span><br><span class="line">  tmp := <span class="built_in">append</span>(nums[lenNums-k:], nums[<span class="number">0</span>:lenNums-k]...)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 將 nums 設置回去</span></span><br><span class="line">  <span class="keyword">for</span> index, value := <span class="keyword">range</span> tmp &#123;</span><br><span class="line">    nums[index] = value</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ⓁⒸ - Easy </tag>
            
            <tag> ☄️ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ⓁⒸ ‧‧‧ 136. Single Number</title>
      <link href="/2019/07/10/LC-%E2%80%A7%E2%80%A7%E2%80%A7-136-Single-Number/"/>
      <url>/2019/07/10/LC-%E2%80%A7%E2%80%A7%E2%80%A7-136-Single-Number/</url>
      
        <content type="html"><![CDATA[<blockquote><p>2019-07-10<br><strong>更新：</strong><br>增加 Golang</p></blockquote><h1 id="136-Single-Number-找出單身狗"><a href="#136-Single-Number-找出單身狗" class="headerlink" title="136. Single Number 找出單身狗"></a><a href="https://leetcode.com/problems/single-number/description/" target="_blank" rel="noopener">136. Single Number 找出單身狗</a></h1><h2 id="❀-Origin"><a href="#❀-Origin" class="headerlink" title="❀ Origin"></a>❀ Origin</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Given a <code>non-empty</code> array of integers, every element appears twice except for one.<br>Find that single one.</p><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><ul><li>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</li></ul><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [2,2,1]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [4,1,2,1,2]</span><br><span class="line">Output: 4</span><br></pre></td></tr></table></figure><hr><h2 id="❀-翻譯"><a href="#❀-翻譯" class="headerlink" title="❀ 翻譯"></a>❀ 翻譯</h2><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>給定一個非空整數字串, 除了一個元素外, 每個元素會出現兩次.<br>請找出那個單身狗.</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>你的算法應該要有線性的時間複雜度. 你可以完成它, 且不使用額外的記憶體嗎?</li></ul><hr><h2 id="❀-Solution"><a href="#❀-Solution" class="headerlink" title="❀ Solution"></a>❀ Solution</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 最初的想法,</span></span><br><span class="line"><span class="comment"> * 但題目希望時間複雜度是線性的解答</span></span><br><span class="line"><span class="comment"> * 第一個解法每次都執行了兩次 find index 複雜度</span></span><br><span class="line"><span class="comment"> * O(n^2) 不符合題目要求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// var singleNumber = function(nums) &#123;</span></span><br><span class="line"><span class="comment">// for (let i = 0; i &lt; nums.length; i++) &#123;</span></span><br><span class="line"><span class="comment">// if (nums.indexOf(nums[i]) == nums.lastIndexOf(nums[i])) return nums[i];</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 網路上大神的解法,</span></span><br><span class="line"><span class="comment"> * 為了讓時間複雜度能更等於 O(n),</span></span><br><span class="line"><span class="comment"> * 那一定只能執行一次, 裡面還不能有任何尋找的動作</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 所以大神使用了 XOR ^ ,</span></span><br><span class="line"><span class="comment"> * 因為 XOR 的特性, 相同為0 不同為1.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * XOR</span></span><br><span class="line"><span class="comment"> * 9 | 1 0 0 1</span></span><br><span class="line"><span class="comment"> * 2 | 0 0 1 0</span></span><br><span class="line"><span class="comment"> * ============</span></span><br><span class="line"><span class="comment"> * 11| 1 0 1 1</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 2 | 0 0 1 0</span></span><br><span class="line"><span class="comment"> * 2 | 0 0 1 0</span></span><br><span class="line"><span class="comment"> * ============</span></span><br><span class="line"><span class="comment"> * 0 | 0 0 0 0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 還有遵守 交換率</span></span><br><span class="line"><span class="comment"> * 所以 A ^ B ^ C  = (A ^ B) ^ C = A ^ (B ^ C)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 依題目,</span></span><br><span class="line"><span class="comment"> * 陣列會是一對對的數字, 要找出單身狗</span></span><br><span class="line"><span class="comment"> * 那因為 XOR 的關係,</span></span><br><span class="line"><span class="comment"> * 自己跟自己 XOR, 那一定等於零,</span></span><br><span class="line"><span class="comment"> * 而任何數跟零做XOR, 會等於自己.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 所以一對一對的數字 XOR後會等於0,</span></span><br><span class="line"><span class="comment"> * 剩下的會是0跟單身狗 , 答案就是單身狗</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> singleNumber = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line"><span class="comment">// var res = 0;</span></span><br><span class="line"><span class="comment">// for(let i =0 ;i&lt;nums.length;i++)&#123;</span></span><br><span class="line"><span class="comment">// res = res ^ nums[i];</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// return res;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> nums.reduce(<span class="function">(<span class="params">accu, item, index</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> accu ^ item;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(singleNumber([<span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>]));</span><br></pre></td></tr></table></figure><h3 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">singleNumber</span><span class="params">(nums []<span class="keyword">int</span>)</span> <span class="params">(res <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> _, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line">res ^= num</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Golang </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ⓁⒸ - Easy </tag>
            
            <tag> ⭐ </tag>
            
            <tag> Array.reduce() </tag>
            
            <tag> XOR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ⓁⒸ ‧‧‧ 1. Two Sum</title>
      <link href="/2019/07/10/LC-%E2%80%A7%E2%80%A7%E2%80%A7-1-Two-Sum/"/>
      <url>/2019/07/10/LC-%E2%80%A7%E2%80%A7%E2%80%A7-1-Two-Sum/</url>
      
        <content type="html"><![CDATA[<blockquote><p>2019-07-10<br><strong>更新：</strong><br>增加 Golang</p></blockquote><h1 id="1-Two-Sum"><a href="#1-Two-Sum" class="headerlink" title="1. Two Sum"></a><a href="https://leetcode.com/problems/two-sum/description/" target="_blank" rel="noopener">1. Two Sum</a></h1><h2 id="❀-Origin"><a href="#❀-Origin" class="headerlink" title="❀ Origin"></a>❀ Origin</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Given an array of integers, return <code>indices</code> of the two numbers such that they add up to a specific target.<br>You may assume that each input would have <code>exactly</code> one solution, and you may not use the same element twice.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Given nums = [2, 7, 11, 15], target = 9,</span><br><span class="line"></span><br><span class="line">Because nums[0] + nums[1] = 2 + 7 = 9,</span><br><span class="line">return [0, 1].</span><br></pre></td></tr></table></figure><hr><h2 id="❀-翻譯"><a href="#❀-翻譯" class="headerlink" title="❀ 翻譯"></a>❀ 翻譯</h2><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>給定一個整數陣列, 回傳兩個數字的指數 <code>indices</code> , 而這兩個數字相加必須等於目標數 <code>target</code> .<br>假設每個輸入準確地只會有一組解, 且不能回傳同個數字兩次.</p><hr><h2 id="❀-Solution"><a href="#❀-Solution" class="headerlink" title="❀ Solution"></a>❀ Solution</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; target</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> temp = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> val;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">0</span>; index &lt; nums.length; index++) &#123;</span><br><span class="line">    val = nums[index];</span><br><span class="line">    <span class="comment">// 將 target - 當前 nums[index] 的 val,</span></span><br><span class="line">    <span class="comment">// target 一定是兩數字的相加,</span></span><br><span class="line">    <span class="comment">// 所以如果 temp[target - val] &gt;= 0 , 則代表在 temp 找得到 key</span></span><br><span class="line">    <span class="comment">// 且值大於或等於0 則代表找到了, 即可 return 結果陣列</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//console.log('temp', temp);</span></span><br><span class="line">    <span class="comment">//console.log('temp[target - val]', temp[target - val]);</span></span><br><span class="line">    <span class="keyword">if</span> (temp[target - val] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> [temp[target - val], index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找不到的話, 則將目前的 val, 當作temp的一個 key 去儲存起來,</span></span><br><span class="line">    <span class="comment">// 其 key 的 val 則為目前的index</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      temp[val] = index;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h3><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">twoSum</span><span class="params">(nums []<span class="keyword">int</span>, target <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line"><span class="comment">// 使用 make 建立一個空 map , 並設置 key 和 value 的型態</span></span><br><span class="line">temp := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">int</span>]<span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">for</span> index, num := <span class="keyword">range</span> nums &#123;</span><br><span class="line"><span class="comment">// 取 temp[target-num] 的值（某 num 的 index），</span></span><br><span class="line"><span class="comment">// 如果有值則代表在 for 迴圈的前某次，有儲存過了 target 和當下 num 的 差，</span></span><br><span class="line"><span class="comment">// 意味在 temp 找得到 num 的另一半，</span></span><br><span class="line"><span class="comment">// 於是可以回傳兩者的位置，則為答案。</span></span><br><span class="line"><span class="keyword">if</span> value, ok := temp[target-num]; ok &#123;</span><br><span class="line"><span class="keyword">return</span> []<span class="keyword">int</span>&#123;value, index&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果沒有值，</span></span><br><span class="line"><span class="comment">// 則將當前的 num 作為 key; 其 index 作為 value ,</span></span><br><span class="line"><span class="comment">// 存進 temp 裡，</span></span><br><span class="line"><span class="comment">// 等待 range 的下一個 num 來比對。</span></span><br><span class="line">temp[num] = index</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// func 設定了欲回傳型態，</span></span><br><span class="line"><span class="comment">// 於是沒有結果的話，還是得回傳 nil</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Golang </tag>
            
            <tag> LeetCode </tag>
            
            <tag> Sum </tag>
            
            <tag> Object </tag>
            
            <tag> Key </tag>
            
            <tag> ⓁⒸ - Easy </tag>
            
            <tag> ☄️ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《NOTE》：Twenty Nineteen</title>
      <link href="/2019/05/28/%E3%80%8ANOTE%E3%80%8B%EF%BC%9ATwenty-Nineteen/"/>
      <url>/2019/05/28/%E3%80%8ANOTE%E3%80%8B%EF%BC%9ATwenty-Nineteen/</url>
      
        <content type="html"><![CDATA[<h1 id="May"><a href="#May" class="headerlink" title="May"></a>May</h1><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="Naming-命名規則"><a href="#Naming-命名規則" class="headerlink" title="Naming 命名規則"></a>Naming 命名規則</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Function</span></span><br><span class="line">(X) CheckValidToken</span><br><span class="line">(O) chkToken</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bool</span></span><br><span class="line">(X) TokenValid</span><br><span class="line">(O) isTokenValid</span><br><span class="line">(O) isXXX...</span><br><span class="line"></span><br><span class="line"><span class="comment">// Constant</span></span><br><span class="line">(O) IS_VALID</span><br><span class="line"></span><br><span class="line"><span class="comment">// Array</span></span><br><span class="line">(O) policyItems</span><br><span class="line">(O) Policys</span><br><span class="line">(O) </span><br><span class="line"><span class="comment">// Variable</span></span><br><span class="line">(O) countPolicys</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br></pre></td></tr></table></figure><h2 id="Bash"><a href="#Bash" class="headerlink" title="Bash"></a>Bash</h2><h3 id="複製-Output"><a href="#複製-Output" class="headerlink" title="複製 Output"></a>複製 Output</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"Hello world"</span> | pbcopy</span><br><span class="line"><span class="comment"># "Hello world" is now in your clipboard</span></span><br></pre></td></tr></table></figure><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="檢索-Systemd-日誌-Journalctl"><a href="#檢索-Systemd-日誌-Journalctl" class="headerlink" title="檢索 Systemd 日誌 - Journalctl"></a>檢索 Systemd 日誌 - Journalctl</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">journalctl -f --no-pager -n 50 -u &lt;service&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># -u By Unit </span></span><br><span class="line"><span class="comment"># see messages logged by any systemd unit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -f Follow</span></span><br><span class="line"><span class="comment"># To run journalctl like the Linux tail command so it continuously prints log messages as they are added</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --no-pager</span></span><br><span class="line"><span class="comment"># tell it to not use a pager</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -n &lt;number&gt;</span></span><br><span class="line"><span class="comment"># printing the last number</span></span><br></pre></td></tr></table></figure><hr><h1 id="June"><a href="#June" class="headerlink" title="June"></a>June</h1><h2 id="JavaScript-1"><a href="#JavaScript-1" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.setState(<span class="function">(<span class="params">&#123; PolicyReview &#125;</span>) =&gt;</span> (&#123;</span><br><span class="line">      PolicyReview: &#123;</span><br><span class="line">        ...PolicyReview,</span><br><span class="line">        listHistory: PolicyReview.listHistory.map(<span class="function">(<span class="params">obj, index</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> index === <span class="built_in">Number</span>(indexCollapse)</span><br><span class="line">            ? <span class="built_in">Object</span>.assign(obj, &#123; <span class="attr">isOpen</span>: !obj.isOpen &#125;)</span><br><span class="line">            : obj;</span><br><span class="line">        &#125;),</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;));</span><br></pre></td></tr></table></figure><h2 id="VS-Code"><a href="#VS-Code" class="headerlink" title="VS Code"></a>VS Code</h2><h3 id="回到上下一個工作"><a href="#回到上下一個工作" class="headerlink" title="回到上下一個工作"></a>回到上下一個工作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Mac:</span></span><br><span class="line">prev: Ctrl + -</span><br><span class="line">next: Ctrl + Shift + -</span><br></pre></td></tr></table></figure><h2 id="React-1"><a href="#React-1" class="headerlink" title="React"></a>React</h2><h3 id="ClassNames"><a href="#ClassNames" class="headerlink" title="ClassNames"></a>ClassNames</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div className=&#123;classNames(styles.xxxxx, styles.yyyyy, styles.zzzzz)&#125; /&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 《NOTE》 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Facebook - Comment Bot Review</title>
      <link href="/2018/08/22/Facebook-Comment-Bot/"/>
      <url>/2018/08/22/Facebook-Comment-Bot/</url>
      
        <content type="html"><![CDATA[<h2 id="說明"><a href="#說明" class="headerlink" title="說明"></a>說明</h2><ul><li>針對貼文，對留言進行回覆或私訊</li><li>第一件事：Webhook feed 與 粉絲專頁 /{page_id}/subscribed_apps</li><li>第二件事：對留言的　/{object-id}/comments 、 /{object-id}/private_replies</li><li>Webhook feed 的訂閱不須審核，但粉絲頁回覆和私訊則要審核</li><li>可以用不同的應用程式分別處理</li></ul><h2 id="需要審查的權限"><a href="#需要審查的權限" class="headerlink" title="需要審查的權限"></a>需要審查的權限</h2><h3 id="需要有以下三者權限的-Token"><a href="#需要有以下三者權限的-Token" class="headerlink" title="需要有以下三者權限的 Token"></a>需要有以下三者權限的 Token</h3><ul><li><a href="https://developers.facebook.com/docs/facebook-login/permissions/" target="_blank" rel="noopener">Permissions Reference</a></li><li>manage_pages - 管理粉絲頁</li><li>publish_pages - 對留言做回覆時，要有此發行訊息的權限</li><li>read_page_mailboxes - 使用粉絲頁信箱的權限，須搭配 manage_pages</li></ul><h2 id="Webhook-Page-Subscribed-Apps"><a href="#Webhook-Page-Subscribed-Apps" class="headerlink" title="Webhook - Page Subscribed Apps"></a>Webhook - Page Subscribed Apps</h2><ul><li><a href="https://developers.facebook.com/tools/explorer/" target="_blank" rel="noopener">圖形 API 測試工具</a></li></ul><ol><li>應用程式 → 選擇 Webhook 在的應用程式<br><img src="/assets/FacebookReview/1.PNG" alt="me" width="900px"></li><li>取得權杖 → 取得用戶權杖 → 選擇 manage_pages、pages_show_list、pages_messaging、pages_messaging_subscriptions<br><img src="/assets/FacebookReview/2.PNG" alt="me" width="900px"></li><li>粉絲專業存取權杖 → 選擇要訂閱的粉絲頁<br><img src="/assets/FacebookReview/3.PNG" alt="me" width="900px"></li><li>執行 POST /me/subscribed_apps 完成訂閱<br><img src="/assets/FacebookReview/4.PNG" alt="me" width="900px"></li><li>查看 GET /me/subscribed_apps</li><li>移除 DELETE /me/subscribed_apps</li><li>應用程式主控版 → Webhook → Edit Subscription<br><img src="/assets/FacebookReview/7.PNG" alt="me" width="900px"></li><li>feed → Subscribe<br><img src="/assets/FacebookReview/8.PNG" alt="me" width="900px"></li></ol><h2 id="Get-Token"><a href="#Get-Token" class="headerlink" title="Get Token"></a>Get Token</h2><ul><li><a href="https://developers.facebook.com/tools/explorer/" target="_blank" rel="noopener">圖形 API 測試工具</a></li></ul><ol><li>應用程式 → 選擇 Webhook 在的應用程式<br><img src="/assets/FacebookReview/1.PNG" alt="me" width="900px"></li><li>取得權杖 → 取得用戶權杖 → 選擇 manage_pages、publish_pages、read_page_mailboxes、pages_show_list<br><img src="/assets/FacebookReview/2-2.PNG" alt="me" width="900px"></li><li>粉絲專業存取權杖 → 選擇要訂閱的粉絲頁<br><img src="/assets/FacebookReview/3.PNG" alt="me" width="900px"></li><li>將其展延<br><img src="/assets/FacebookReview/2-4.PNG" alt="me" width="900px"><br><img src="/assets/FacebookReview/2-4-2.PNG" alt="me" width="900px"></li><li>Done！　此 Token 搭配 PHP cURL 或是 ASP.NET HttpWebRequest</li></ol><h2 id="公開-→-應用程式送審"><a href="#公開-→-應用程式送審" class="headerlink" title="公開 → 應用程式送審"></a>公開 → 應用程式送審</h2><ul><li>踩過的坑暫時沒寫出來，只記錄做法</li></ul><ol><li>審查需要提供網站給他們操作，故搭配 Nuxt.js + Element-UI 簡單寫一個<br><img src="/assets/FacebookReview/3-1.PNG" alt="me" width="900px"><br><img src="/assets/FacebookReview/3-2.PNG" alt="me" width="900px"></li><li>網站連結　：<a href="https://junxiang.webgene.com.tw/" target="_blank" rel="noopener">Facebook-ReplyConsole</a></li><li>原始碼連結：<a href="https://github.com/xTobu/Facebook-ReplyConsole" target="_blank" rel="noopener">GitHub</a></li><li><p>送審說明：</p><blockquote><p>publish_pages<br>為以粉絲專頁的身分對留言進行回覆，故需取得publish_pages、manage_pages</p><p>read_page_mailboxes<br>讓您能夠讀取用戶所管理粉絲專頁的粉絲專頁收件匣，為以粉絲專頁的身分對留言進行{obj-id}/private_replies，<br>故需取得read_page_mailboxes 、manage_pages</p><p>manage_pages 欲取得<br>1.管理使用者的粉絲專頁，取得token<br>2.為以粉絲專頁的身分發佈，故需取得publish_pages、manage_pages  </p></blockquote></li><li><p>送審原文：（三個權限都輸入一樣內容，測試帳號無填寫）</p><blockquote><p>主要功能是對文章的留言進行回覆的功能，<br>因應用程式的測試帳號無法建立粉絲頁，<br>故無提供測試帳號。</p><p>目的：<br>對文章的留言做回覆與私訊的功能</p><p>流程：</p><p>1.<br>登入並授權給應用程式<br>manage_pages,<br>publish_pages,<br>read_page_mailboxes,<br>pages_show_list</p><p>2.<br>取得可控制的粉絲頁列表</p><p>3.<br>選擇要使用的粉絲頁</p><p>4.<br>選擇目標的文章</p><p>5.<br>對文章內的留言進行回覆<br>obj-id / comments<br>( Scope: publish_pages )</p><p>6.<br>對文章內的留言進行私訊回覆<br>obj-id / private_replies<br>( Scope: read_page_mailboxes )</p></blockquote></li><li><p><a href="/assets/FacebookReview/Video.mp4" target="_blank">影片連結</a></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Facebook </tag>
            
            <tag> 回覆 </tag>
            
            <tag> 機器人 </tag>
            
            <tag> 留言 </tag>
            
            <tag> 私訊 </tag>
            
            <tag> Webhook </tag>
            
            <tag> Andy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Google App Engine Flexible for Golang + Cloud SQL for MySQL</title>
      <link href="/2018/08/22/Google-App-Engine-Flexible-for-Golang-Cloud-SQL-for-MySQL/"/>
      <url>/2018/08/22/Google-App-Engine-Flexible-for-Golang-Cloud-SQL-for-MySQL/</url>
      
        <content type="html"><![CDATA[<h2 id="Google-Cloud-Platform"><a href="#Google-Cloud-Platform" class="headerlink" title="Google Cloud Platform"></a>Google Cloud Platform</h2><ol><li>建立專案</li><li>開啟 App Engine</li><li>開啟 Cloud SQL for MySQL</li></ol><h2 id="Setting-up-Project-and-Application"><a href="#Setting-up-Project-and-Application" class="headerlink" title="Setting up Project and Application"></a>Setting up Project and Application</h2><ol><li>專案要放在 GOPATH</li><li>import 自己的資料夾時，路徑要寫完整 <code>&quot;TsiahPng-Golang/AppStart&quot;</code></li><li>安裝 GAE 套件 <code>go get -u google.golang.org/appengine</code></li><li><p>Add <code>appengine.Main()</code> 到 ./main.go</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    appstart <span class="string">"TsiahPng-Golang/AppStart"</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"google.golang.org/appengine"</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    appstart.RouteConfig()</span><br><span class="line">    appengine.Main()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Setting <strong>app.yaml</strong> file</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">runtime:</span> <span class="string">go</span></span><br><span class="line"><span class="attr">env:</span> <span class="string">flex</span></span><br><span class="line"></span><br><span class="line"><span class="attr">automatic_scaling:</span></span><br><span class="line"><span class="attr">    min_num_instances:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">resources:</span></span><br><span class="line"><span class="attr">    cpu:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">    memory_gb:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">    disk_size_gb:</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="attr">env_variables:</span></span><br><span class="line"><span class="attr">    CLOUD_CONNECTION:</span> <span class="string">"user:password@unix(/cloudsql/INSTANCE_CONNECTION_NAME)/dbname"</span></span><br><span class="line"><span class="attr">    PROJECT_ID:</span> <span class="string">"tsiahpng"</span></span><br><span class="line"><span class="attr">beta_settings:</span></span><br><span class="line"><span class="attr">    cloud_sql_instances:</span> <span class="string">"INSTANCE_CONNECTION_NAME"</span></span><br></pre></td></tr></table></figure><p>PS：</p><ul><li>resources -&gt; memory_gb：<a href="https://stackoverflow.com/questions/45719144/502-server-error-in-google-app-engine-flexible-when-load-testing-with-jmeter" target="_blank" rel="noopener">502 server error in Google App Engine Flexible</a></li></ul></li></ol><h2 id="Using-Cloud-SQL-for-MySQL"><a href="#Using-Cloud-SQL-for-MySQL" class="headerlink" title="Using Cloud SQL for MySQL"></a>Using Cloud SQL for MySQL</h2><ol><li><a href="https://cloud.google.com/appengine/docs/flexible/go/using-cloud-sql" target="_blank" rel="noopener">https://cloud.google.com/appengine/docs/flexible/go/using-cloud-sql</a></li><li>*important Before you begin → Enable the Cloud SQL API</li><li>Download Cloud SDK and Install</li><li><code>gcloud init</code></li><li><code>gcloud auth login</code></li><li><code>gcloud auth application-default login</code></li><li><code>gcloud config set project PROJECT_ID</code></li><li>OPTION: Run the proxy.<br><a href="https://dl.google.com/cloudsql/cloud_sql_proxy_x64.exe" target="_blank" rel="noopener">Download</a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./cloud_sql_proxy_x64.exe -instances=&lt;INSTANCE_CONNECTION_NAME&gt;=tcp:3306</span><br></pre></td></tr></table></figure></li></ol><h2 id="Deploy-to-App-Engine"><a href="#Deploy-to-App-Engine" class="headerlink" title="Deploy to App Engine"></a>Deploy to App Engine</h2><ul><li><p>發行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gcloud app deploy</span><br><span class="line">&lt;!-- if use bash with Windows --&gt;</span><br><span class="line">gcloud.cmd app deploy</span><br></pre></td></tr></table></figure></li><li><p>PS：</p><ul><li><a href="https://stackoverflow.com/questions/23433998/gcloud-not-recognized-as-an-internal-or-external-command-on-windows" target="_blank" rel="noopener">gcloud command not found windows</a></li></ul></li></ul><h2 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h2><ul><li>Log<ol><li>Google App Engine</li><li>服務 → 診斷 → 工具 → 紀錄</li></ol></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Back-end </tag>
            
            <tag> Golang </tag>
            
            <tag> Google App Engine </tag>
            
            <tag> GAE </tag>
            
            <tag> Cloud SQL </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>About Me</title>
      <link href="/2018/08/13/About-Me/"/>
      <url>/2018/08/13/About-Me/</url>
      
        <content type="html"><![CDATA[<!--## <font color="#028760">❀ 索引</font>-   [關於](#❀-ABOUT)-   [經驗](#❀-EXPERIENCE)-   [近期作品](#❀-RECENT-WORKS)-   [技能](#❀-SKILLS) --><h2 id="❀-Intro"><a href="#❀-Intro" class="headerlink" title="❀ Intro"></a><font color="#028760">❀ Intro</font></h2><p><img src="/assets/images/About/me.jpg" alt="me" width="350px" height="350px"></p><ul><li>姓名： 黃俊翔</li><li>生日： 1993 年 06 月 10 日</li><li>資歷： 3 年 3 個月</li><li>信箱： <a href="mailto:junxiang.oriint@gmail.com" target="_blank" rel="noopener">junxiang.oriint@gmail.com</a></li><li>社群： <a href="https://github.com/xTobu" target="_blank" style="font-weight:bold;color:#007bbb">GitHub</a>、<a href="https://xtobu.github.io/categories/LeetCode/" target="_blank" style="font-weight:bold">LeetCode</a>、<a href="https://xtobu.github.io/" target="_blank" style>Blog</a>、<a href="https://www.instagram.com/junxiang.h/" target="_blank" style>Instagram</a></li><li>關於：<ul><li><h3 id="Back-End"><a href="#Back-End" class="headerlink" title="Back-End"></a><font color="#007bbb">Back-End</font></h3></li><li>擅長 C#、.NET Web API、MVC、SignalR、Web Form</li><li>RESTful API 設計與實作，搭配 Swagger 建立規格文件</li><li>對 Golang 極富興趣，搭配 Gin 完成 CRUD + JWT 驗證</li><li>能夠使用 Node.js 與 Express 搭建輕量 RESTful API</li><li>雲端平台使用經驗（GCP、Azure、AWS）</li><li>熟悉 Facebook Graph API</li><li>能進行 PHP 基礎的錯誤排除</li><li><h3 id="Front-End"><a href="#Front-End" class="headerlink" title="Front-End"></a><font color="#007bbb">Front-End</font></h3></li><li>網站的互動工程、動態效果製作</li><li>各種 SDK 使用，如：Youtube、Instagram…等</li><li>熟練前端工具，如：jQuery、Webpack、Nuxt.js…等</li><li>知悉多種套件，如：TweenMax、Fabric、Create.js、Slick…等</li><li>以 Vue 為主攻的 MVVM 框架，Angular 和 React 有一定的了解</li><li>為了 Server Side Rendering 而學習 Node.js</li><li>搭配 Express 完成了 Isomorphic JavaScript 架構</li><li><h3 id="Else"><a href="#Else" class="headerlink" title="Else"></a><font color="#007bbb">Else</font></h3></li><li>以 Webduino、Arduino 與 Sensor、Firebase、Track.js<br>搭配大螢幕顯示 Website，完成人類辨識與臉部追蹤的實體裝置</li><li>Facebook AR Studio 擴增實境的研究與專案開發</li><li>訓練邏輯能力和通勤時很好用的 <a href="https://xtobu.github.io/categories/LeetCode/" target="_blank" style="font-weight:bold">LeetCode</a></li><li><h3 id="About-Me"><a href="#About-Me" class="headerlink" title="About Me"></a><font color="#007bbb">About Me</font></h3></li><li>實習 1 年、正職 2 年 3 個月</li><li>喜歡思考和面對問題，並熱忱於新技術的學習</li><li>追求更好，並具備實踐的積極性</li><li>相信人外有人，相信問題都存在更優秀的解決方式</li><li>喜歡烹飪、足球、音樂、健力三項、慢跑、Cruiser、散步</li><li>程式碼不是生活的全部</li></ul></li></ul><hr><h2 id="❀-Working-Experience"><a href="#❀-Working-Experience" class="headerlink" title="❀ Working Experience"></a><font color="#028760">❀ Working Experience</font></h2><h3 id="資工系助教"><a href="#資工系助教" class="headerlink" title="資工系助教"></a><font color="#007bbb">資工系助教</font></h3><ul><li>時間：2012 / 09 ~ 2014 / 06 ( 1 年 9 個月 )</li><li>職稱：C# 視窗程式設計 - TA</li><li>負責：<ul><li>協助教學方面的事務，如指導同學的問題、進行補救教學、<br>監考、成績的統計紀錄、教材準備等</li></ul></li></ul><h3 id="微星科技-Msi"><a href="#微星科技-Msi" class="headerlink" title="微星科技 Msi"></a><font color="#007bbb">微星科技 Msi</font></h3><ul><li>時間： 2014 / 06 ~ 2015 /06 ( 1 年 )</li><li>職稱： 網頁組 - ASP.NET Intern</li><li>負責：<ul><li>參與徵才系統的製作，<br>接收來自人力銀行的應徵資料，並對特殊需求做篩選，<br>再由 HR 管理，例如轉至部門主管的與否、內部文件的核章流程，<br>類似處理人力資源的 ERP 系統。</li><li>內部站與活動頁的製作與修改。</li></ul></li></ul><h3 id="網路基因-WebGene"><a href="#網路基因-WebGene" class="headerlink" title="網路基因 WebGene"></a><font color="#007bbb">網路基因 WebGene</font></h3><ul><li>時間： 2016 / 06 ~ 2018 /09 ( 2 年 3 個月 )</li><li>職稱： 技術部 - Web Developer</li><li>負責：<ul><li>ASP.NET Web API、MVC 的製作開發</li><li>搭配 SignalR 建立即時互動的網站</li><li>Front-End 的互動工程、動態效果製作、 SDK 使用<br>API 整合與串接、搭配各式套件營造更棒的使用者體驗</li><li>熟悉 Facebook Webhook 串接、Graph API 操作與送審流程</li><li>對各式各樣的天馬行空進行研究與解答</li><li>做好一位解決問題的人</li></ul></li></ul><hr><h2 id="❀-Recent-Projects"><a href="#❀-Recent-Projects" class="headerlink" title="❀ Recent Projects"></a><font color="#028760">❀ Recent Projects</font></h2><ul><li><h3 id="TsiahPng-中午吃什麼-Golang-Practice"><a href="#TsiahPng-中午吃什麼-Golang-Practice" class="headerlink" title="TsiahPng - 中午吃什麼 ( Golang Practice )"></a><font color="#007bbb">TsiahPng - 中午吃什麼 ( Golang Practice )</font></h3><blockquote><p>Development Site<br>隨機選擇午餐，後台新增餐廳<br>Golang、MySQL 的練習專案，建置於 GCP App Engine</p></blockquote><p><img src="/assets/images/About-Me/TsiahPng/0.PNG" alt="me" width="800px"><br><img src="/assets/images/About-Me/TsiahPng/1.PNG" alt="me" width="800px"><br><img src="/assets/images/About-Me/TsiahPng/2.PNG" alt="me" width="800px"><br><img src="/assets/images/About-Me/TsiahPng/3.PNG" alt="me" width="800px"></p><h4 id="資訊"><a href="#資訊" class="headerlink" title="資訊"></a>資訊</h4><h5 id="Site"><a href="#Site" class="headerlink" title="Site"></a>Site</h5><ul><li>連結：<a href="https://tsiahpng.azurewebsites.net/" target="_blank" rel="noopener">https://tsiahpng.azurewebsites.net/</a></li></ul><h5 id="Admin"><a href="#Admin" class="headerlink" title="Admin"></a>Admin</h5><ul><li>連結：<a href="https://tsiahpng.azurewebsites.net/admin/" target="_blank" rel="noopener">https://tsiahpng.azurewebsites.net/admin/</a></li><li>API：<a href="https://tsiahpng.appspot.com/" target="_blank" rel="noopener">https://tsiahpng.appspot.com/</a></li><li>帳號：admin</li><li>密碼：0000</li></ul><h5 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h5><ul><li>GitHub：<a href="https://github.com/xTobu/TsiahPng-Golang" target="_blank" rel="noopener">https://github.com/xTobu/TsiahPng-Golang</a></li></ul><h4 id="使用技術"><a href="#使用技術" class="headerlink" title="使用技術"></a>使用技術</h4><ul><li>Golang + Gin</li><li>JSON Web Token Auth</li><li>MySQL CRUD with Cloud SQL</li><li>Deploy on GCP App Engine</li></ul></li></ul><hr><ul><li><h3 id="Media-Tech-媒體科技大會-Admin"><a href="#Media-Tech-媒體科技大會-Admin" class="headerlink" title="Media Tech - 媒體科技大會 ( Admin )"></a><font color="#007bbb">Media Tech - 媒體科技大會 ( Admin )</font></h3><blockquote><p>Development Site<br>Media Tech 活動報名的後端<br>負責 API 設計與 Admin 的建置</p></blockquote><p><img src="/assets/images/About-Me/MediaTechAdmin/01.PNG" alt="me" width="800px"><br><img src="/assets/images/About-Me/MediaTechAdmin/02.PNG" alt="me" width="800px"><br><img src="/assets/images/About-Me/MediaTechAdmin/03.PNG" alt="me" width="800px"></p><h4 id="資訊-1"><a href="#資訊-1" class="headerlink" title="資訊"></a>資訊</h4><ul><li>網站連結：<a href="https://wg-mediatech.azurewebsites.net/admin/" target="_blank" rel="noopener">https://wg-mediatech.azurewebsites.net/admin/</a></li><li>帳號：admin</li><li>密碼：mediatech</li></ul><h4 id="使用技術-1"><a href="#使用技術-1" class="headerlink" title="使用技術"></a>使用技術</h4><ul><li>ASP.NET Web API + JWT Auth</li><li>Vue.js + Vuex + Vue-Element-Admin + Element-UI</li><li>API 串接 Axios + Promise + Try / Catch</li><li>Async / Await with forEach()</li><li>Deploy on Azure</li></ul></li></ul><hr><ul><li><h3 id="雪碧-沁涼絕殺-24-秒-for-Mobile"><a href="#雪碧-沁涼絕殺-24-秒-for-Mobile" class="headerlink" title="雪碧 沁涼絕殺 24 秒 ( for Mobile )"></a><font color="#007bbb">雪碧 沁涼絕殺 24 秒 ( for Mobile )</font></h3><blockquote><p>Development Site<br>雪碧活動的即時互動遊戲，一人投球，一人為籃框。<br>負責 SignalR 的設計、網頁前端的製作</p></blockquote><!-- <video width="600" controls><source src="/assets/images/About-Me/sprite.mp4" type="video/mp4"></video> --> <!-- <a href="/assets/images/About-Me/sprite/sprite.mp4" target="_blank">VIDEO LINK</a> --><p><img src="/assets/images/About-Me/sprite/main.png" alt="me" width="800px"></p><h4 id="資訊-2"><a href="#資訊-2" class="headerlink" title="資訊"></a>資訊</h4><ul><li>網站連結：<a href="https://wg-sprite.azurewebsites.net/2017coolgame24s" target="_blank" rel="noopener">https://wg-sprite.azurewebsites.net/2017coolgame24s</a></li><li>介紹影片：<a href="/assets/images/About-Me/sprite/sprite.mp4" target="_blank">Video Link</a></li></ul><h4 id="使用技術-2"><a href="#使用技術-2" class="headerlink" title="使用技術"></a>使用技術</h4><ul><li>使用 ASP.NET SignalR 對兩個裝置完成即時互動</li><li>Create.js + Easel.js 完成 Flash → HTML Canvas</li><li>Deploy on Azure</li></ul></li></ul><hr><ul><li><h3 id="Facebook-ReplyConsole-臉書權限審核用平台"><a href="#Facebook-ReplyConsole-臉書權限審核用平台" class="headerlink" title="Facebook ReplyConsole - 臉書權限審核用平台"></a><font color="#007bbb">Facebook ReplyConsole - 臉書權限審核用平台</font></h3><blockquote><p>Development Site<br>GAP 某活動在 Facebook 上的互動，為了審核回覆機器人的權限而製作的平台</p></blockquote><p><img src="/assets/images/About-Me/Facebook/01.PNG" alt="me" width="800px"><br><img src="/assets/images/About-Me/Facebook/02.PNG" alt="me" width="800px"><br><img src="/assets/images/About-Me/Facebook/03.PNG" alt="me" width="800px"></p><h4 id="資訊-3"><a href="#資訊-3" class="headerlink" title="資訊"></a>資訊</h4><ul><li>網站連結：<a href="https://junxiang.webgene.com.tw/" target="_blank" rel="noopener">https://junxiang.webgene.com.tw/</a></li></ul><h5 id="Source-Code-1"><a href="#Source-Code-1" class="headerlink" title="Source Code"></a>Source Code</h5><ul><li>GitHub：<a href="https://github.com/xTobu/Facebook-ReplyConsole" target="_blank" rel="noopener">https://github.com/xTobu/Facebook-ReplyConsole</a></li></ul><h4 id="使用技術-3"><a href="#使用技術-3" class="headerlink" title="使用技術"></a>使用技術</h4><ul><li>Vue.js + Nuxt.js + Element-UI</li><li>Facebook Graph API SDK</li></ul></li></ul><hr><ul><li><h3 id="DMA-數位奇點獎"><a href="#DMA-數位奇點獎" class="headerlink" title="DMA - 數位奇點獎"></a><font color="#007bbb">DMA - 數位奇點獎</font></h3><blockquote><p>Production Site<br>DMA 數位奇點獎的介紹站與登入後的報名與管理頁面<br>負責 Site 與 Admin 的製作</p></blockquote><p><img src="/assets/images/About-Me/DSA-DMA/01.png" alt="me" width="800px"><br><img src="/assets/images/About-Me/DSA-DMA/02.png" alt="me" width="800px"><br><img src="/assets/images/About-Me/DSA-DMA/03.png" alt="me" width="800px"></p><h4 id="資訊-4"><a href="#資訊-4" class="headerlink" title="資訊"></a>資訊</h4><ul><li>網站連結：<a href="https://www.dsaawards.com/2018/" target="_blank" rel="noopener">https://www.dsaawards.com/2018/</a></li></ul><h4 id="使用技術-4"><a href="#使用技術-4" class="headerlink" title="使用技術"></a>使用技術</h4><ul><li>API 串接 Axios + Async / Await</li><li>Vue.js + Vuex + Nuxt.js + Proxy Module</li><li>Create.js + Easel.js</li></ul></li></ul><hr><ul><li><h3 id="WildAid-野生救援-世界無翅宣言"><a href="#WildAid-野生救援-世界無翅宣言" class="headerlink" title="WildAid 野生救援 - 世界無翅宣言"></a><font color="#007bbb">WildAid 野生救援 - 世界無翅宣言</font></h3><blockquote><p>Production Site<br>WildAid 的官網<br>負責 Site 的製作與 Facebook SDK 的使用</p></blockquote><p><img src="/assets/images/About-Me/WildAid/01.PNG" alt="me" width="800px"><br><img src="/assets/images/About-Me/WildAid/03.PNG" alt="me" width="800px"><br><img src="/assets/images/About-Me/WildAid/02.PNG" alt="me" width="800px"></p><h4 id="資訊-5"><a href="#資訊-5" class="headerlink" title="資訊"></a>資訊</h4><ul><li>網站連結：<a href="https://www.globalsharkpledge.org/" target="_blank" rel="noopener">https://www.globalsharkpledge.org/</a></li></ul><h4 id="使用技術-5"><a href="#使用技術-5" class="headerlink" title="使用技術"></a>使用技術</h4><ul><li>Vue.js + vue-router + vue-i18n</li><li>Fabric、TweenMax、Mixitup、ScrollMagic、Modified Magnific</li></ul></li></ul><hr><ul><li><h3 id="兒童福利聯盟-長假營養廚房"><a href="#兒童福利聯盟-長假營養廚房" class="headerlink" title="兒童福利聯盟 - 長假營養廚房"></a><font color="#007bbb">兒童福利聯盟 - 長假營養廚房</font></h3><blockquote><p>Production Site<br>兒童福利聯盟的官網，2018 年版<br>負責 Site 的前端製作與 PHP API 的串接</p></blockquote><p><img src="/assets/images/About-Me/love/web01.png" alt="me" width="800px"><br><img src="/assets/images/About-Me/love/web02.png" alt="me" width="800px"><br><img src="/assets/images/About-Me/love/web11.png" alt="me" width="800px"></p><h4 id="資訊-6"><a href="#資訊-6" class="headerlink" title="資訊"></a>資訊</h4><ul><li>網站連結：<a href="http://cell2.webgene.com.tw/2018-lovechildren/" target="_blank" rel="noopener">http://cell2.webgene.com.tw/2018-lovechildren/</a></li></ul><h4 id="使用技術-6"><a href="#使用技術-6" class="headerlink" title="使用技術"></a>使用技術</h4><ul><li>Vue + vue-router + Pagination and Filter</li><li>TweenMax、ScrollReveal、Slick、Hammer、Magnific</li></ul></li></ul><hr><h2 id="❀-Skills"><a href="#❀-Skills" class="headerlink" title="❀ Skills"></a><font color="#028760">❀ Skills</font></h2><h3 id="Back-End-1"><a href="#Back-End-1" class="headerlink" title="Back-End"></a><font color="#007bbb">Back-End</font></h3><ul><li><strong>C# .NET Framework</strong><ul><li>Web API</li><li>MVC</li><li>Web Form</li></ul></li><li><strong>Golang</strong><ul><li>Gin</li></ul></li><li><strong>Node.js</strong><ul><li>Express</li></ul></li><li><strong>SQL</strong><ul><li>MS SQL Server</li><li>MySQL</li><li>Firebase</li></ul></li><li><strong>Cloud Platform</strong><ul><li>Google Cloud Platform</li><li>Microsoft Azure</li><li>Amazon Web Services</li></ul></li><li><strong>API Documentation</strong><ul><li>Swagger</li></ul></li></ul><h3 id="Front-End-1"><a href="#Front-End-1" class="headerlink" title="Front-End"></a><font color="#007bbb">Front-End</font></h3><ul><li><strong>Website</strong><ul><li>HTML、Pug</li><li>CSS、Sass</li><li>JavasScript、ECMAScript6</li><li>Webpack、Parcel</li></ul></li><li><strong>JS Framework</strong><ul><li>Vue、Nuxt</li><li>React</li><li>Angular</li></ul></li><li><strong>UI Library</strong><ul><li>Element</li><li>Ant Design</li></ul></li><li><strong>Third Party Library</strong><ul><li>jQuery</li><li>Fabric</li><li>TweenMax</li><li>Create.js</li><li>ScrollReveal</li><li>Slick</li><li>… etc.</li></ul></li></ul><hr>]]></content>
      
      
      
        <tags>
            
            <tag> Resume </tag>
            
            <tag> Portfolio </tag>
            
            <tag> 履歷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ⓁⒸ ‧‧‧ 22. Generate Parentheses</title>
      <link href="/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-22-Generate-Parentheses/"/>
      <url>/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-22-Generate-Parentheses/</url>
      
        <content type="html"><![CDATA[<h1 id="22-Generate-Parentheses-產生括號組"><a href="#22-Generate-Parentheses-產生括號組" class="headerlink" title="22. Generate Parentheses 產生括號組"></a><a href="https://leetcode.com/problems/generate-parentheses/description/" target="_blank" rel="noopener">22. Generate Parentheses 產生括號組</a></h1><h2 id="❀-Origin"><a href="#❀-Origin" class="headerlink" title="❀ Origin"></a>❀ Origin</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Given <em>n</em> pairs of parentheses, write a function to generate all combinations of well-formed parentheses.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Input: n = 3</span><br><span class="line">Output:</span><br><span class="line">[</span><br><span class="line">  &quot;((()))&quot;,</span><br><span class="line">  &quot;(()())&quot;,</span><br><span class="line">  &quot;(())()&quot;,</span><br><span class="line">  &quot;()(())&quot;,</span><br><span class="line">  &quot;()()()&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><hr><h2 id="❀-翻譯"><a href="#❀-翻譯" class="headerlink" title="❀ 翻譯"></a>❀ 翻譯</h2><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>給定 <em>n</em> 對的括號, 編寫一個函數來產生所有格式正確的括號的組合.</p><hr><h2 id="❀-Solution"><a href="#❀-Solution" class="headerlink" title="❀ Solution"></a>❀ Solution</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> generateParenthesis = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> arrResult = [];</span><br><span class="line">  <span class="comment">// let countRecurse = 0;</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">recurse</span>(<span class="params">current = <span class="string">""</span>, left = <span class="number">0</span>, right = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// countRecurse++</span></span><br><span class="line">    <span class="comment">// console.log('countRecurse: ',countRecurse,'｜','current :', current, '｜', left, right);</span></span><br><span class="line">    <span class="comment">// 等長度組到了 n*2 (括號長度為二) 的時候, 即可推到 arrResult</span></span><br><span class="line">    <span class="keyword">if</span> (current.length === <span class="number">2</span> * n) &#123;</span><br><span class="line">      arrResult.push(current);</span><br><span class="line">      <span class="comment">// console.log('== push and return ==');</span></span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (left &lt; n)</span><br><span class="line">      <span class="comment">// 追加 '(' , 並left + 1</span></span><br><span class="line">      recurse(current + <span class="string">"("</span>, left + <span class="number">1</span>, right);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (right &lt; left)</span><br><span class="line">      <span class="comment">// 判斷完 left &lt; n</span></span><br><span class="line">      <span class="comment">// 追加 ')' , 並left + 1</span></span><br><span class="line">      recurse(current + <span class="string">")"</span>, left, right + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 回傳結果</span></span><br><span class="line">    <span class="keyword">return</span> arrResult;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 執行遞迴</span></span><br><span class="line">  <span class="comment">// 回傳結果</span></span><br><span class="line">  <span class="keyword">return</span> recurse();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a>Idea</h3><ul><li><em>n</em> 代表每個元素會有 <em>n</em> 個 ‘(‘ 和 <em>n</em> 個 ‘)’</li><li>建立一個字串 <em>current</em> 來暫存還沒組合完成的括弧</li><li><em>current</em> 的長度等於 2 * <em>n</em> 時, 及代表正確括號, 即可推到結果陣列 <em>arrResult</em></li><li>使用遞迴, 先判斷 <em>left</em> 要小於 <em>n</em></li><li>判斷 <em>right</em> 小於 <em>left</em> , 才能滿足括號規則</li><li><a href="https://segmentfault.com/a/1190000013690046" target="_blank" rel="noopener">Ref. soleil 阿璐</a></li></ul><h3 id="Execution"><a href="#Execution" class="headerlink" title="Execution"></a>Execution</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">countRecurse:  1 ｜ current :  ｜ 0 0</span><br><span class="line">countRecurse:  2 ｜ current : ( ｜ 1 0</span><br><span class="line">countRecurse:  3 ｜ current : (( ｜ 2 0</span><br><span class="line">countRecurse:  4 ｜ current : ((( ｜ 3 0</span><br><span class="line">countRecurse:  5 ｜ current : ((() ｜ 3 1</span><br><span class="line">countRecurse:  6 ｜ current : ((()) ｜ 3 2</span><br><span class="line">countRecurse:  7 ｜ current : ((())) ｜ 3 3</span><br><span class="line">== push and return ==</span><br><span class="line">// 跳到 #3 的 right + 1 = 1 判斷</span><br><span class="line">===============================</span><br><span class="line"></span><br><span class="line">// right = 0 + 1</span><br><span class="line">// 遞迴先判斷 left 原則</span><br><span class="line">countRecurse:  8 ｜ current : (() ｜ 2 1</span><br><span class="line">countRecurse:  9 ｜ current : (()( ｜ 3 1</span><br><span class="line">countRecurse:  10 ｜ current : (()() ｜ 3 2</span><br><span class="line">countRecurse:  11 ｜ current : (()()) ｜ 3 3</span><br><span class="line">== push and return ==</span><br><span class="line">// 跳到 #3 的 right + 1 = 2 判斷</span><br><span class="line">===============================</span><br><span class="line"></span><br><span class="line">countRecurse:  12 ｜ current : (()) ｜ 2 2</span><br><span class="line">countRecurse:  13 ｜ current : (())( ｜ 3 2</span><br><span class="line">countRecurse:  14 ｜ current : (())() ｜ 3 3</span><br><span class="line">== push and return ==</span><br><span class="line">// 跳到 #2 的 right + 1 = 1 判斷</span><br><span class="line">===============================</span><br><span class="line"></span><br><span class="line">countRecurse:  15 ｜ current : () ｜ 1 1</span><br><span class="line">countRecurse:  16 ｜ current : ()( ｜ 2 1</span><br><span class="line">countRecurse:  17 ｜ current : ()(( ｜ 3 1</span><br><span class="line">countRecurse:  18 ｜ current : ()(() ｜ 3 2</span><br><span class="line">countRecurse:  19 ｜ current : ()(()) ｜ 3 3</span><br><span class="line">== push and return ==</span><br><span class="line">// 跳到 #16 的 right + 1 = 2 判斷</span><br><span class="line">===============================</span><br><span class="line"></span><br><span class="line">countRecurse:  20 ｜ current : ()() ｜ 2 2</span><br><span class="line">countRecurse:  21 ｜ current : ()()( ｜ 3 2</span><br><span class="line">countRecurse:  22 ｜ current : ()()() ｜ 3 3</span><br><span class="line">== push and return ==</span><br><span class="line">// 因為要滿足 right &lt; left</span><br><span class="line">// 故輸出結果</span><br><span class="line"></span><br><span class="line">[ &apos;((()))&apos;, &apos;(()())&apos;, &apos;(())()&apos;, &apos;()(())&apos;, &apos;()()()&apos; ]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> LeetCode </tag>
            
            <tag> Recursive </tag>
            
            <tag> ⓁⒸ - Medium </tag>
            
            <tag> ⭐⭐ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ⓁⒸ ‧‧‧ 347. Top K Frequent Elements</title>
      <link href="/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-347-Top-K-Frequent-Elements/"/>
      <url>/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-347-Top-K-Frequent-Elements/</url>
      
        <content type="html"><![CDATA[<h1 id="347-Top-K-Frequent-Elements-前-K-個頻繁出現的元素"><a href="#347-Top-K-Frequent-Elements-前-K-個頻繁出現的元素" class="headerlink" title="347. Top K Frequent Elements 前 K 個頻繁出現的元素"></a><a href="https://leetcode.com/problems/top-k-frequent-elements/description/" target="_blank" rel="noopener">347. Top K Frequent Elements 前 K 個頻繁出現的元素</a></h1><h2 id="❀-Origin"><a href="#❀-Origin" class="headerlink" title="❀ Origin"></a>❀ Origin</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Given a non-empty array of integers, return the <strong>k</strong> most frequent elements.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input:  nums = [1,1,1,2,2,3], k = 2</span><br><span class="line">Output: [1,2]</span><br></pre></td></tr></table></figure><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><ul><li>You may assume _k_ is always valid, 1 ≤ _k_ ≤ number of unique elements.</li><li>Your algorithm’s time complexity <strong>must be</strong> better than O(<em>n</em> log <em>n</em>), where <em>n</em> is the array’s size.</li></ul><hr><h2 id="❀-翻譯"><a href="#❀-翻譯" class="headerlink" title="❀ 翻譯"></a>❀ 翻譯</h2><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>給定一個非空的整數陣列, 回傳 <strong>k</strong> 個最頻繁出現的元素.</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>你可以假設 _k_ 始終有效, 1 ≤ _k_ ≤ 獨一無二的元素的數量</li><li>你算法的時間複雜度<strong>必須</strong>優於 O(<em>n</em> log <em>n</em>), 其中 <em>n</em> 是陣列的大小.</li></ul><hr><h2 id="❀-Solution"><a href="#❀-Solution" class="headerlink" title="❀ Solution"></a>❀ Solution</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; k</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> topKFrequent = <span class="function"><span class="keyword">function</span>(<span class="params">nums, k</span>) </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用 obj 或 Map() 的方式來計算每個元素出現了幾次</span></span><br><span class="line"><span class="comment"> * 將陣列元素的值當作物件 obj 的 key ( obj[value] )</span></span><br><span class="line"><span class="comment"> * obj 的 value 則為次數</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> freqs = nums.reduce(<span class="function">(<span class="params">obj, value</span>) =&gt;</span> &#123;</span><br><span class="line">obj[value] = obj[value] + <span class="number">1</span> || <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> obj;</span><br><span class="line">&#125;, &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用 freqs 新建一個 Object.keys()</span></span><br><span class="line"><span class="comment"> * 並搭配 freqs 做排序</span></span><br><span class="line"><span class="comment"> * 之後以 slice() 取到目標數量 k</span></span><br><span class="line"><span class="comment"> * 再用 map() 整理新的陣列,</span></span><br><span class="line"><span class="comment"> * 因為Object.keys()的關係, 故用 Number(key) 傳入 key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Object</span>.keys(freqs)</span><br><span class="line">.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> freqs[b] - freqs[a])</span><br><span class="line">.slice(<span class="number">0</span>, k)</span><br><span class="line">.map(<span class="function"><span class="params">key</span> =&gt;</span> <span class="built_in">Number</span>(key));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> nums = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> k = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(topKFrequent(nums, k));</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 別種方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// var topKFrequent = function(nums, k) &#123;</span></span><br><span class="line"><span class="comment">// var hash = &#123;&#125;,</span></span><br><span class="line"><span class="comment">// res = [];</span></span><br><span class="line"><span class="comment">// nums.forEach(function(value) &#123;</span></span><br><span class="line"><span class="comment">// hash[value] = hash[value] + 1 || 1;</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// Object.keys(hash)</span></span><br><span class="line"><span class="comment">// .sort(function(a, b) &#123;</span></span><br><span class="line"><span class="comment">// return hash[b] - hash[a];</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="comment">// .slice(0, k)</span></span><br><span class="line"><span class="comment">// .forEach(function(x) &#123;</span></span><br><span class="line"><span class="comment">// res.push(parseInt(x));</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">// return res;</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// var topKFrequent = function(nums, k) &#123;</span></span><br><span class="line"><span class="comment">//     const freqs = nums.reduce((map, value) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//         if(map.has(value)) &#123;</span></span><br><span class="line"><span class="comment">//             map.set(value, map.get(value) + 1)</span></span><br><span class="line"><span class="comment">//         &#125; else &#123;</span></span><br><span class="line"><span class="comment">//             map.set(value, 1)</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//         return map;</span></span><br><span class="line"><span class="comment">//     &#125;, new Map());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     return Array</span></span><br><span class="line"><span class="comment">//         .from(freqs.entries())</span></span><br><span class="line"><span class="comment">//         .sort((entry1, entry2) =&gt; entry2[1] - entry1[1])</span></span><br><span class="line"><span class="comment">//         .slice(0,k)</span></span><br><span class="line"><span class="comment">//         .map(entry =&gt; entry[0])</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ⭐ </tag>
            
            <tag> Array.reduce() </tag>
            
            <tag> ⓁⒸ - Medium </tag>
            
            <tag> Array.sort() </tag>
            
            <tag> Array.slice() </tag>
            
            <tag> Array.map() </tag>
            
            <tag> Object.keys() </tag>
            
            <tag> Map() </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ⓁⒸ ‧‧‧ 238. Product of Array Except Self</title>
      <link href="/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-238-Product-of-Array-Except-Self/"/>
      <url>/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-238-Product-of-Array-Except-Self/</url>
      
        <content type="html"><![CDATA[<h1 id="238-Product-of-Array-Except-Self-除了自身以外的陣列乘積"><a href="#238-Product-of-Array-Except-Self-除了自身以外的陣列乘積" class="headerlink" title="238. Product of Array Except Self 除了自身以外的陣列乘積"></a><a href="https://leetcode.com/problems/product-of-array-except-self/description/" target="_blank" rel="noopener">238. Product of Array Except Self 除了自身以外的陣列乘積</a></h1><h2 id="❀-Origin"><a href="#❀-Origin" class="headerlink" title="❀ Origin"></a>❀ Origin</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Given an array <code>nums</code> of n integers where <em>n</em> &gt; 1,<br>return an array <code>output</code> such that <code>output[i]</code> is equal to the product of all the elements of <code>nums</code> except <code>nums[i]</code>.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input:  [1,2,3,4]</span><br><span class="line">Output: [24,12,8,6]</span><br></pre></td></tr></table></figure><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p>Please solve it <strong>without division</strong> and in O(<em>n</em>).</p><h3 id="Follow-up"><a href="#Follow-up" class="headerlink" title="Follow up"></a>Follow up</h3><p>Could you solve it with constant space complexity?<br>(The output array <strong>does not</strong> count as extra space for the purpose of space complexity analysis.)</p><hr><h2 id="❀-翻譯"><a href="#❀-翻譯" class="headerlink" title="❀ 翻譯"></a>❀ 翻譯</h2><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>給定一個整數 <em>n</em> &gt; 1 的陣列 <code>nums</code> ,<br>回傳一個陣列 <code>output</code> , 且 <code>output[i]</code> 是等於 <code>nums</code> 裡每一個數除了 <code>nums[i]</code> 以外的乘積.</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>請用沒有<strong>除法</strong>且時間複雜度 O(<em>n</em>) 的方式解決.</p><h3 id="後續"><a href="#後續" class="headerlink" title="後續"></a>後續</h3><p>你可以滿足常數空間複雜度地解決嗎?<br>(出於空間複雜度分析的目的, 輸出陣列<strong>不會</strong>被當作額外空間)</p><hr><h2 id="❀-Solution"><a href="#❀-Solution" class="headerlink" title="❀ Solution"></a>❀ Solution</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * nums = [a, b, c, d] = [1, 2, 3, 4]</span></span><br><span class="line"><span class="comment"> * output = [b*c*d, a*c*d, a*b*d, a*b*c]</span></span><br><span class="line"><span class="comment"> * 往左乘 [1,       a, a*b, a*b*c] = [1 , 1 , 2, 6]</span></span><br><span class="line"><span class="comment"> * 往右乘 [b*c*d, c*d,   d,    1]  = [24, 12, 4, 1]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> productExceptSelf = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (nums.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> nums;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> length = nums.length;</span><br><span class="line"><span class="keyword">let</span> arrResult = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"><span class="keyword">let</span> leftProduct = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> rightProduct = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先從左至右, 算往左乘的乘積</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">arrResult[i] = leftProduct;</span><br><span class="line">leftProduct *= nums[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 從右至左, 算往右的乘積, 並與往左的乘積相乘</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> j = length - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">arrResult[j] *= rightProduct;</span><br><span class="line">rightProduct *= nums[j];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> arrResult;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(productExceptSelf([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ⭐ </tag>
            
            <tag> ⓁⒸ - Medium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ⓁⒸ ‧‧‧ 94. Binary Tree Inorder Traversal</title>
      <link href="/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-94-Binary-Tree-Inorder-Traversal/"/>
      <url>/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-94-Binary-Tree-Inorder-Traversal/</url>
      
        <content type="html"><![CDATA[<h1 id="94-Binary-Tree-Inorder-Traversal-二元樹中序遍歷"><a href="#94-Binary-Tree-Inorder-Traversal-二元樹中序遍歷" class="headerlink" title="94. Binary Tree Inorder Traversal 二元樹中序遍歷"></a><a href="https://leetcode.com/problems/binary-tree-inorder-traversal/description/" target="_blank" rel="noopener">94. Binary Tree Inorder Traversal 二元樹中序遍歷</a></h1><blockquote><p>前中後序遍歷，參考：<a href="https://www.jianshu.com/p/456af5480cee" target="_blank" rel="noopener">https://www.jianshu.com/p/456af5480cee</a><br>使用堆疊的方式做二元樹遍歷</p></blockquote><h2 id="❀-Origin"><a href="#❀-Origin" class="headerlink" title="❀ Origin"></a>❀ Origin</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Given a binary tree, return the <em>inorder</em> traversal of its nodes’ values.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,null,2,3]</span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    /</span><br><span class="line">   3</span><br><span class="line"></span><br><span class="line">Output: [1,3,2]</span><br></pre></td></tr></table></figure><h3 id="Follow-up"><a href="#Follow-up" class="headerlink" title="Follow up"></a>Follow up</h3><p>Recursive solution is trivial, could you do it iteratively?</p><hr><h2 id="❀-翻譯"><a href="#❀-翻譯" class="headerlink" title="❀ 翻譯"></a>❀ 翻譯</h2><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>給定一個二元樹, 回傳其中序遍歷的節點的值.</p><h3 id="後續"><a href="#後續" class="headerlink" title="後續"></a>後續</h3><p>遞迴的解法並沒有什麼, 你能用迭代帶來處理嗎?</p><hr><h2 id="❀-Solution"><a href="#❀-Solution" class="headerlink" title="❀ Solution"></a>❀ Solution</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 二元樹迭代遍歷, 搭配 stack 堆疊</span></span><br><span class="line"><span class="comment">// 參考：https://www.jianshu.com/p/456af5480cee</span></span><br><span class="line"><span class="keyword">var</span> inorderTraversal = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> result = [];</span><br><span class="line"><span class="keyword">let</span> stack = [];</span><br><span class="line"><span class="comment">// 判斷root樹是否為 null, 或是 stack 的長度大於 0</span></span><br><span class="line"><span class="keyword">while</span> (root !== <span class="literal">null</span> || stack.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (root) &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果該樹 root 不是空值,</span></span><br><span class="line"><span class="comment"> * 便將 root 推入 stack ,</span></span><br><span class="line"><span class="comment"> * 將原本的 root 賦值 root.left,</span></span><br><span class="line"><span class="comment"> * 繼續 while</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">stack.push(root);</span><br><span class="line">root = root.left;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果進來這裡,</span></span><br><span class="line"><span class="comment"> * 代表 root 沒有值,但stack.length &gt; 0</span></span><br><span class="line"><span class="comment"> * 也就是說這裡是最左邊</span></span><br><span class="line"><span class="comment"> * 於是用 root = stack.pop();</span></span><br><span class="line"><span class="comment"> * 將 root 改成 stack 的最後一個元素, 並將 stack 的最後一個元素刪除</span></span><br><span class="line"><span class="comment"> * 之後將當下 root 值推到結果陣列 result , 即為中序遍歷的左子樹優先原則</span></span><br><span class="line"><span class="comment"> * 推完 result.push(root.val); 後</span></span><br><span class="line"><span class="comment"> * 再將 root = root.right;</span></span><br><span class="line"><span class="comment"> * 繼續 while</span></span><br><span class="line"><span class="comment"> * 繼續 從左子樹開始找</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">root = stack.pop();</span><br><span class="line">result.push(root.val);</span><br><span class="line">root = root.right;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="JavaScript-II"><a href="#JavaScript-II" class="headerlink" title="JavaScript II"></a>JavaScript II</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 遞迴解法</span></span><br><span class="line"><span class="comment"> * 最後回傳 result</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 中序遍歷,</span></span><br><span class="line"><span class="comment"> * 因此以左子樹為優先</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> inorderTraversal = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> result = [];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inOrder</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (node) &#123;</span><br><span class="line">inOrder(node.left);</span><br><span class="line">result.push(node.val);</span><br><span class="line">inOrder(node.right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">inOrder(root);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ☄️ </tag>
            
            <tag> ⭐ </tag>
            
            <tag> Recursive </tag>
            
            <tag> ⓁⒸ - Medium </tag>
            
            <tag> Iteratively </tag>
            
            <tag> Stack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ⓁⒸ ‧‧‧ 448. Find All Numbers Disappeared in an Array</title>
      <link href="/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-448-Find-All-Numbers-Disappeared-in-an-Array/"/>
      <url>/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-448-Find-All-Numbers-Disappeared-in-an-Array/</url>
      
        <content type="html"><![CDATA[<h1 id="448-Find-All-Numbers-Disappeared-in-an-Array-找出所有消失在陣列裡的數字"><a href="#448-Find-All-Numbers-Disappeared-in-an-Array-找出所有消失在陣列裡的數字" class="headerlink" title="448. Find All Numbers Disappeared in an Array 找出所有消失在陣列裡的數字"></a><a href="https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array/description/" target="_blank" rel="noopener">448. Find All Numbers Disappeared in an Array 找出所有消失在陣列裡的數字</a></h1><blockquote><p>算法二很有趣, 找缺少數的問題可以應用</p></blockquote><h2 id="❀-Origin"><a href="#❀-Origin" class="headerlink" title="❀ Origin"></a>❀ Origin</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Given an array of integers where 1 ≤ a[i] ≤ <em>n</em> (<em>n</em> = size of array),<br>some elements appear twice and others appear once.</p><p>Find all the elements of [1, <em>n</em>] inclusive that do not appear in this array.</p><p>Could you do it without extra space and in O(<em>n</em>) runtime?<br>You may assume the returned list does not count as extra space.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">[4,3,2,7,8,2,3,1]</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">[5,6]</span><br></pre></td></tr></table></figure><hr><h2 id="❀-翻譯"><a href="#❀-翻譯" class="headerlink" title="❀ 翻譯"></a>❀ 翻譯</h2><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>給定一個整數陣列, 其中值的範圍在 1 ≤ a[i] ≤ <em>n</em> (<em>n</em> 等於陣列長度),<br>有些元素出現兩次, 其他則出現一次.</p><p>找出所有包含在 [1, <em>n</em>] 裡但沒有出現在這個陣列裡的所有元素.</p><p>你可以做到沒有額外空間並且時間複雜度為 O(<em>n</em>) 嗎?<br>你可以認為那個回傳答案的陣列不算入額外空間.</p><hr><h2 id="❀-Solution"><a href="#❀-Solution" class="headerlink" title="❀ Solution"></a>❀ Solution</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 第一種寫法</span></span><br><span class="line"><span class="comment"> * nums.indexOf(i) 的能太差,</span></span><br><span class="line"><span class="comment"> * 在leetcode上只落在倒數的答案,</span></span><br><span class="line"><span class="comment"> * 母湯, 趕緊爬文</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> findDisappearedNumbers = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> res = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; nums.length + <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (nums.indexOf(i) === <span class="number">-1</span>) res.push(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="JavaScript-II"><a href="#JavaScript-II" class="headerlink" title="JavaScript II"></a>JavaScript II</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 第二種寫法</span></span><br><span class="line"><span class="comment"> * 參考 leetcode 此題第一名的寫法</span></span><br><span class="line"><span class="comment"> *  依題意, 有些數字會出現兩次, 有些一次, 要找出缺少的數字</span></span><br><span class="line"><span class="comment"> *  因此第一名的寫法使用正負關係搭配絕對值, 實在很強</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findDisappearedNumbers = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line"><span class="keyword">const</span> result = [];</span><br><span class="line"><span class="comment">// 因為nums裡的值會是 1 ≤ a[i] ≤ nums.length 的陣列</span></span><br><span class="line"><span class="comment">// 所以不一定要整理, 直接找出該數應該在整理後的陣列的位置</span></span><br><span class="line"><span class="comment">// index = Math.abs(nums[i]) - 1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line"><span class="comment">// nums[i] 取絕對值, 並 -1 ,</span></span><br><span class="line"><span class="comment">// 找出該數應該在整理後的陣列的位置</span></span><br><span class="line"><span class="keyword">const</span> index = <span class="built_in">Math</span>.abs(nums[i]) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log('index', index, 'nums[index]', nums[index]);</span></span><br><span class="line"><span class="comment">// console.log('');</span></span><br><span class="line"><span class="comment">// 使用正負搭配絕對值, 是因為迴圈跑到那數字時, 還要去找那數字的應該存在的位置,</span></span><br><span class="line"><span class="comment">// 用負數, 比較像是個畫記號的概念, 實在是太ㄎㄧㄠˋ了</span></span><br><span class="line"><span class="keyword">if</span> (nums[index] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">nums[index] = -nums[index];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// console.log('nums', nums);</span></span><br><span class="line"><span class="comment">// console.log('---');</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 當上面的程式執行完, 剩下的正數的位置便代表沒被轉換過的數, 即是缺少的數</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">// 因為題意是 1 ≤ a[i] ≤ nums.length ,</span></span><br><span class="line"><span class="comment">// 故找出位置後, 還要 +1 , 才是缺少的那個數字</span></span><br><span class="line">result.push(i + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(findDisappearedNumbers([<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">8</span>]));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ⓁⒸ - Easy </tag>
            
            <tag> ☄️ </tag>
            
            <tag> ⭐ </tag>
            
            <tag> Array.indexOf() </tag>
            
            <tag> Math.abs() </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ⓁⒸ ‧‧‧ 226. Invert Binary Tree</title>
      <link href="/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-226-Invert-Binary-Tree/"/>
      <url>/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-226-Invert-Binary-Tree/</url>
      
        <content type="html"><![CDATA[<h1 id="226-Invert-Binary-Tree-反轉二元樹"><a href="#226-Invert-Binary-Tree-反轉二元樹" class="headerlink" title="226. Invert Binary Tree 反轉二元樹"></a><a href="https://leetcode.com/problems/invert-binary-tree/description/" target="_blank" rel="noopener">226. Invert Binary Tree 反轉二元樹</a></h1><h2 id="❀-Origin"><a href="#❀-Origin" class="headerlink" title="❀ Origin"></a>❀ Origin</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Invert a binary tree.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line"></span><br><span class="line">     4</span><br><span class="line">   /   \</span><br><span class="line">  2     7</span><br><span class="line"> / \   / \</span><br><span class="line">1   3 6   9</span><br><span class="line">Output:</span><br><span class="line"></span><br><span class="line">     4</span><br><span class="line">   /   \</span><br><span class="line">  7     2</span><br><span class="line"> / \   / \</span><br><span class="line">9   6 3   1</span><br></pre></td></tr></table></figure><h3 id="Trivia"><a href="#Trivia" class="headerlink" title="Trivia"></a>Trivia</h3><p>This problem was inspired by this original tweet by Max Howell:</p><blockquote><p>Google:<br>90% of our engineers use the software you wrote (Homebrew),<br>but you can’t invert a binary tree on a whiteboard so f*** off.</p></blockquote><hr><h2 id="❀-翻譯"><a href="#❀-翻譯" class="headerlink" title="❀ 翻譯"></a>❀ 翻譯</h2><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>反轉一個二元樹.</p><h3 id="細故"><a href="#細故" class="headerlink" title="細故"></a>細故</h3><p>此問題的發想源自這個 Max Howell 的 tweet :</p><blockquote><p>Google:<br>我們 90% 的工程師都使用你寫的軟體 (Homebrew),<br>但你卻沒有辦法在白板上反轉二元樹, 所以 f*** off.</p></blockquote><hr><h2 id="❀-Solution"><a href="#❀-Solution" class="headerlink" title="❀ Solution"></a>❀ Solution</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;TreeNode&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// Original Tree</span></span><br><span class="line"><span class="comment">//      4</span></span><br><span class="line"><span class="comment">//    /   \</span></span><br><span class="line"><span class="comment">//   2     7</span></span><br><span class="line"><span class="comment">//  / \   / \</span></span><br><span class="line"><span class="comment">// 1   3 6   9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 反轉二元樹</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 和以前遍歷二元樹的方式一樣, 用遞迴.</span></span><br><span class="line"><span class="comment"> * 反轉的意思是 左 -&gt; 右 , 右 -&gt; 左 .</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 解題思路是判斷當前 root 是否為 null,</span></span><br><span class="line"><span class="comment"> * 如果是, 就回傳 null.</span></span><br><span class="line"><span class="comment"> * 如果不是, 變開始反轉.</span></span><br><span class="line"><span class="comment"> * 建立一個 child 的子節點,</span></span><br><span class="line"><span class="comment"> * 再將 child 的左右子樹做 invertTree 的遞迴後互換,</span></span><br><span class="line"><span class="comment"> * 最後回傳 child .</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * ( 也可以只建立一個 tempLeft ,</span></span><br><span class="line"><span class="comment"> *   之後再將他做 invertTree 遞迴後放入 child.right ,</span></span><br><span class="line"><span class="comment"> *   但我喜歡這樣, 對我閱讀上更直覺一些 )</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> invertTree = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root !== <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> child = <span class="keyword">new</span> TreeNode(root.val);</span><br><span class="line">child.left = invertTree(root.right);</span><br><span class="line">child.right = invertTree(root.left);</span><br><span class="line"><span class="keyword">return</span> child;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(invertTree(tree));</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ⓁⒸ - Easy </tag>
            
            <tag> ☄️ </tag>
            
            <tag> Binary Tree </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ⓁⒸ ‧‧‧ 647. Palindromic Substrings</title>
      <link href="/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-647-Palindromic-Substrings/"/>
      <url>/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-647-Palindromic-Substrings/</url>
      
        <content type="html"><![CDATA[<h1 id="647-Palindromic-Substrings-回文子串"><a href="#647-Palindromic-Substrings-回文子串" class="headerlink" title="647. Palindromic Substrings 回文子串"></a><a href="https://leetcode.com/problems/palindromic-substrings/description/" target="_blank" rel="noopener">647. Palindromic Substrings 回文子串</a></h1><h2 id="❀-Origin"><a href="#❀-Origin" class="headerlink" title="❀ Origin"></a>❀ Origin</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Given a string, your task is to count how many palindromic substrings in this string.<br>The substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.</p><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><ol><li>The input string length won’t exceed 1000.</li></ol><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;abc&quot;</span><br><span class="line">Output: 3</span><br><span class="line">Explanation: Three palindromic strings: &quot;a&quot;, &quot;b&quot;, &quot;c&quot;.</span><br></pre></td></tr></table></figure><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;aaa&quot;</span><br><span class="line">Output: 6</span><br><span class="line">Explanation: Six palindromic strings: &quot;a&quot;, &quot;a&quot;, &quot;a&quot;, &quot;aa&quot;, &quot;aa&quot;, &quot;aaa&quot;.</span><br></pre></td></tr></table></figure><hr><h2 id="❀-翻譯"><a href="#❀-翻譯" class="headerlink" title="❀ 翻譯"></a>❀ 翻譯</h2><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>給定一個字串, 你的任務是算出這個字串裡有幾個回文子串.<br>具有不同起始位置和結束位置的子字串符會被計算成不同的子字串, 即使他們包含著相同的字元.</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>輸入字串的長度不會超過 1000.</li></ol><hr><h2 id="❀-Solution"><a href="#❀-Solution" class="headerlink" title="❀ Solution"></a>❀ Solution</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> countSubstrings = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> len = s.length;</span><br><span class="line"><span class="keyword">let</span> result_count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用 substr(start, length)</span></span><br><span class="line"><span class="comment"> * 把所有可能的字串找出來,</span></span><br><span class="line"><span class="comment"> * 再用 isPalindrome 判斷是不是回文子串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> length = <span class="number">1</span>; length &lt;= s.length; length++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> start = <span class="number">0</span>; start &lt;= s.length - length; start++) &#123;</span><br><span class="line"><span class="keyword">let</span> newStr = s.substr(start, length);</span><br><span class="line"><span class="keyword">if</span> (isPalindrome(newStr)) result_count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result_count;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判斷字串是不是回文子串</span></span><br><span class="line"><span class="comment"> * 用鏡面位置去判斷是不是對稱,</span></span><br><span class="line"><span class="comment"> * 跑完都一樣就回傳 true</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> isPalindrome = <span class="function">(<span class="params">str</span>)=&gt;</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= str.length - i - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (str[i] !== str[str.length - i - <span class="number">1</span>]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// if(str !==str.split('').reverse().join(''))&#123;</span></span><br><span class="line">    <span class="comment">//     return false;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// return true;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(countSubstrings(<span class="string">'abcba'</span>));</span><br></pre></td></tr></table></figure><h3 id="JavaScript-II"><a href="#JavaScript-II" class="headerlink" title="JavaScript II"></a>JavaScript II</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Manacher's Algorithm</span></span><br><span class="line"><span class="comment"> * 還沒搞懂 好難</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> countSubstrings = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    s = preprocess(s);</span><br><span class="line">    <span class="built_in">console</span>.log(s);</span><br><span class="line"><span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line"><span class="keyword">let</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (j &lt; s.length - i &amp;&amp; i &gt;= j &amp;&amp; s[i + j] === s[i - j]) &#123;</span><br><span class="line"><span class="comment">//console.log(j);</span></span><br><span class="line">j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'j/2: '</span>, <span class="built_in">Math</span>.trunc(j / <span class="number">2</span>));</span><br><span class="line">        result += <span class="built_in">Math</span>.trunc(j / <span class="number">2</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> preprocess = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'#'</span> + s.split(<span class="string">''</span>).join(<span class="string">'#'</span>) + <span class="string">'#'</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(countSubstrings(<span class="string">'12212321'</span>));</span><br></pre></td></tr></table></figure><h3 id="JavaScript-III"><a href="#JavaScript-III" class="headerlink" title="JavaScript III"></a>JavaScript III</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * LeetCode官方解答上最快的寫法, 感覺懂又不懂.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 先以 i 為圓心算完後, 再以 i 和 i+1 的中心為圓心,</span></span><br><span class="line"><span class="comment"> * 這邊不太懂.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 先以 i 為圓心, 往外擴展去判斷</span></span><br><span class="line"><span class="comment"> * 再以 i 和 i+1 的中心為圓心, 往外擴展去判斷</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 應該是基數長度與偶數長度的關係 目前未全部搞懂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> countSubstrings = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'i'</span>, i);</span><br><span class="line">cnt += countPalindrome(s, i, i) + countPalindrome(s, i, i + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用start, end當圓心去擴展, 判斷 str[start] === str[end] 是否一樣, 回傳回文子串的數量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countPalindrome</span>(<span class="params">str, start, end</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 起始位置 start 不能比 0 小</span></span><br><span class="line"><span class="comment"> * 結束位置 end 不能大於字串 str 的長度</span></span><br><span class="line"><span class="comment"> *  str[start] === str[end]</span></span><br><span class="line"><span class="comment"> * 上面三點才滿足回文字串的條件</span></span><br><span class="line"><span class="comment"> * 因為判斷東西多, 用 while 會比較好寫</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">while</span> (start &gt;= <span class="number">0</span> &amp;&amp; end &lt; str.length &amp;&amp; str[start] === str[end]) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'start, end'</span>, start, end);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 往左一個位置</span></span><br><span class="line">start--;</span><br><span class="line"><span class="comment">// 往右一個位置</span></span><br><span class="line">end++;</span><br><span class="line"><span class="comment">// 回文字串數量加一</span></span><br><span class="line">count++;</span><br><span class="line"></span><br><span class="line"><span class="comment">//繼續尋找回文子串</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(countSubstrings(<span class="string">'abcdcba'</span>));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ⭐ </tag>
            
            <tag> Recursive </tag>
            
            <tag> ⓁⒸ - Medium </tag>
            
            <tag> ⭐⭐ </tag>
            
            <tag> String.substr() </tag>
            
            <tag> Manacher </tag>
            
            <tag> Math.trunc() </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ⓁⒸ ‧‧‧ 104. Maximum Depth of Binary Tree</title>
      <link href="/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-104-Maximum-Depth-of-Binary-Tree/"/>
      <url>/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-104-Maximum-Depth-of-Binary-Tree/</url>
      
        <content type="html"><![CDATA[<h1 id="104-Maximum-Depth-of-Binary-Tree-二元樹最大深度"><a href="#104-Maximum-Depth-of-Binary-Tree-二元樹最大深度" class="headerlink" title="104. Maximum Depth of Binary Tree 二元樹最大深度"></a><a href="https://leetcode.com/problems/maximum-depth-of-binary-tree/description/" target="_blank" rel="noopener">104. Maximum Depth of Binary Tree 二元樹最大深度</a></h1><h2 id="❀-Origin"><a href="#❀-Origin" class="headerlink" title="❀ Origin"></a>❀ Origin</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Given a binary tree, find its maximum depth.<br>The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.</p><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><ul><li>A leaf is a node with no children.</li></ul><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Given binary tree [3,9,20,null,null,15,7]</span><br><span class="line"></span><br><span class="line">    3</span><br><span class="line">   / \</span><br><span class="line">  9  20</span><br><span class="line">    /  \</span><br><span class="line">   15   7</span><br><span class="line"></span><br><span class="line">return its depth = 3.</span><br></pre></td></tr></table></figure><hr><h2 id="❀-翻譯"><a href="#❀-翻譯" class="headerlink" title="❀ 翻譯"></a>❀ 翻譯</h2><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>給定一個二元樹, 找出它的最大深度.<br>最大深度是從根節點沿著最長的路徑往下到最遠的葉節點.</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>葉子是沒有孩子的節點.</li></ul><hr><h2 id="❀-Solution"><a href="#❀-Solution" class="headerlink" title="❀ Solution"></a>❀ Solution</h2><h3 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a>Idea</h3><p>因為之前解過 #654、#814、#617，<br>所以直覺用遞迴來解，<br>但一開始忘記從深度 1 開始,<br>後來有把結果 + 1 .</p><ol><li>用遞迴</li><li>找出最左和最右深度</li></ol><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TreeNode</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.val = val;</span><br><span class="line"><span class="keyword">this</span>.left = <span class="keyword">this</span>.right = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用遞迴, 去算出左和右的最深身度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxDepth = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 如果沒有, 就回傳 0</span></span><br><span class="line"><span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 每次深度加一</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span> + <span class="built_in">Math</span>.max(maxDepth(root.left), maxDepth(root.right));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Execution"><a href="#Execution" class="headerlink" title="Execution"></a>Execution</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">[3,9,20,null,null,15,7]</span><br><span class="line">/////////////////////////////</span><br><span class="line">1.</span><br><span class="line">root.val = 3</span><br><span class="line">root.left = 9</span><br><span class="line">root.right = 10</span><br><span class="line">/////////////////////////////</span><br><span class="line">2. root -&gt; left -&gt; left</span><br><span class="line">val = null</span><br><span class="line">return 0</span><br><span class="line"></span><br><span class="line">↓↓↓↓</span><br><span class="line"></span><br><span class="line">2. root -&gt; left -&gt; right</span><br><span class="line">val = null</span><br><span class="line">return 0</span><br><span class="line"></span><br><span class="line">↓↓↓↓</span><br><span class="line"></span><br><span class="line">2. root -&gt; left</span><br><span class="line">return 1 + Math.max(maxDepth(root.left), maxDepth(root.right));</span><br><span class="line">return 1 + 0 = 1</span><br><span class="line"></span><br><span class="line">↓↓↓↓</span><br><span class="line"></span><br><span class="line">2. root</span><br><span class="line">return 1 + Math.max( 1, maxDepth(root.right));</span><br><span class="line"></span><br><span class="line">/////////////////////////////</span><br><span class="line"></span><br><span class="line">2.root -&gt; right -&gt; left</span><br><span class="line">val = 15</span><br><span class="line">left = null</span><br><span class="line">right = null</span><br><span class="line">return 1 + Math.max(maxDepth(null), maxDepth(null));</span><br><span class="line">return 1 + 0 = 1</span><br><span class="line"></span><br><span class="line">↓↓↓↓</span><br><span class="line"></span><br><span class="line">2. root -&gt; right -&gt; right</span><br><span class="line">val = 7</span><br><span class="line">left = null</span><br><span class="line">right = null</span><br><span class="line">return 1 + Math.max(maxDepth(null), maxDepth(null));</span><br><span class="line">return 1 + 0 = 1</span><br><span class="line"></span><br><span class="line">↓↓↓↓</span><br><span class="line"></span><br><span class="line">2. root -&gt; right</span><br><span class="line">return 1 + Math.max(maxDepth(root.left), maxDepth(root.right));</span><br><span class="line">return 1 + 1 = 2</span><br><span class="line"></span><br><span class="line">/////////////////////////////</span><br><span class="line"></span><br><span class="line">3. root</span><br><span class="line">return 1 + Math.max( 1, 2));</span><br><span class="line">return 1 + 2 = 3</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ⓁⒸ - Easy </tag>
            
            <tag> Binary Tree </tag>
            
            <tag> Math.max() </tag>
            
            <tag> ⭐ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ⓁⒸ ‧‧‧ 406. Queue Reconstruction by Height</title>
      <link href="/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-406-Queue-Reconstruction-by-Height/"/>
      <url>/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-406-Queue-Reconstruction-by-Height/</url>
      
        <content type="html"><![CDATA[<h1 id="406-Queue-Reconstruction-by-Height-依高度重建隊列"><a href="#406-Queue-Reconstruction-by-Height-依高度重建隊列" class="headerlink" title="406. Queue Reconstruction by Height 依高度重建隊列"></a><a href="https://leetcode.com/problems/queue-reconstruction-by-height/description/" target="_blank" rel="noopener">406. Queue Reconstruction by Height 依高度重建隊列</a></h1><h2 id="❀-Origin"><a href="#❀-Origin" class="headerlink" title="❀ Origin"></a>❀ Origin</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Suppose you have a random list of people standing in a queue.<br>Each person is described by a pair of integers <code>(h, k)</code>,<br>where <code>h</code> is the height of the person and <code>k</code> is the number of people in front of this person who have a height greater than or equal to <code>h</code>. Write an algorithm to reconstruct the queue.</p><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><ul><li>The number of people is less than <code>1,100</code>.</li></ul><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">[[7,0], [4,4], [7,1], [5,0], [6,1], [5,2]]</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">[[5,0], [7,0], [5,2], [6,1], [4,4], [7,1]]</span><br></pre></td></tr></table></figure><hr><h2 id="❀-翻譯"><a href="#❀-翻譯" class="headerlink" title="❀ 翻譯"></a>❀ 翻譯</h2><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>假設有一個隨機的人們排隊的列表.<br>每個人都用一對整數 <code>(h, k)</code> 來描述,<br><code>h</code> 代表著那人的身高, 而 <code>k</code> 則是身高高於或等於 <code>h</code> 的人在他前面的數量.<br>寫出一個算法來重建這個隊列.</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>人數小於 <code>1,100</code></li></ul><hr><h2 id="❀-Solution"><a href="#❀-Solution" class="headerlink" title="❀ Solution"></a>❀ Solution</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[][]&#125; people</span></span><br><span class="line"><span class="comment"> * @return &#123;number[][]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 想出這解法的大神真的很膜拜,</span></span><br><span class="line"><span class="comment"> * 一直再想該怎麼去判斷每個數的之前與之後,</span></span><br><span class="line"><span class="comment"> * 但如果確定題目給的陣列, 一定能排出正確排序,</span></span><br><span class="line"><span class="comment"> * 那解法會清澈很多.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 大神的解法是先整理出依 h 的降幕排序,</span></span><br><span class="line"><span class="comment"> * 若 h 相等, 則比較 k 的大小, 小的排前面</span></span><br><span class="line"><span class="comment"> * 因此可整理出,</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  [[7, 0], [4, 4], [7, 1], [5, 0], [6, 1], [5, 2]]</span></span><br><span class="line"><span class="comment"> * ==================================================</span></span><br><span class="line"><span class="comment"> *  [[7, 0], [7, 1], [6, 1], [5, 0], [5, 2], [4, 4]]</span></span><br><span class="line"><span class="comment"> * 的陣列.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 之後遍歷每個資料,</span></span><br><span class="line"><span class="comment"> * 搭配 array.splice(start, deleteCount, item, item,...)</span></span><br><span class="line"><span class="comment"> * // 開始位置, 刪除數量, 加入的item</span></span><br><span class="line"><span class="comment"> * // months = ['Jan', 'March', 'April', 'June'];</span></span><br><span class="line"><span class="comment"> * // months.splice(1, 1, 'Feb');</span></span><br><span class="line"><span class="comment"> * // ["Jan", "Feb", "April", "June"]</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 重點,</span></span><br><span class="line"><span class="comment"> * 因為陣列已經整理好身高由大到小, 且 k 值保證正確</span></span><br><span class="line"><span class="comment"> * 意思是說, 遍歷的每個值, 只要去判斷 k 知道前面有 k 個更高或一樣高的人,</span></span><br><span class="line"><span class="comment"> * 那在新建的那個陣列, 只要將當前值直接填入到位置 k 就好,</span></span><br><span class="line"><span class="comment"> * 因為是從大開始遍歷到小,</span></span><br><span class="line"><span class="comment"> * 也不用去想該值之外的人會如何,</span></span><br><span class="line"><span class="comment"> * 依題目 k 絕對合理, 那照著 k 給的位置排下去, 就一定正確.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 超強的 完全沒想過  豁然開朗.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * EXP:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * [ [ 7, 0 ], [ 7, 1 ], [ 6, 1 ], [ 5, 0 ], [ 5, 2 ], [ 4, 4 ] ].reduce() 結果如下</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * start:  0   item:  [ 7, 0 ]   result:  []</span></span><br><span class="line"><span class="comment"> * start:  1   item:  [ 7, 1 ]   result:  [ [ 7, 0 ] ]</span></span><br><span class="line"><span class="comment"> * start:  1   item:  [ 6, 1 ]   result:  [ [ 7, 0 ], [ 7, 1 ] ]</span></span><br><span class="line"><span class="comment"> * start:  0   item:  [ 5, 0 ]   result:  [ [ 7, 0 ], [ 6, 1 ], [ 7, 1 ] ]</span></span><br><span class="line"><span class="comment"> * start:  2   item:  [ 5, 2 ]   result:  [ [ 5, 0 ], [ 7, 0 ], [ 6, 1 ], [ 7, 1 ] ]</span></span><br><span class="line"><span class="comment"> * start:  4   item:  [ 4, 4 ]   result:  [ [ 5, 0 ], [ 7, 0 ], [ 5, 2 ], [ 6, 1 ], [ 7, 1 ] ]</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reconstructQueue = <span class="function"><span class="keyword">function</span>(<span class="params">people</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> result = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 整理出依 h 的降幕排序, 若相等(b[0] - a[0] = 0), 則比對 k 的值小的前面, 作升幕,</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// people.sort(function(a, b) &#123;</span></span><br><span class="line"><span class="comment">// return b[0] - a[0] || a[1] - b[1];</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line">people.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b[<span class="number">0</span>] - a[<span class="number">0</span>] || a[<span class="number">1</span>] - b[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> people.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">accumulator, currentValue, currentIndex</span>) </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 對 accumulator 擺入 currentValue</span></span><br><span class="line"><span class="comment"> * 位置則是其 k 值</span></span><br><span class="line"><span class="comment"> * 解釋如上</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">accumulator.splice(currentValue[<span class="number">1</span>], <span class="number">0</span>, currentValue);</span><br><span class="line"><span class="comment">// console.log(</span></span><br><span class="line"><span class="comment">// 'start: ',</span></span><br><span class="line"><span class="comment">// currentValue[1],</span></span><br><span class="line"><span class="comment">// '  item: ',</span></span><br><span class="line"><span class="comment">// currentValue,</span></span><br><span class="line"><span class="comment">// '  result: ',</span></span><br><span class="line"><span class="comment">// accumulator</span></span><br><span class="line"><span class="comment">// );</span></span><br><span class="line"><span class="keyword">return</span> accumulator;</span><br><span class="line">&#125;, []);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = [[<span class="number">7</span>, <span class="number">0</span>], [<span class="number">4</span>, <span class="number">4</span>], [<span class="number">7</span>, <span class="number">1</span>], [<span class="number">5</span>, <span class="number">0</span>], [<span class="number">6</span>, <span class="number">1</span>], [<span class="number">5</span>, <span class="number">2</span>]];</span><br><span class="line"><span class="built_in">console</span>.log(reconstructQueue(data));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ⭐ </tag>
            
            <tag> Array.reduce() </tag>
            
            <tag> ⓁⒸ - Medium </tag>
            
            <tag> Array.splice() </tag>
            
            <tag> Array.sort() </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ⓁⒸ ‧‧‧ 541. Reverse String II</title>
      <link href="/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-541-Reverse-String-II/"/>
      <url>/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-541-Reverse-String-II/</url>
      
        <content type="html"><![CDATA[<h1 id="541-Reverse-String-II-反轉字串-II"><a href="#541-Reverse-String-II-反轉字串-II" class="headerlink" title="541. Reverse String II 反轉字串 II]"></a><a href="https://leetcode.com/problems/reverse-string-ii/description/" target="_blank" rel="noopener">541. Reverse String II 反轉字串 II</a>]</h1><h2 id="❀-Origin"><a href="#❀-Origin" class="headerlink" title="❀ Origin"></a>❀ Origin</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Given a string <code>s</code> and an integer <code>k</code>,<br>you need to reverse the first k characters for every 2k characters counting from the start of the string.<br>If there are less than k characters left, reverse all of them.<br>If there are less than 2k but greater than or equal to k characters,<br>then reverse the first k characters and left the other as original.</p><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><ol><li>The string consists of lower English letters only.</li><li>Length of the given string and k will in the range [1, 10000]</li></ol><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: s = &quot;abcdefg&quot;, k = 2</span><br><span class="line">Output: &quot;bacdfeg&quot;</span><br></pre></td></tr></table></figure><hr><h2 id="❀-翻譯"><a href="#❀-翻譯" class="headerlink" title="❀ 翻譯"></a>❀ 翻譯</h2><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>給定一個字串 <code>s</code> 和一個整數 <code>k</code>,<br>你必須從字串的一開始與每 2k 的位置開始倒轉前 k 個字元.<br>如果字串小於 k 個字元, 倒轉全部.<br>如果字串小於 2k 個字元但是大於 k 個字元, 則倒轉最前面的 k 個字元, 並將其他的照原樣保存.</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>在字串裡只會包含小寫英文字母.</li><li>給定的字符和整數 k 的範圍在 <code>[1, 10000]</code></li></ul><hr><h2 id="❀-Solution"><a href="#❀-Solution" class="headerlink" title="❀ Solution"></a>❀ Solution</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; k</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> reverseStr = <span class="function"><span class="keyword">function</span>(<span class="params">s, k</span>) </span>&#123;</span><br><span class="line"><span class="comment">//先組成 k 個字串為一組的陣列</span></span><br><span class="line"><span class="keyword">let</span> arrResult = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.length; i += k) &#123;</span><br><span class="line">arrResult.push(s.slice(i, i + k));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 依題意 從位置 0 開始, 做之後 k 長度字串的倒轉, 其後每 2k 位置都要做一樣動作</span></span><br><span class="line"><span class="keyword">return</span> arrResult</span><br><span class="line">.map(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (index % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">item = reverseString(item);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> item;</span><br><span class="line">&#125;)</span><br><span class="line">.join(<span class="string">''</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//倒轉字串 參考： https://github.com/xTobu/LeetCode/tree/master/JavaScript/%23344</span></span><br><span class="line"><span class="keyword">var</span> reverseString = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> s.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reverseStr(<span class="string">'abcdefghijklmnopqrstuv'</span>, <span class="number">3</span>));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ⓁⒸ - Easy </tag>
            
            <tag> ☄️ </tag>
            
            <tag> String.split() </tag>
            
            <tag> Array.reverse() </tag>
            
            <tag> Array.join() </tag>
            
            <tag> Array.map() </tag>
            
            <tag> String.slice() </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ⓁⒸ ‧‧‧ 557. Reverse Words in a String III</title>
      <link href="/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-557-Reverse-Words-in-a-String-III/"/>
      <url>/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-557-Reverse-Words-in-a-String-III/</url>
      
        <content type="html"><![CDATA[<h1 id="557-Reverse-Words-in-a-String-III-反轉字串裡的單字"><a href="#557-Reverse-Words-in-a-String-III-反轉字串裡的單字" class="headerlink" title="557. Reverse Words in a String III 反轉字串裡的單字"></a><a href="https://leetcode.com/problems/reverse-words-in-a-string-iii/description/" target="_blank" rel="noopener">557. Reverse Words in a String III 反轉字串裡的單字</a></h1><h2 id="❀-Origin"><a href="#❀-Origin" class="headerlink" title="❀ Origin"></a>❀ Origin</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Given a string,<br>you need to reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.</p><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><ul><li>In the string, each word is separated by single space and there will not be any extra space in the string.</li></ul><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;Let&apos;s take LeetCode contest&quot;</span><br><span class="line">Output: &quot;s&apos;teL ekat edoCteeL tsetnoc&quot;</span><br></pre></td></tr></table></figure><hr><h2 id="❀-翻譯"><a href="#❀-翻譯" class="headerlink" title="❀ 翻譯"></a>❀ 翻譯</h2><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>給定一個字串,<br>你必須倒轉每個單字裡的字母的順序, 同時保留空格和原始句子的順單字順序.</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>在字串裡, 每個單字都會用一個空白來隔開, 而且單字裡不會存在額外的空白.</li></ul><hr><h2 id="❀-Solution"><a href="#❀-Solution" class="headerlink" title="❀ Solution"></a>❀ Solution</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 依題意,</span></span><br><span class="line"><span class="comment">// 先將字串 s 拆分成陣列,</span></span><br><span class="line"><span class="comment">// 再用 .map() 對每個 word 做倒轉處理,</span></span><br><span class="line"><span class="comment">// 之後再 join 成字串.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reverseWords = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> s</span><br><span class="line">.split(<span class="string">' '</span>)</span><br><span class="line">.map(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> reverseString(item);</span><br><span class="line">&#125;)</span><br><span class="line">.join(<span class="string">' '</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//參考： https://github.com/xTobu/LeetCode/tree/master/JavaScript/%23344</span></span><br><span class="line"><span class="keyword">var</span> reverseString = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> s.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reverseWords(<span class="string">"Let's take LeetCode contest"</span>));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ⓁⒸ - Easy </tag>
            
            <tag> ☄️ </tag>
            
            <tag> String.split() </tag>
            
            <tag> Array.reverse() </tag>
            
            <tag> Array.join() </tag>
            
            <tag> Array.map() </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ⓁⒸ ‧‧‧ 344. Reverse String</title>
      <link href="/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-344-Reverse-String/"/>
      <url>/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-344-Reverse-String/</url>
      
        <content type="html"><![CDATA[<h1 id="344-Reverse-String-反轉字串"><a href="#344-Reverse-String-反轉字串" class="headerlink" title="344. Reverse String 反轉字串"></a><a href="https://leetcode.com/problems/reverse-string/description/" target="_blank" rel="noopener">344. Reverse String 反轉字串</a></h1><h2 id="❀-Origin"><a href="#❀-Origin" class="headerlink" title="❀ Origin"></a>❀ Origin</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Write a function that takes a string as input and returns the string reversed.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Given s = &quot;hello&quot;, return &quot;olleh&quot;.</span><br></pre></td></tr></table></figure><hr><h2 id="❀-翻譯"><a href="#❀-翻譯" class="headerlink" title="❀ 翻譯"></a>❀ 翻譯</h2><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>寫出一個能夠將字串當作輸入並回傳相反後字串的函數.</p><hr><h2 id="❀-Solution"><a href="#❀-Solution" class="headerlink" title="❀ Solution"></a>❀ Solution</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// var reverseString = function(s) &#123;</span></span><br><span class="line"><span class="comment">// // 建立頭中尾的部分</span></span><br><span class="line"><span class="comment">// var top = '';</span></span><br><span class="line"><span class="comment">// var mid = '';</span></span><br><span class="line"><span class="comment">// var bottom = '';</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// // 如果字串長度為奇數, 傳入中間的字符當作 mid</span></span><br><span class="line"><span class="comment">// s.length % 2 == 0 ? (mid = '') : (mid = s[Math.floor(s.length / 2)]);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// // 使用頭尾互換的方式填入 迴圈少跑一半</span></span><br><span class="line"><span class="comment">// /**</span></span><br><span class="line"><span class="comment">//  *  h e l l o</span></span><br><span class="line"><span class="comment">//  * ===========</span></span><br><span class="line"><span class="comment">//  *  0 1 2 3 4</span></span><br><span class="line"><span class="comment">//  *  0       4</span></span><br><span class="line"><span class="comment">//  *    1   3</span></span><br><span class="line"><span class="comment">//  * mid = s[2]</span></span><br><span class="line"><span class="comment">//  * top = s[4] + s[3]</span></span><br><span class="line"><span class="comment">//  * bottom = s[1] + s[0]</span></span><br><span class="line"><span class="comment">//  *</span></span><br><span class="line"><span class="comment">//  */</span></span><br><span class="line"><span class="comment">// for (let i = 0; i &lt; Math.floor(s.length / 2); i++) &#123;</span></span><br><span class="line"><span class="comment">// // 最初和最鏡面對應的值交換</span></span><br><span class="line"><span class="comment">// top = top + s[s.length - 1 - i];</span></span><br><span class="line"><span class="comment">// bottom = s[i] + bottom;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// return top + mid + bottom;</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 原本以為一開始的for迴圈跑一半的方式會比較快,</span></span><br><span class="line"><span class="comment">// 但原生的 split('') 分成陣列,</span></span><br><span class="line"><span class="comment">// 在用 reverse() 對陣列反轉,</span></span><br><span class="line"><span class="comment">// 之後用 join('') 將陣列組合成字串.</span></span><br><span class="line"><span class="comment">// 實測比較快, 快大概 30~40% 的時間</span></span><br><span class="line"><span class="keyword">var</span> reverseString = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reverseString(<span class="string">'abcde'</span>));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ⓁⒸ - Easy </tag>
            
            <tag> ☄️ </tag>
            
            <tag> String.split() </tag>
            
            <tag> Array.reverse() </tag>
            
            <tag> Array.join() </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ⓁⒸ ‧‧‧ 821. Shortest Distance to a Character</title>
      <link href="/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-821-Shortest-Distance-to-a-Character/"/>
      <url>/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-821-Shortest-Distance-to-a-Character/</url>
      
        <content type="html"><![CDATA[<h1 id="821-Shortest-Distance-to-a-Character-與字元的最短距離"><a href="#821-Shortest-Distance-to-a-Character-與字元的最短距離" class="headerlink" title="821. Shortest Distance to a Character 與字元的最短距離"></a><a href="https://leetcode.com/problems/shortest-distance-to-a-character/description/" target="_blank" rel="noopener">821. Shortest Distance to a Character 與字元的最短距離</a></h1><h2 id="❀-Origin"><a href="#❀-Origin" class="headerlink" title="❀ Origin"></a>❀ Origin</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Given a string <code>S</code> and a character <code>C</code>,<br>return an array of integers representing the shortest distance from the character <code>C</code> in the string.</p><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: S = &quot;loveleetcode&quot;, C = &apos;e&apos;</span><br><span class="line">Output: [3, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0]</span><br></pre></td></tr></table></figure><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><ol><li><code>S</code> string length is in <code>[1, 10000]</code>.</li><li><code>C</code> is a single character, and guaranteed to be in string <code>S</code>.</li><li>All letters in <code>S</code> and <code>C</code> are lowercase.</li></ol><hr><h2 id="❀-翻譯"><a href="#❀-翻譯" class="headerlink" title="❀ 翻譯"></a>❀ 翻譯</h2><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>給定一個字串 <code>S</code>, 一個字符 <code>C</code>,<br>回傳字符 <code>C</code> 在字串裡代表的最短距離的數字字串.</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>字串 <code>S</code> 的長度在 <code>[1, 10000]</code> 之間.</li><li><code>C</code> 是單一字符, 而且保證會出現在字串 <code>S</code> 裡面.</li><li>所有字串 <code>S</code> 和字符 <code>C</code>都會是小寫字母.</li></ol><hr><h2 id="❀-Solution"><a href="#❀-Solution" class="headerlink" title="❀ Solution"></a>❀ Solution</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; S</span></span><br><span class="line"><span class="comment"> * @param &#123;character&#125; C</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> shortestToChar = <span class="function"><span class="keyword">function</span>(<span class="params">S, C</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 找出所有目標字 C 的位置</span></span><br><span class="line"><span class="keyword">var</span> arrIndexC = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; S.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (S[i] === C) &#123;</span><br><span class="line">arrIndexC.push(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 結果陣列</span></span><br><span class="line"><span class="keyword">var</span> arrReult = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先從 arrIndexC 的第 0 個位置開始找</span></span><br><span class="line"><span class="keyword">var</span> nowC = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; S.length; i++) &#123;</span><br><span class="line">arrReult.push(</span><br><span class="line"><span class="comment">// 取決對值 在傳入較小的那個</span></span><br><span class="line"><span class="built_in">Math</span>.min(</span><br><span class="line"><span class="built_in">Math</span>.abs(detect(arrIndexC[nowC]) - i),</span><br><span class="line"><span class="built_in">Math</span>.abs(detect(arrIndexC[nowC - <span class="number">1</span>]) - i)</span><br><span class="line">)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 若目前遍歷到的位置, 已經超過暫存的 nowC , 將 nowC + 1</span></span><br><span class="line"><span class="keyword">if</span> (i &gt;= detect(arrIndexC[nowC])) nowC++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arrReult;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 如果遇到 undefined , 傳入無限大</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">detect</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> c !== <span class="literal">undefined</span> ? c : <span class="literal">Infinity</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(shortestToChar(<span class="string">'loveleetcode'</span>, <span class="string">'e'</span>));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ⓁⒸ - Easy </tag>
            
            <tag> ☄️ </tag>
            
            <tag> Math.abs() </tag>
            
            <tag> Math.min() </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ⓁⒸ ‧‧‧ 476. Number Complement</title>
      <link href="/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-476-Number-Complement/"/>
      <url>/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-476-Number-Complement/</url>
      
        <content type="html"><![CDATA[<h1 id="476-Number-Complement-數字補數"><a href="#476-Number-Complement-數字補數" class="headerlink" title="476. Number Complement 數字補數"></a><a href="https://leetcode.com/problems/number-complement/description/" target="_blank" rel="noopener">476. Number Complement 數字補數</a></h1><h2 id="❀-Origin"><a href="#❀-Origin" class="headerlink" title="❀ Origin"></a>❀ Origin</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Given a positive integer, output its complement number.<br>The complement strategy is to flip the bits of its binary representation.</p><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><ol><li>The given integer is guaranteed to fit within the range of a 32-bit signed integer.</li><li>You could assume no leading zero bit in the integer’s binary representation.</li></ol><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: 5</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.</span><br></pre></td></tr></table></figure><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: 1</span><br><span class="line">Output: 0</span><br><span class="line">Explanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.</span><br></pre></td></tr></table></figure><hr><h2 id="❀-翻譯"><a href="#❀-翻譯" class="headerlink" title="❀ 翻譯"></a>❀ 翻譯</h2><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>給定一個正整數, 輸出其補數.<br>補數的定義是翻轉其二進制數的每個代表位元.</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>給定的整數保證符合在 32 位元有號數的範圍內.</li><li>你可以在整數的二進制表示裡假設其沒有前面的 0 位元.</li></ol><hr><h2 id="❀-Solution"><a href="#❀-Solution" class="headerlink" title="❀ Solution"></a>❀ Solution</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; num</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * XOR 相同為零 不同為一</span></span><br><span class="line"><span class="comment"> * NOR 理論上也可以, 只是目前不曉得如何在JS使用 NOR</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findComplement = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 先取得目標數的二進制的長度</span></span><br><span class="line"><span class="keyword">var</span> binaryLength = num.toString(<span class="number">2</span>).length;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 Math.pow() , 取得全為 1 的數, 2的n次方 -1</span></span><br><span class="line"><span class="keyword">var</span> TheAllOneNum = <span class="built_in">Math</span>.pow(<span class="number">2</span>, binaryLength) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 與其執行 NOR</span></span><br><span class="line"><span class="keyword">return</span> num ^ TheAllOneNum;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(findComplement(<span class="number">9</span>));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ⓁⒸ - Easy </tag>
            
            <tag> ☄️ </tag>
            
            <tag> XOR </tag>
            
            <tag> Math.pow() </tag>
            
            <tag> NOR </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ⓁⒸ ‧‧‧ 338. Counting Bits</title>
      <link href="/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-338-Counting-Bits/"/>
      <url>/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-338-Counting-Bits/</url>
      
        <content type="html"><![CDATA[<h1 id="338-Counting-Bits-計算位元"><a href="#338-Counting-Bits-計算位元" class="headerlink" title="338. Counting Bits 計算位元"></a><a href="https://leetcode.com/problems/counting-bits/description/" target="_blank" rel="noopener">338. Counting Bits 計算位元</a></h1><h2 id="❀-Origin"><a href="#❀-Origin" class="headerlink" title="❀ Origin"></a>❀ Origin</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Given a non negative integer number <strong>num</strong>.<br>For every numbers <strong>i</strong> in the range <strong>0 ≤ i ≤ num</strong> calculate the number of 1’s in their binary representation and return them as an array.</p><h3 id="Follow-up"><a href="#Follow-up" class="headerlink" title="Follow up"></a>Follow up</h3><ul><li>It is very easy to come up with a solution with run time <strong>O(n*sizeof(integer))</strong>. But can you do it in linear time <strong>O(n)</strong> /possibly in a single pass?</li><li>Space complexity should be <strong>O(n)</strong>.</li><li>Can you do it like a boss? Do it without using any builtin function like <strong>__builtin_popcount</strong> in c++ or in any other language.</li></ul><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">For num = 5 you should return [0,1,1,2,1,2].</span><br></pre></td></tr></table></figure><hr><h2 id="❀-翻譯"><a href="#❀-翻譯" class="headerlink" title="❀ 翻譯"></a>❀ 翻譯</h2><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>給定一個非負整數 <strong>num</strong>.<br>對於每個在 <strong>0 ≤ i ≤ num</strong> 的數字 <strong>i</strong> ,計算它們的二進制表示裡 1 的數量, 並以陣列回傳.</p><h3 id="進一步思考"><a href="#進一步思考" class="headerlink" title="進一步思考"></a>進一步思考</h3><ul><li>這很容易想到運行時間是 <strong>O(n*sizeof(integer))</strong> 的解法. 但你有辦法用線性時間 <strong>O(n)</strong> 的算法做一趟完成嗎?</li><li>空間複雜度應為 <strong>O(n)</strong>.</li><li>你有辦法做得像個老大? 不要使用如 c++ 裡的內建函數如 <strong>__builtin_popcount</strong> , 或其他語言裡的.</li></ul><hr><h2 id="❀-Solution"><a href="#❀-Solution" class="headerlink" title="❀ Solution"></a>❀ Solution</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; num</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="number">17</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一種解法 O(n*sizeof(integer)).</span></span><br><span class="line"><span class="comment">// （我只想出這種廢解法，下面兩種是網路上的大神前輩們的方式）</span></span><br><span class="line"><span class="comment">// Follow up 說不要這樣寫</span></span><br><span class="line"><span class="comment">// var countBits = function(num) &#123;</span></span><br><span class="line"><span class="comment">// // 0 ≤ i ≤ num</span></span><br><span class="line"><span class="comment">// // 0 一定沒有 1, 所以第一個直接填入 0</span></span><br><span class="line"><span class="comment">// var arrayResult = [0];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// // for 迴圈從 1 開始, 直到指定數字</span></span><br><span class="line"><span class="comment">// for (let i = 1; i &lt;= num; i++) &#123;</span></span><br><span class="line"><span class="comment">// // reg</span></span><br><span class="line"><span class="comment">// // g 修飾符用於執行全局匹配（查找所有匹配而非在找到第一個匹配後停止）。</span></span><br><span class="line"><span class="comment">// // 先將數字轉為二進制, 在去掉所有的 0 , 傳入長度</span></span><br><span class="line"><span class="comment">// arrayResult.push(i.toString(2).replace(/0/g, '').length);</span></span><br><span class="line"><span class="comment">// // console.log();</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// return arrayResult;</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 規律</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//i     bin    '1'   Math.floor(i/2)</span></span><br><span class="line"><span class="comment">// 0    0000    0     0</span></span><br><span class="line"><span class="comment">// --------------------------</span></span><br><span class="line"><span class="comment">// 1    0001    1     0</span></span><br><span class="line"><span class="comment">// 2    0010    1     1</span></span><br><span class="line"><span class="comment">// --------------------------</span></span><br><span class="line"><span class="comment">// 3    0011    2     1</span></span><br><span class="line"><span class="comment">// 4    0100    1     2</span></span><br><span class="line"><span class="comment">// --------------------------</span></span><br><span class="line"><span class="comment">// 5    0101    2     2</span></span><br><span class="line"><span class="comment">// 6    0110    2     3</span></span><br><span class="line"><span class="comment">// --------------------------</span></span><br><span class="line"><span class="comment">// 7    0111    3     3</span></span><br><span class="line"><span class="comment">// 8    1000    1     4</span></span><br><span class="line"><span class="comment">// --------------------------</span></span><br><span class="line"><span class="comment">// 9    1001    2     4</span></span><br><span class="line"><span class="comment">// 10   1010    2     5</span></span><br><span class="line"><span class="comment">// --------------------------</span></span><br><span class="line"><span class="comment">// 11   1011    3     5</span></span><br><span class="line"><span class="comment">// 12   1100    2     6</span></span><br><span class="line"><span class="comment">// --------------------------</span></span><br><span class="line"><span class="comment">// 13   1101    3     6</span></span><br><span class="line"><span class="comment">// 14   1110    3     7</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * （  (i &amp; 1) , i 偶數時為 0 , 奇數時為 1 ）</span></span><br><span class="line"><span class="comment"> * 從 1 開始,</span></span><br><span class="line"><span class="comment"> * 遇到奇數時, 其 1 的個數等於該數除以 2 取整數的數字的二進制的 1 的個數再加 1</span></span><br><span class="line"><span class="comment"> * 遇到偶數時, 其 1 的個數等於該數除以 2 取整數的數字的二進制的 1 的個數</span></span><br><span class="line"><span class="comment"> * 網路上學習的, 感謝大神前輩的文章指點</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// var countBits = function(num) &#123;</span></span><br><span class="line"><span class="comment">// var arrayResult = [0];</span></span><br><span class="line"><span class="comment">// for (let i = 1; i &lt;= num; i++) &#123;</span></span><br><span class="line"><span class="comment">// arrayResult.push(arrayResult[Math.floor(i / 2)] + (i &amp; 1));</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// return arrayResult;</span></span><br><span class="line"><span class="comment">// &#125;;</span></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">//i     bin    '1'  i&amp;(i-1)</span></span><br><span class="line"><span class="comment">// 0    0000    0</span></span><br><span class="line"><span class="comment">// --------------------------</span></span><br><span class="line"><span class="comment">// 1    0001    1    0000 0</span></span><br><span class="line"><span class="comment">// --------------------------</span></span><br><span class="line"><span class="comment">// 2    0010    1    0000 0</span></span><br><span class="line"><span class="comment">// 3    0011    2    0010 2</span></span><br><span class="line"><span class="comment">// --------------------------</span></span><br><span class="line"><span class="comment">// 4    0100    1    0000 0</span></span><br><span class="line"><span class="comment">// 5    0101    2    0100 4</span></span><br><span class="line"><span class="comment">// 6    0110    2    0100 4</span></span><br><span class="line"><span class="comment">// 7    0111    3    0110 6</span></span><br><span class="line"><span class="comment">// --------------------------</span></span><br><span class="line"><span class="comment">// 8    1000    1    0000 0</span></span><br><span class="line"><span class="comment">// 9    1001    2    1000 8</span></span><br><span class="line"><span class="comment">// 10   1010    2    1000 8</span></span><br><span class="line"><span class="comment">// 11   1011    3    1010 10</span></span><br><span class="line"><span class="comment">// 12   1100    2    1000 8</span></span><br><span class="line"><span class="comment">// 13   1101    3    1100 12</span></span><br><span class="line"><span class="comment">// 14   1110    3    1100 12</span></span><br><span class="line"><span class="comment">// 15   1111    4    1110 14</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 利用了 i &amp; ( i-1 ), 這原本是用來判斷是不是 2 的指數 (若等於 0 ,即為 2 的指數)</span></span><br><span class="line"><span class="comment"> * 對應結果如上</span></span><br><span class="line"><span class="comment"> * 可以發現, 每個 i 的二進制的 1 的個數, 等於其 i&amp;(i-1) 的對應值 +1</span></span><br><span class="line"><span class="comment"> * 例如 15 的二進制為 1111, i&amp;(i-1) = 14 , 14 的 1 的個數 = 3 , 而 15 的 1 的個數 = 3 + 1 = 4</span></span><br><span class="line"><span class="comment"> * 可以發現這規律的大神根本是天才 太強了.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> countBits = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> arrayResult = [<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= num; i++) &#123;</span><br><span class="line">arrayResult[i] = arrayResult[i &amp; (i - <span class="number">1</span>)] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arrayResult;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(countBits(num));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ⓁⒸ - Medium </tag>
            
            <tag> ⭐⭐ </tag>
            
            <tag> AND </tag>
            
            <tag> 判斷 2 的指數 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ⓁⒸ ‧‧‧ 763. Partition Labels</title>
      <link href="/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-763-Partition-Labels/"/>
      <url>/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-763-Partition-Labels/</url>
      
        <content type="html"><![CDATA[<h1 id="763-Partition-Labels-分割標籤"><a href="#763-Partition-Labels-分割標籤" class="headerlink" title="763. Partition Labels 分割標籤"></a><a href="https://leetcode.com/problems/partition-labels/description/" target="_blank" rel="noopener">763. Partition Labels 分割標籤</a></h1><h2 id="❀-Origin"><a href="#❀-Origin" class="headerlink" title="❀ Origin"></a>❀ Origin</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>A string <code>S</code> of lowercase letters is given.<br>We want to partition this string into as many parts as possible so that each letter appears in at most one part,<br>and return a list of integers representing the size of these parts.</p><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><ul><li><code>S</code> will have length in range <code>[1, 500]</code>.</li><li><code>S</code> will consist of lowercase letters (<code>&#39;a&#39;</code> to <code>&#39;z&#39;</code>) only.</li></ul><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input: S = &quot;ababcbacadefegdehijhklij&quot;</span><br><span class="line">Output: [9,7,8]</span><br><span class="line">Explanation:</span><br><span class="line">The partition is &quot;ababcbaca&quot;, &quot;defegde&quot;, &quot;hijhklij&quot;.</span><br><span class="line">This is a partition so that each letter appears in at most one part.</span><br><span class="line">A partition like &quot;ababcbacadefegde&quot;, &quot;hijhklij&quot; is incorrect, because it splits S into less parts.</span><br></pre></td></tr></table></figure><hr><h2 id="❀-翻譯"><a href="#❀-翻譯" class="headerlink" title="❀ 翻譯"></a>❀ 翻譯</h2><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>給定一個小寫字母的字串 <code>S</code> .<br>我們想要將此字串盡可能地分成多個部分, 以便每個字母最多只會重覆在一個部分,<br>並回傳一個代表著每個部份的長度整數的陣列.</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li><code>S</code> 的長度會介於 <code>[1, 500]</code> .</li><li><code>S</code> 只會由小寫字母 (<code>&#39;a&#39;</code> to <code>&#39;z&#39;</code>) 來組成.</li></ul><hr><h2 id="❀-Solution"><a href="#❀-Solution" class="headerlink" title="❀ Solution"></a>❀ Solution</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; S</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> S = <span class="string">'ababcbacadefegdehijhklij'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> partitionLabels = <span class="function"><span class="keyword">function</span>(<span class="params">S</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 結果陣列.</span></span><br><span class="line"><span class="keyword">let</span> result = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 起始位</span></span><br><span class="line"><span class="keyword">let</span> start = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 目標位置</span></span><br><span class="line"><span class="keyword">let</span> indexTarget = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍歷字串所有字母</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; S.length; i++) &#123;</span><br><span class="line"><span class="comment">// 得到目前字母在字串裡的最後一個位置</span></span><br><span class="line"><span class="keyword">let</span> indexLast = S.lastIndexOf(S[i]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 將目前找到的 indexLast 和目前的 indexTarget 做比較,</span></span><br><span class="line"><span class="comment">// 將比較大的取代成目標位置 indexTarget</span></span><br><span class="line"><span class="comment">// (取大, 因為要找字母只能在自己的組裡有重覆, 如果取小, 那後面還是有可能重覆)</span></span><br><span class="line">indexTarget = <span class="built_in">Math</span>.max(indexTarget, indexLast);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面有刷新過目標位置 indexTarget,</span></span><br><span class="line"><span class="comment">// 如果遍歷的位置到了目標位置, 就不用再往後其他字的最後位置 indexLast 了,</span></span><br><span class="line"><span class="comment">// 代表前的 start 和 indexTarget 是我們要找的範圍.</span></span><br><span class="line"><span class="keyword">if</span> (i == indexTarget) &#123;</span><br><span class="line"><span class="comment">// 因題意只需要字組的長度, 所以也不用 slice 出一個新的陣列, 直接計算長度就可以了.</span></span><br><span class="line"><span class="comment">// 因為要的是長度, 不是距離, 所以要 +1 .</span></span><br><span class="line">result.push(indexTarget - start + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 將 start 更新成目前位置的下一位, 等同於前面被截取掉後的第一位.</span></span><br><span class="line">start = i + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 回傳結果</span></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(partitionLabels(S));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ☄️ </tag>
            
            <tag> Math.max() </tag>
            
            <tag> ⓁⒸ - Medium </tag>
            
            <tag> String.lastIndexOf() </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ⓁⒸ ‧‧‧ 561. Array Partition I</title>
      <link href="/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-561-Array-Partition-I/"/>
      <url>/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-561-Array-Partition-I/</url>
      
        <content type="html"><![CDATA[<h1 id="561-Array-Partition-I"><a href="#561-Array-Partition-I" class="headerlink" title="561. Array Partition I"></a><a href="https://leetcode.com/problems/array-partition-i/description/" target="_blank" rel="noopener">561. Array Partition I</a></h1><h2 id="❀-Origin"><a href="#❀-Origin" class="headerlink" title="❀ Origin"></a>❀ Origin</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Given an array of <strong>2n</strong> integers, your task is to group these integers into <strong>n</strong> pairs of integer,<br>say (a<sub>1</sub>, b<sub>1</sub>), (a<sub>2</sub>, b<sub>2</sub>), …, (a<sub>n</sub>, b<sub>n</sub>), which makes sum of min(a<sub>i</sub>, b<sub>i</sub>) for all i from 1 to n as large as possible.</p><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><ul><li><strong>n</strong> is a positive integer, which is in the range of [1, 10000].</li><li>All the integers in the array will be in the range of [-10000, 10000].</li></ul><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,4,3,2]</span><br><span class="line"></span><br><span class="line">Output: 4</span><br><span class="line">Explanation: n is 2, and the maximum sum of pairs is 4 = min(1, 2) + min(3, 4).</span><br></pre></td></tr></table></figure><hr><h2 id="❀-翻譯"><a href="#❀-翻譯" class="headerlink" title="❀ 翻譯"></a>❀ 翻譯</h2><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>給定一個 <strong>2n</strong> 個整數的陣列, 你的任務是將這些整數分成 <strong>n</strong> 組一對的整數,<br>譬如 (a<sub>1</sub>, b<sub>1</sub>), (a<sub>2</sub>, b<sub>2</sub>), …, (a<sub>n</sub>, b<sub>n</sub>), 並且這些 i 的整數對的 min(a<sub>i</sub>, b<sub>i</sub>) 的總和要盡可能的大.</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li><strong>n</strong> 是一個正整數, 其範圍在 [1, 10000].</li><li>所有在陣列中的整數, 其範圍在 [-10000, 10000].</li></ul><hr><h2 id="❀-Solution"><a href="#❀-Solution" class="headerlink" title="❀ Solution"></a>❀ Solution</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 依題意,</span></span><br><span class="line"><span class="comment"> * 講陣列兩個分成一組, 並將所有組的 min(ai, bi) 相加, 得出最大的可能</span></span><br><span class="line"><span class="comment"> * 若要兩個一組分, 就是小和小的一組, 大和大的一組,</span></span><br><span class="line"><span class="comment"> * 不然大和小的配一組, min(ai, bi) 取出小的就不是要的結果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> arrayPairSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">   <span class="comment">// 先依小到大排序</span></span><br><span class="line">nums.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 建立結果的變數</span></span><br><span class="line">    <span class="keyword">let</span> result = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 將處理過的陣列, 假設兩個一組, 取前面的那個數一定是最小的.</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length; i += <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">// 疊加進結果</span></span><br><span class="line">result += nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 回傳</span></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arrayPairSum([<span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>]));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ⓁⒸ - Easy </tag>
            
            <tag> ☄️ </tag>
            
            <tag> Array.sort() </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ⓁⒸ ‧‧‧ 728. Self Dividing Numbers</title>
      <link href="/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-728-Self-Dividing-Numbers/"/>
      <url>/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-728-Self-Dividing-Numbers/</url>
      
        <content type="html"><![CDATA[<h1 id="728-Self-Dividing-Numbers-自整除數"><a href="#728-Self-Dividing-Numbers-自整除數" class="headerlink" title="728. Self Dividing Numbers 自整除數"></a><a href="https://leetcode.com/problems/self-dividing-numbers/description/" target="_blank" rel="noopener">728. Self Dividing Numbers 自整除數</a></h1><h2 id="❀-Origin"><a href="#❀-Origin" class="headerlink" title="❀ Origin"></a>❀ Origin</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>A <em>self-dividing number</em> is a number that is divisible by every digit it contains.<br>For example, 128 is a self-dividing number because <code>128 % 1 == 0</code>, <code>128 % 2 == 0</code>, and <code>128 % 8 == 0</code>.<br>Also, a self-dividing number is not allowed to contain the digit zero.<br>Given a lower and upper number bound, output a list of every possible self dividing number, including the bounds if possible.</p><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><ul><li>The boundaries of each input argument are <code>1 &lt;= left &lt;= right &lt;= 10000</code>.</li></ul><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">left = 1, right = 22</span><br><span class="line">Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]</span><br></pre></td></tr></table></figure><hr><h2 id="❀-翻譯"><a href="#❀-翻譯" class="headerlink" title="❀ 翻譯"></a>❀ 翻譯</h2><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>自整除數 self-dividing number 是一種可以被自己所包含的所有位數整除的數.<br>舉例, 128 就是一個自整除數, 因為<code>128 % 1 == 0</code>, <code>128 % 2 == 0</code>, <code>128 % 8 == 0</code> ( % 是相除取餘數)<br>此外, 一個自整除數不允許有個位數是 0 .<br>給定個較低的和較高的數作為邊界, 輸出的每個是自整除數的列表, 如果可能的話要包含邊界數.</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>作為邊界的每個輸入參數都是<code>1 &lt;= left &lt;= right &lt;= 10000</code>.</li></ul><hr><h2 id="❀-Solution"><a href="#❀-Solution" class="headerlink" title="❀ Solution"></a>❀ Solution</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; left</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; right</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> selfDividingNumbers = <span class="function"><span class="keyword">function</span>(<span class="params">left, right</span>) </span>&#123;</span><br><span class="line"><span class="keyword">const</span> arrayResult = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = left; i &lt;= right; i++) &#123;</span><br><span class="line">arrayResult.push(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Array.prototype.keys()</span></span><br><span class="line"><span class="comment"> * keys() 方法會回傳一個包含陣列中的每一個索引之鍵（keys）</span></span><br><span class="line"><span class="comment"> * var array1 = ['a', 'b', 'c'];</span></span><br><span class="line"><span class="comment"> * var iterator = array1.keys();</span></span><br><span class="line"><span class="comment"> * result [0, 1, 2]</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * ...Array(1 + right - left)</span></span><br><span class="line"><span class="comment"> * 結束 - 開始取數量, 因為要包含結束自己, 所以總數加一</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 總數對了後, 跑 reduce() ,</span></span><br><span class="line"><span class="comment"> * 將每一個 currentValue (key) 再加上 left 並判斷後傳回 accumulator,</span></span><br><span class="line"><span class="comment"> * 即為我們要找的陣列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">return</span> [...Array(<span class="number">1</span> + right - left).keys()].reduce(<span class="function"><span class="keyword">function</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">accumulator,</span></span></span><br><span class="line"><span class="function"><span class="params">currentValue</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// 總數, 當前值 + 起始值</span></span><br><span class="line"><span class="keyword">let</span> number = currentValue + left;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用 for...in 去確認每個位數</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> number.toString()) &#123;</span><br><span class="line"><span class="comment">// 位數</span></span><br><span class="line"><span class="keyword">let</span> digit = number.toString()[i];</span><br><span class="line"><span class="comment">// 依題意, 要找出不包含零, 而且每個位數都可以整除自己的數</span></span><br><span class="line"><span class="comment">// 故如果位數等於零, 或是相除有餘數, 便回傳原陣列.</span></span><br><span class="line"><span class="keyword">if</span> (digit == <span class="number">0</span> || number % digit != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> accumulator;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通過的數將 push 到 accumulator , 繼續往下執行 reduce</span></span><br><span class="line">accumulator.push(number);</span><br><span class="line"><span class="keyword">return</span> accumulator;</span><br><span class="line">&#125;,</span><br><span class="line">[]);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(selfDividingNumbers(<span class="number">1</span>, <span class="number">22</span>));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ⓁⒸ - Easy </tag>
            
            <tag> ☄️ </tag>
            
            <tag> Array.reduce() </tag>
            
            <tag> Array.keys() </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ⓁⒸ ‧‧‧ 797. All Paths From Source to Target</title>
      <link href="/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-797-All-Paths-From-Source-to-Target/"/>
      <url>/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-797-All-Paths-From-Source-to-Target/</url>
      
        <content type="html"><![CDATA[<h1 id="797-All-Paths-From-Source-to-Target-從來源到目標的所有路徑"><a href="#797-All-Paths-From-Source-to-Target-從來源到目標的所有路徑" class="headerlink" title="797. All Paths From Source to Target 從來源到目標的所有路徑"></a><a href="https://leetcode.com/problems/all-paths-from-source-to-target/description/" target="_blank" rel="noopener">797. All Paths From Source to Target 從來源到目標的所有路徑</a></h1><h2 id="❀-Origin"><a href="#❀-Origin" class="headerlink" title="❀ Origin"></a>❀ Origin</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Given a directed, acyclic graph of <code>N</code> nodes.<br>Find all possible paths from node 0 to node N-1, and return them in any order.</p><p>The graph is given as follows:<br>the nodes are 0, 1, …, graph.length - 1.<br>graph[i] is a list of all nodes j for which the edge (i, j) exists.</p><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><ul><li>The number of nodes in the graph will be in the range [2, 15].</li><li>You can print different paths in any order, but you should keep the order of nodes inside one path.</li></ul><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input: [[1,2], [3], [3], []]</span><br><span class="line">Output: [[0,1,3],[0,2,3]]</span><br><span class="line">Explanation: The graph looks like this:</span><br><span class="line">0---&gt;1</span><br><span class="line">|    |</span><br><span class="line">v    v</span><br><span class="line">2---&gt;3</span><br><span class="line">There are two paths: 0 -&gt; 1 -&gt; 3 and 0 -&gt; 2 -&gt; 3.</span><br></pre></td></tr></table></figure><hr><h2 id="❀-翻譯"><a href="#❀-翻譯" class="headerlink" title="❀ 翻譯"></a>❀ 翻譯</h2><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>給定有<code>N</code>個節點的有向無環圖.<br>找出所有從節點<code>0</code>到節點<code>N-1</code>的可行路徑, 並將它們找順序排列後回傳.</p><p>給定的圖表如下:<br>節點的值會是 0, 1, …, graph.length - 1.<br>graph[i] 代表的是邊線 edge (i, j)上所有存在的 nodes j 的列表.</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>圖中的節點的數量範圍將會在 [2, 15]</li><li>你可以用任何順序去印出不同的路徑, 但你應該保持節點在一個路徑內的順序.</li></ul><hr><h2 id="❀-Solution"><a href="#❀-Solution" class="headerlink" title="❀ Solution"></a>❀ Solution</h2><h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><ul><li><a href="http://blog.cocosdever.com/2018/03/14/LetCode-in-Swift-797-All-Paths-From-Source-to-Target/" target="_blank" rel="noopener">DFS</a></li></ul><h3 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a>Idea</h3><p>底子太差, 一開始不會 DFS ( Depth-First Search 深度優先搜尋 ),<br>莫名其妙寫出來的, 忙完必須回頭確實弄懂.<br>主概念是遍歷所有點, 並判斷是否為目標值後組成回傳陣列.</p><p>網路大神前輩說此題是典型 DFS + Backtracking 的題目</p><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[][]&#125; graph</span></span><br><span class="line"><span class="comment"> * @return &#123;number[][]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DFS：https://zhuanlan.zhihu.com/p/24986203</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> graph = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>], [],[<span class="number">4</span>], []]</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> allPathsSourceTarget = <span class="function"><span class="keyword">function</span>(<span class="params">graph</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 取得目標節點, 依題意目標節點為 有向無環圖 DAG 的長度 -1</span></span><br><span class="line"><span class="keyword">var</span> N = graph.length;</span><br><span class="line"><span class="keyword">var</span> nodeTarget = N - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立拿來放結果, 最後會回傳的陣列</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立走遍每個點用的 function</span></span><br><span class="line"><span class="comment">// 在裡面建是因為共用了 result</span></span><br><span class="line"><span class="keyword">var</span> count =<span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">root, path</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 依題意, 如果 root === target ,</span></span><br><span class="line"><span class="comment">// 則代表該 path 是一種可能到達的方式,</span></span><br><span class="line"><span class="comment">// 因此將其 push 到 result</span></span><br><span class="line"><span class="comment">// 並不再尋找, 故 return</span></span><br><span class="line"><span class="keyword">if</span> (root === nodeTarget) &#123;</span><br><span class="line">result.push(path);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'count'</span>,count);</span><br><span class="line">count++</span><br><span class="line"></span><br><span class="line"><span class="comment">// 對 graph[root] 做 forEach, 要遍歷每個可能</span></span><br><span class="line">graph[root].forEach(<span class="function">(<span class="params">item,index</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// console.log('index',index);</span></span><br><span class="line"><span class="comment">// console.log('root', root);</span></span><br><span class="line"><span class="comment">// console.log('path', path);</span></span><br><span class="line"><span class="comment">// console.log('item', item);</span></span><br><span class="line"><span class="comment">// console.log(path.concat(item));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 因為上面有判斷目標的程式,</span></span><br><span class="line"><span class="comment">// 故如果到這邊的話, 代表還沒找到目標, 必須繼續往下找</span></span><br><span class="line"><span class="comment">// 所以目前將被 forEach 的 item 擺在 遞迴 dfs() 的 root,</span></span><br><span class="line"><span class="comment">// path 則 concat 目前的 item 後, 傳進下個 dfs() 的 path.</span></span><br><span class="line"><span class="comment">// 遍歷所有可能</span></span><br><span class="line">dfs(item, path.concat(item));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回傳其結果值</span></span><br><span class="line"><span class="comment">// 從 root = 0, path = [0] 的原點開始找</span></span><br><span class="line"><span class="keyword">return</span> dfs(<span class="number">0</span>, [<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(allPathsSourceTarget(graph));</span><br></pre></td></tr></table></figure><h3 id="Execution"><a href="#Execution" class="headerlink" title="Execution"></a>Execution</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">Input: [[1, 2, 3], [4], [], [4], []]</span><br><span class="line">nodeTarget: graph.length - 1 : 4</span><br><span class="line"></span><br><span class="line">Start:</span><br><span class="line">dfs(0, [0]) 從零開始</span><br><span class="line">graph[root] = graph[0] = [1, 2, 3]</span><br><span class="line">[1, 2, 3].forEach((item,index) =&gt; &#123;</span><br><span class="line">        // [1, 2, 3] 的第一次 forEach</span><br><span class="line">        dfs(1, [0, 1]);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">then, next dfs</span><br><span class="line">dfs(root, path) = dfs(1, [0, 1]);</span><br><span class="line">graph[root] = graph[1] = [4]</span><br><span class="line">[4].forEach((item,index) =&gt; &#123;</span><br><span class="line">        // 第一次 forEach</span><br><span class="line">        // item = 4</span><br><span class="line">        dfs(4, [0, 1, 4]);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">then, next dfs</span><br><span class="line">dfs(root, path) = dfs(4, [0, 1, 4]);</span><br><span class="line">root = 4</span><br><span class="line">push to result [[0, 1, 4]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">======================================</span><br><span class="line"></span><br><span class="line">then, second forEach</span><br><span class="line">[1, 2, 3].forEach((item,index) =&gt; &#123;</span><br><span class="line">        // [1, 2, 3] 的第二次 forEach</span><br><span class="line">        dfs(2, [0, 2]);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">then, next dfs</span><br><span class="line">dfs(root, path) = dfs(2, [0, 2]);</span><br><span class="line">graph[root] = graph[2] = []</span><br><span class="line">[].forEach((item,index) =&gt; &#123;</span><br><span class="line">        // 空陣列, 代表此 path 不會到達目標節點</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">======================================</span><br><span class="line"></span><br><span class="line">then, third forEach</span><br><span class="line">[1, 2, 3].forEach((item,index) =&gt; &#123;</span><br><span class="line">        // [1, 2, 3] 的第三次 forEach</span><br><span class="line">        dfs(3, [0, 3]);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">then, next dfs</span><br><span class="line">dfs(root, path) = dfs(3, [0, 3]);</span><br><span class="line">graph[root] = graph[3] = [4]</span><br><span class="line">[4].forEach((item,index) =&gt; &#123;</span><br><span class="line">        // 第一次 forEach</span><br><span class="line">        // item = 4</span><br><span class="line">        dfs(4, [0, 3, 4]);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">then, next dfs</span><br><span class="line">dfs(root, path) = dfs(4, [0, 3, 4]);</span><br><span class="line">root = 4</span><br><span class="line">push to result [[0, 1, 4], [0, 3, 4]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">======================================</span><br><span class="line"></span><br><span class="line">graph[0] 的可能性都跑完之後.</span><br><span class="line">回傳結果: [[0, 1, 4],[0, 3, 4]]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ⓁⒸ - Medium </tag>
            
            <tag> Array.forEach() </tag>
            
            <tag> DFS </tag>
            
            <tag> Backtracking </tag>
            
            <tag> ⭐⭐⭐ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ⓁⒸ ‧‧‧ 617. Merge Two Binary Trees</title>
      <link href="/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-617-Merge-Two-Binary-Trees/"/>
      <url>/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-617-Merge-Two-Binary-Trees/</url>
      
        <content type="html"><![CDATA[<h1 id="617-Merge-Two-Binary-Trees-合併兩個二元樹"><a href="#617-Merge-Two-Binary-Trees-合併兩個二元樹" class="headerlink" title="617. Merge Two Binary Trees 合併兩個二元樹"></a><a href="https://leetcode.com/problems/merge-two-binary-trees/description/" target="_blank" rel="noopener">617. Merge Two Binary Trees 合併兩個二元樹</a></h1><h2 id="❀-Origin"><a href="#❀-Origin" class="headerlink" title="❀ Origin"></a>❀ Origin</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Given two binary trees and imagine that when you put one of them to cover the other,<br>some nodes of the two trees are overlapped while the others are not.</p><p>You need to merge them into a new binary tree.</p><p>The merge rule is that if two nodes overlap,<br>then sum node values up as the new value of the merged node.<br>Otherwise,<br>the NOT null node will be used as the node of new tree.</p><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><ul><li>The merging process must start from the root nodes of both trees.</li></ul><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">Tree 1                     Tree 2</span><br><span class="line">          1                         2</span><br><span class="line">         / \                       / \</span><br><span class="line">        3   2                     1   3</span><br><span class="line">       /                           \   \</span><br><span class="line">      5                             4   7</span><br><span class="line">Output:</span><br><span class="line">Merged tree:</span><br><span class="line">     3</span><br><span class="line">    / \</span><br><span class="line">   4   5</span><br><span class="line">  / \   \</span><br><span class="line"> 5   4   7</span><br></pre></td></tr></table></figure><hr><h2 id="❀-翻譯"><a href="#❀-翻譯" class="headerlink" title="❀ 翻譯"></a>❀ 翻譯</h2><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>給定兩個二元樹, 並且想像當你把一顆樹放到另一顆上時,<br>兩棵樹的某些節點會重覆, 其他則否.  </p><p>你需要將它們合併成一個新的二元樹.</p><p>合併的規則是如果兩個節點重疊了,<br>則將兩個節點的值相加成為新節點的值.<br>除此之外,<br>不是 null 的節點將會被當做新二元樹的節點.</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>合併的過程必須是從兩個二元樹的根節點開始.</li></ul><hr><h2 id="❀-Solution"><a href="#❀-Solution" class="headerlink" title="❀ Solution"></a>❀ Solution</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; t1</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; t2</span></span><br><span class="line"><span class="comment"> * @return &#123;TreeNode&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> mergeTrees = <span class="function"><span class="keyword">function</span>(<span class="params">t1, t2</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 同樣的位置上如果沒重覆, 至少回傳一個節點</span></span><br><span class="line"><span class="keyword">if</span> (!t1) <span class="keyword">return</span> t2;</span><br><span class="line"><span class="keyword">if</span> (!t2) <span class="keyword">return</span> t1;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立一個新的 TreeNode, 其值為兩個樹的 val 相加</span></span><br><span class="line"><span class="keyword">var</span> newBinaryTree = <span class="keyword">new</span> TreeNode(t1.val + t2.val);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 開始遍歷每個節點, 賦予左子樹為一個新節點, 其值為兩個樹的左子樹的值相加</span></span><br><span class="line">newBinaryTree.left = mergeTrees(t1.left, t2.left);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同上, 右子樹</span></span><br><span class="line">newBinaryTree.right = mergeTrees(t1.right, t2.right);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> newBinaryTree;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ⓁⒸ - Easy </tag>
            
            <tag> Binary Tree </tag>
            
            <tag> ⭐ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ⓁⒸ ‧‧‧ 814. Binary Tree Pruning</title>
      <link href="/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-814-Binary-Tree-Pruning/"/>
      <url>/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-814-Binary-Tree-Pruning/</url>
      
        <content type="html"><![CDATA[<h1 id="814-Binary-Tree-Pruning-二元樹修剪"><a href="#814-Binary-Tree-Pruning-二元樹修剪" class="headerlink" title="814. Binary Tree Pruning 二元樹修剪"></a><a href="https://leetcode.com/problems/binary-tree-pruning/description/" target="_blank" rel="noopener">814. Binary Tree Pruning 二元樹修剪</a></h1><h2 id="❀-Origin"><a href="#❀-Origin" class="headerlink" title="❀ Origin"></a>❀ Origin</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>We are given the head node <code>root</code> of a binary tree, where additionally every node’s value is either a 0 or a 1.<br>Return the same tree where every subtree (of the given tree) not containing a 1 has been removed.<br>(Recall that the subtree of a node X is X, plus every node that is a descendant of X.)</p><h3 id="Example-1"><a href="#Example-1" class="headerlink" title="Example 1"></a>Example 1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,null,0,0,1]</span><br><span class="line">Output: [1,null,0,null,1]</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">Only the red nodes satisfy the property &quot;every subtree not containing a 1&quot;.</span><br><span class="line">The diagram on the right represents the answer.</span><br></pre></td></tr></table></figure><p><img src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/06/1028_2.png" alt="Example 1" width="450px" height="125px"></p><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,0,1,0,0,0,1]</span><br><span class="line">Output: [1,null,1,null,1]</span><br></pre></td></tr></table></figure><p><img src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/06/1028_1.png" alt="Example 2" width="450px" height="125px"></p><h3 id="Example-3"><a href="#Example-3" class="headerlink" title="Example 3"></a>Example 3</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,1,0,1,1,0,1,0]</span><br><span class="line">Output: [1,1,0,1,1,null,1]</span><br></pre></td></tr></table></figure><p><img src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/05/1028.png" alt="Example 3" width="450px" height="125px"></p><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><ul><li>The binary tree will have at most 100 nodes.</li><li>The value of each node will only be 0 or 1.</li></ul><hr><h2 id="❀-翻譯"><a href="#❀-翻譯" class="headerlink" title="❀ 翻譯"></a>❀ 翻譯</h2><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>我們被給予一個二元樹的頭根節點, 另外每個節點的值只會 0 或是 1 .<br>回傳一樣的樹, 但所有不包含 1 的子樹(在被給定的樹)都已經被移除的一樣那棵樹.<br>(回想一下, 節點 X 的子樹是 X , 加上每一個節點都是 X 的後代)</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>該二元樹最多只有 100 個節點.</li><li>每一個節點的值不是 0 就是 1 .</li></ul><hr><h2 id="❀-Solution"><a href="#❀-Solution" class="headerlink" title="❀ Solution"></a>❀ Solution</h2><h3 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a>Idea</h3><ol><li>用 遞迴 進到每一個節點</li><li>判斷是不是其 root.val 是不是 0 , 是的話就給予 null</li></ol><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;TreeNode&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用遞迴去解,</span></span><br><span class="line"><span class="comment">// 類似倒過來想的 #654 (https://github.com/xTobu/LeetCode/tree/master/%23654)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pruneTree = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 如果傳入值 root 只會是 TreeNode ,</span></span><br><span class="line"><span class="comment">// 所以此只判斷 root 是否為 null,</span></span><br><span class="line"><span class="comment">// 若是 便直接回傳.</span></span><br><span class="line"><span class="keyword">if</span> (!root) <span class="keyword">return</span> root;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 對傳入值 root 的 left 要賦予一個新的 TreeNode ,</span></span><br><span class="line"><span class="comment">// 而其 root 必須是目前傳入值的 root.left 的 val.</span></span><br><span class="line">root.left = pruneTree(root.left);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同上</span></span><br><span class="line">root.right = pruneTree(root.right);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 因為前三行程式 ,</span></span><br><span class="line"><span class="comment">// 所以會跑這邊的話, 代表至少到了該二元樹的最左邊的左子樹</span></span><br><span class="line"><span class="comment">// (因為第二或三行的傳入值是 null, 而在他的 pruneTree 的第一行 root 是 null 便回傳了)</span></span><br><span class="line"><span class="comment">// ===========================</span></span><br><span class="line"><span class="comment">// 若 root.left === null &amp;&amp; root.right === null , 代表該 root是最下面的了,</span></span><br><span class="line"><span class="comment">// 如果 root.val === 0 , 則依題意, 刪除此節點 (賦予 null)</span></span><br><span class="line"><span class="comment">// 如果 root.val 不等於  0 ,那一定是 1 , 則回傳此 root.</span></span><br><span class="line"><span class="keyword">return</span> root.left === <span class="literal">null</span> &amp;&amp; root.right === <span class="literal">null</span> &amp;&amp; root.val === <span class="number">0</span></span><br><span class="line">? <span class="literal">null</span></span><br><span class="line">: root;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Execution"><a href="#Execution" class="headerlink" title="Execution"></a>Execution</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,0,1,0,0,0,1]</span><br><span class="line"></span><br><span class="line">               1</span><br><span class="line">            /     \</span><br><span class="line">           0       1</span><br><span class="line">         /   \    /  \</span><br><span class="line">        0     0  0    1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1.</span><br><span class="line">root.val = 1</span><br><span class="line">root.left = new TreeNode(0)</span><br><span class="line">root.right = new TreeNode(1)</span><br><span class="line">               1</span><br><span class="line">            /     \</span><br><span class="line">           0       1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2. left</span><br><span class="line">root.val = 0</span><br><span class="line">root.left = new TreeNode(0)</span><br><span class="line">root.right = new TreeNode(0)</span><br><span class="line">               1</span><br><span class="line">            /     \</span><br><span class="line">           0       1</span><br><span class="line">        /     \</span><br><span class="line">       0       0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3. left left</span><br><span class="line">root.val = 0</span><br><span class="line">root.left = new TreeNode(null)</span><br><span class="line">root.right = new TreeNode(null)</span><br><span class="line">                     1</span><br><span class="line">                  /     \</span><br><span class="line">                 0       1</span><br><span class="line">              /     \</span><br><span class="line">             0       0</span><br><span class="line">          /     \</span><br><span class="line">       null    null</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4. left right</span><br><span class="line">root.val = 0</span><br><span class="line">root.left = new TreeNode(null)</span><br><span class="line">root.right = new TreeNode(null)</span><br><span class="line">                     1</span><br><span class="line">                  /     \</span><br><span class="line">                 0       1</span><br><span class="line">              /     \</span><br><span class="line">             0       0</span><br><span class="line">          /    \    /  \</span><br><span class="line">       null   null null null</span><br><span class="line"></span><br><span class="line">5. left left left</span><br><span class="line"></span><br><span class="line">root == null</span><br><span class="line">return null</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">6. left left right</span><br><span class="line"></span><br><span class="line">root == null</span><br><span class="line">return null</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">7. left right left</span><br><span class="line"></span><br><span class="line">root == null</span><br><span class="line">return null</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">8. left right right</span><br><span class="line"></span><br><span class="line">root == null</span><br><span class="line">return null</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">9. 於是 left left</span><br><span class="line"></span><br><span class="line">root.left === null &amp;&amp; root.right === null &amp;&amp; root.val === 0</span><br><span class="line">return null</span><br><span class="line"></span><br><span class="line">                        1</span><br><span class="line">                    /      \</span><br><span class="line">                  0          1</span><br><span class="line">              /      \</span><br><span class="line">            null       0</span><br><span class="line">          /    \     /    \</span><br><span class="line">       null   null  null  null</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">9. 於是 left right</span><br><span class="line"></span><br><span class="line">root.left === null &amp;&amp; root.right === null &amp;&amp; root.val === 0</span><br><span class="line">return null</span><br><span class="line"></span><br><span class="line">                        1</span><br><span class="line">                    /      \</span><br><span class="line">                  0          1</span><br><span class="line">              /      \</span><br><span class="line">            null      null</span><br><span class="line">          /    \     /    \</span><br><span class="line">       null   null  null  null</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">9. 於是 left</span><br><span class="line"></span><br><span class="line">root.left === null &amp;&amp; root.right === null &amp;&amp; root.val === 0</span><br><span class="line">return null</span><br><span class="line"></span><br><span class="line">                        1</span><br><span class="line">                    /      \</span><br><span class="line">                  null       1</span><br><span class="line">              /      \</span><br><span class="line">            null      null</span><br><span class="line">          /    \     /    \</span><br><span class="line">       null   null  null  null</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">10. 以此類推</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> LeetCode </tag>
            
            <tag> Binary Tree </tag>
            
            <tag> ⭐ </tag>
            
            <tag> ⓁⒸ - Medium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ⓁⒸ ‧‧‧ 461. Hamming Distance</title>
      <link href="/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-461-Hamming-Distance/"/>
      <url>/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-461-Hamming-Distance/</url>
      
        <content type="html"><![CDATA[<h1 id="461-Hamming-Distance-漢明距離"><a href="#461-Hamming-Distance-漢明距離" class="headerlink" title="461. Hamming Distance 漢明距離"></a><a href="https://leetcode.com/problems/hamming-distance/description/" target="_blank" rel="noopener">461. Hamming Distance 漢明距離</a></h1><h2 id="❀-Origin"><a href="#❀-Origin" class="headerlink" title="❀ Origin"></a>❀ Origin</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>The <a href="https://en.wikipedia.org/wiki/Hamming_distance" target="_blank" rel="noopener">Hamming distance</a> between two integers is the number of positions at which the corresponding bits are different.</p><p>Given two integers <code>x</code> and <code>y</code>, calculate the Hamming distance.</p><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><ul><li>0 ≤ x, y &lt; 2<sup>31</sup>.</li></ul><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Input: x = 1, y = 4</span><br><span class="line"></span><br><span class="line">Output: 2</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">1   (0 0 0 1)</span><br><span class="line">4   (0 1 0 0)</span><br><span class="line">       ↑   ↑</span><br><span class="line"></span><br><span class="line">The above arrows point to positions where the corresponding bits are different.</span><br></pre></td></tr></table></figure><hr><h2 id="❀-翻譯"><a href="#❀-翻譯" class="headerlink" title="❀ 翻譯"></a>❀ 翻譯</h2><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>兩個數的漢明距離是相對應的 bits 位置有所不同的數量.<br>給定兩個數 <code>x</code> 和 <code>y</code>, 計算出漢明距離.</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>0 ≤ x, y &lt; 2<sup>31</sup>.</li></ul><hr><h2 id="❀-Solution"><a href="#❀-Solution" class="headerlink" title="❀ Solution"></a>❀ Solution</h2><h3 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a>Idea</h3><ol><li>用 互斥或閘(XOR) 算出兩數的差異數的十進位值</li><li>用 while(){} 算出該數的二進位制有幾個 1</li></ol><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; x</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; y</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 題目為計算兩數間的 Hamming distance ,</span></span><br><span class="line"><span class="comment"> * 漢明距離是說把欲比對的數字轉成都二進制,</span></span><br><span class="line"><span class="comment"> * 在依序相同位置比對是否相異, 總數即為漢明距離.</span></span><br><span class="line"><span class="comment"> * exp:</span></span><br><span class="line"><span class="comment"> *  5   (0 1 0 1)</span></span><br><span class="line"><span class="comment"> * 10   (1 0 1 0)</span></span><br><span class="line"><span class="comment"> *       ↑ ↑ ↑ ↑</span></span><br><span class="line"><span class="comment"> * 差異數：4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 因此先用 ^ = 互斥或閘(XOR) 算出兩數的差異數的十進位值</span></span><br><span class="line"><span class="comment"> * exp:</span></span><br><span class="line"><span class="comment"> * 5 ^ 10 = 15</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  5   (0 1 0 1)</span></span><br><span class="line"><span class="comment"> * 10   (1 0 1 0)</span></span><br><span class="line"><span class="comment"> *       ↑ ↑ ↑ ↑</span></span><br><span class="line"><span class="comment"> * --------------</span></span><br><span class="line"><span class="comment"> * 15   (1 1 1 1)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 在對其值跑 while()&#123;&#125; ,</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> hammingDistance = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 紀錄差異總數用</span></span><br><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用 XOR , 算出兩數的差異數的十進位值 n</span></span><br><span class="line"><span class="keyword">var</span> n = x ^ y;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以其值執行 while()&#123;&#125;  如果 n = 0 , 直接 false 跳出迴圈</span></span><br><span class="line"><span class="keyword">while</span> (n) &#123;</span><br><span class="line"><span class="comment">// 進來一次的等於有一個 1 , count 加一</span></span><br><span class="line">++count;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果進來一次了, n 要換成別的數字</span></span><br><span class="line"><span class="comment">// n 與 (n - 1) 做及閘 AND ,</span></span><br><span class="line"><span class="comment">// 因為每次的 -1 在二進制數字都會減少一個 1 位元 bit</span></span><br><span class="line"><span class="comment">// 數值可能會有兩種狀況, 最右邊 bit 是 1 代表奇數， 0 代表偶數</span></span><br><span class="line"><span class="comment">// 就像 [xxxx10 … 0] - 1 = [xxxx01 … 1]</span></span><br><span class="line"><span class="comment">// AND 只有都為 1 才會為 1, 所以每運算一次相乘，就會少掉一個 1, count 便加一</span></span><br><span class="line"></span><br><span class="line">n = n &amp; (n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Execution"><a href="#Execution" class="headerlink" title="Execution"></a>Execution</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">5 ^ 10 = 15</span><br><span class="line"></span><br><span class="line"> 5   (0 1 0 1)</span><br><span class="line">10   (1 0 1 0)</span><br><span class="line">      ↑ ↑ ↑ ↑</span><br><span class="line">--------------</span><br><span class="line">15   (1 1 1 1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">=================</span><br><span class="line">1.</span><br><span class="line">n = 15</span><br><span class="line">count = 1</span><br><span class="line"></span><br><span class="line">15   (1 1 1 1)</span><br><span class="line">14   (1 1 1 0)</span><br><span class="line">      ↑ ↑ ↑ ↑</span><br><span class="line">--------------</span><br><span class="line">14   (1 1 1 0)</span><br><span class="line">=================</span><br><span class="line">2.</span><br><span class="line">n = 14</span><br><span class="line">count = 2</span><br><span class="line"></span><br><span class="line">14   (1 1 1 0)</span><br><span class="line">13   (1 1 0 1)</span><br><span class="line">      ↑ ↑ ↑ ↑</span><br><span class="line">--------------</span><br><span class="line">12   (1 1 0 0)</span><br><span class="line"></span><br><span class="line">=================</span><br><span class="line">3.</span><br><span class="line">n = 12</span><br><span class="line">count = 3</span><br><span class="line"></span><br><span class="line">12   (1 1 0 0)</span><br><span class="line">11   (1 0 1 1)</span><br><span class="line">      ↑ ↑ ↑ ↑</span><br><span class="line">--------------</span><br><span class="line"> 8   (1 0 0 0)</span><br><span class="line"></span><br><span class="line">=================</span><br><span class="line">4.</span><br><span class="line">n = 8</span><br><span class="line">count = 4</span><br><span class="line"></span><br><span class="line"> 8   (1 0 0 0)</span><br><span class="line"> 7   (0 1 1 1)</span><br><span class="line">      ↑ ↑ ↑ ↑</span><br><span class="line">--------------</span><br><span class="line"> 0   (0 0 0 0)</span><br><span class="line"></span><br><span class="line">=================</span><br><span class="line">5.</span><br><span class="line">n = 0</span><br><span class="line">count = 4</span><br><span class="line">回傳 count</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ⓁⒸ - Easy </tag>
            
            <tag> ⭐ </tag>
            
            <tag> XOR </tag>
            
            <tag> While </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ⓁⒸ ‧‧‧ 654. Maximum Binary Tree</title>
      <link href="/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-654-Maximum-Binary-Tree/"/>
      <url>/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-654-Maximum-Binary-Tree/</url>
      
        <content type="html"><![CDATA[<h1 id="654-Maximum-Binary-Tree-最大二元樹"><a href="#654-Maximum-Binary-Tree-最大二元樹" class="headerlink" title="654. Maximum Binary Tree 最大二元樹"></a><a href="https://leetcode.com/problems/maximum-binary-tree/description/" target="_blank" rel="noopener">654. Maximum Binary Tree 最大二元樹</a></h1><h2 id="❀-Origin"><a href="#❀-Origin" class="headerlink" title="❀ Origin"></a>❀ Origin</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Given an integer array with no duplicates. A maximum tree building on this array is defined as follow:</p><ol><li>The root is the maximum number in the array.</li><li>The left subtree is the maximum tree constructed from left part subarray divided by the maximum number.</li><li>The right subtree is the maximum tree constructed from right part subarray divided by the maximum number.</li></ol><p>Construct the maximum tree by the given array and output the root node of this tree.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Input: [3,2,1,6,0,5]</span><br><span class="line">Output: return the tree root node representing the following tree:</span><br><span class="line"></span><br><span class="line">      6</span><br><span class="line">    /   \</span><br><span class="line">   3     5</span><br><span class="line">    \    /</span><br><span class="line">     2  0</span><br><span class="line">       \</span><br><span class="line">        1</span><br></pre></td></tr></table></figure><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><ul><li>The size of the given array will be in the range [1,1000].</li></ul><hr><h2 id="❀-翻譯"><a href="#❀-翻譯" class="headerlink" title="❀ 翻譯"></a>❀ 翻譯</h2><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>給定一個不重複的整數陣列, 一個以此陣列建立的最大二元樹的定義如下:</p><ol><li>根節點為其陣列中的最大值</li><li>左子樹是得出的最大值的左邊範圍所建構出的最大二元樹</li><li>右子樹是得出的最大值的右邊範圍所建構出的最大二元樹</li></ol><p>使用給定的陣列建構出最大二元樹, 並輸出該樹的根節點</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>給定陣列的長度範圍為 1 ~ 1000 .</li></ul><hr><h2 id="❀-Solution"><a href="#❀-Solution" class="headerlink" title="❀ Solution"></a>❀ Solution</h2><h3 id="Idea"><a href="#Idea" class="headerlink" title="Idea"></a>Idea</h3><ol><li>建立抓最大值的 function</li><li>建立產生最大二元樹的 function</li><li>對其執行遞迴</li></ol><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 取得陣列最大值的位置</span></span><br><span class="line"><span class="comment">// arr.indexOf(Math.max(...arr));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;TreeNode&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TreeNode</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.val = val;</span><br><span class="line"><span class="keyword">this</span>.left = <span class="keyword">this</span>.right = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 從 array 內, 自訂起始與結束位置,</span></span><br><span class="line"><span class="comment"> * 找出最大值的位置.</span></span><br><span class="line"><span class="comment"> * 為了每個節點要找 root 的位置時使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getEachArrayMaxIndex</span>(<span class="params">arrayNums, begin, end</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// slice() 方法會回傳一個新陣列物件，為原陣列選擇之 begin 至 end（不含 end）</span></span><br><span class="line"><span class="comment">// 先建立一個目標範圍(左右子樹)的陣列</span></span><br><span class="line"><span class="keyword">var</span> arrayClone = arrayNums.slice(begin, end + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Math.max() 函式會回傳多個數字或陣列中的最大值</span></span><br><span class="line"><span class="comment">// 再用 indexOf() , 找出該值再原陣列 arrayNums 中的位置</span></span><br><span class="line"><span class="keyword">return</span> arrayNums.indexOf(<span class="built_in">Math</span>.max(...arrayClone));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 建立每個 MaxBinaryTree, 並執行遞迴 recursive </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createMaxBinaryTree</span>(<span class="params">arrayNums, begin, end</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 如果起始位大於結束位置, 一定找不到值, 故回傳 null 結束子樹</span></span><br><span class="line"><span class="keyword">if</span> (begin &gt; end) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 從給定的陣列起始結束位置, 找出最大值的位置</span></span><br><span class="line"><span class="keyword">var</span> indexMax = getEachArrayMaxIndex(arrayNums, begin, end);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 建立一個新的 BinaryTree , 並給其 root 的值為該目標陣列的最大值 arrayNums[indexMax]</span></span><br><span class="line"><span class="keyword">var</span> BinaryTree = <span class="keyword">new</span> TreeNode(arrayNums[indexMax]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//這個 BinaryTree 的左子樹, 等於以目標陣列的最大值的位置的左邊為目標陣列, 去建立新的 BinaryTree</span></span><br><span class="line">BinaryTree.left = createMaxBinaryTree(arrayNums, begin, indexMax - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同上, 右邊為右子樹</span></span><br><span class="line">BinaryTree.right = createMaxBinaryTree(arrayNums, indexMax + <span class="number">1</span>, end);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回傳結果</span></span><br><span class="line"><span class="keyword">return</span> BinaryTree;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> constructMaximumBinaryTree = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 回傳自定義的 createMaxBinaryTree() , 並把最初陣列與起始結束位置傳過去</span></span><br><span class="line"><span class="keyword">return</span> createMaxBinaryTree(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//console.log(constructMaximumBinaryTree(arr));</span></span><br></pre></td></tr></table></figure><h3 id="Execution"><a href="#Execution" class="headerlink" title="Execution"></a>Execution</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JavaScript</span></span><br><span class="line"></span><br><span class="line">[<span class="number">0</span>] root</span><br><span class="line">arrayTarget = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">0</span>,<span class="number">5</span>]</span><br><span class="line">begin = <span class="number">0</span></span><br><span class="line">end = <span class="number">5</span></span><br><span class="line">indexMax = <span class="number">3</span></span><br><span class="line">root.val = nums[<span class="number">3</span>] = <span class="number">6</span></span><br><span class="line">root.left = <span class="keyword">new</span> root(nums, begin, indexMax<span class="number">-1</span>) = <span class="keyword">new</span> root(nums, <span class="number">0</span>, <span class="number">2</span>)</span><br><span class="line">root.right = <span class="keyword">new</span> root(nums, indexMax+<span class="number">1</span>, end) = <span class="keyword">new</span> root(nums, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">      <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////////////////////////////</span></span><br><span class="line">[<span class="number">1</span>] left</span><br><span class="line">arrayTarget = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">begin = <span class="number">0</span></span><br><span class="line">end = <span class="number">2</span></span><br><span class="line">indexMax = <span class="number">0</span></span><br><span class="line">root.val = nums[<span class="number">0</span>] = <span class="number">3</span></span><br><span class="line">root.left = <span class="keyword">new</span> root(nums, begin, indexMax<span class="number">-1</span>) = <span class="keyword">new</span> root(nums, <span class="number">0</span>, <span class="number">-1</span>)</span><br><span class="line">root.right = <span class="keyword">new</span> root(nums, indexMax+<span class="number">1</span>, end) = <span class="keyword">new</span> root(nums, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">      <span class="number">6</span></span><br><span class="line">    /</span><br><span class="line">   <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////////////////////////////</span></span><br><span class="line">[<span class="number">2</span>] right</span><br><span class="line">arrayTarget = [<span class="number">0</span>,<span class="number">5</span>]</span><br><span class="line">begin = <span class="number">4</span></span><br><span class="line">end = <span class="number">5</span></span><br><span class="line">indexMax = <span class="number">5</span></span><br><span class="line">root.val = nums[<span class="number">5</span>] = <span class="number">5</span></span><br><span class="line">root.left = <span class="keyword">new</span> root(nums, begin, indexMax<span class="number">-1</span>) = <span class="keyword">new</span> root(nums, <span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line">root.right = <span class="keyword">new</span> root(nums, indexMax+<span class="number">1</span>, end) = <span class="keyword">new</span> root(nums, <span class="number">6</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">      <span class="number">6</span></span><br><span class="line">    /   \</span><br><span class="line">   <span class="number">3</span>     <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////////////////////////////</span></span><br><span class="line">[<span class="number">3</span>] left left</span><br><span class="line">begin = <span class="number">0</span></span><br><span class="line">end = <span class="number">-1</span></span><br><span class="line">begin &gt; end</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">          <span class="number">6</span></span><br><span class="line">        /   \</span><br><span class="line">      <span class="number">3</span>       <span class="number">5</span></span><br><span class="line">    /  </span><br><span class="line"> <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////////////////////////////</span></span><br><span class="line">[<span class="number">4</span>] left righ</span><br><span class="line">arrayTarget = [<span class="number">2</span>,<span class="number">1</span>]</span><br><span class="line">begin = <span class="number">1</span></span><br><span class="line">end = <span class="number">2</span></span><br><span class="line">indexMax = <span class="number">1</span></span><br><span class="line">root.val = nums[<span class="number">1</span>] = <span class="number">2</span></span><br><span class="line">root.left = <span class="keyword">new</span> root(nums, begin, indexMax<span class="number">-1</span>) = <span class="keyword">new</span> root(nums, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">root.right = <span class="keyword">new</span> root(nums, indexMax+<span class="number">1</span>, end) = <span class="keyword">new</span> root(nums, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">          <span class="number">6</span></span><br><span class="line">        /   \</span><br><span class="line">      <span class="number">3</span>       <span class="number">5</span></span><br><span class="line">    /   \</span><br><span class="line"> <span class="literal">null</span>    <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////////////////////////////</span></span><br><span class="line">[<span class="number">5</span>] righ left</span><br><span class="line">arrayTarget = [<span class="number">0</span>]</span><br><span class="line">begin = <span class="number">4</span></span><br><span class="line">end = <span class="number">4</span></span><br><span class="line">indexMax = <span class="number">4</span></span><br><span class="line">root.val = nums[<span class="number">4</span>] = <span class="number">0</span></span><br><span class="line">root.left = <span class="keyword">new</span> root(nums, begin, indexMax<span class="number">-1</span>) = <span class="keyword">new</span> root(nums, <span class="number">4</span>, <span class="number">3</span>)</span><br><span class="line">root.right = <span class="keyword">new</span> root(nums, indexMax+<span class="number">1</span>, end) = <span class="keyword">new</span> root(nums, <span class="number">5</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">          <span class="number">6</span></span><br><span class="line">        /    \</span><br><span class="line">      <span class="number">3</span>        <span class="number">5</span></span><br><span class="line">    /   \     /</span><br><span class="line"> <span class="literal">null</span>    <span class="number">2</span>   <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////////////////////////////</span></span><br><span class="line">[<span class="number">6</span>] righ right</span><br><span class="line">begin = <span class="number">6</span></span><br><span class="line">end = <span class="number">5</span></span><br><span class="line">begin &gt; end</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">          <span class="number">6</span></span><br><span class="line">        /    \</span><br><span class="line">      <span class="number">3</span>        <span class="number">5</span></span><br><span class="line">    /   \     / \</span><br><span class="line"> <span class="literal">null</span>    <span class="number">2</span>   <span class="number">0</span>   <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////////////////////////////</span></span><br><span class="line">[x] left left left</span><br><span class="line"></span><br><span class="line">left left = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////////////////////////////</span></span><br><span class="line">[x] left left right</span><br><span class="line"></span><br><span class="line">left left = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////////////////////////////</span></span><br><span class="line">[<span class="number">7</span>] left right left</span><br><span class="line">begin = <span class="number">1</span></span><br><span class="line">end = <span class="number">0</span></span><br><span class="line">begin &gt; end</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">               <span class="number">6</span></span><br><span class="line">            /     \</span><br><span class="line">          <span class="number">3</span>        <span class="number">5</span></span><br><span class="line">        /   \     /  \</span><br><span class="line">     <span class="literal">null</span>    <span class="number">2</span>   <span class="number">0</span>   <span class="literal">null</span></span><br><span class="line">           /</span><br><span class="line">         <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////////////////////////////</span></span><br><span class="line">[<span class="number">8</span>] left right right</span><br><span class="line">arrayTarget = [<span class="number">1</span>]</span><br><span class="line">begin = <span class="number">2</span></span><br><span class="line">end = <span class="number">2</span></span><br><span class="line">indexMax = <span class="number">2</span></span><br><span class="line">root.val = nums[<span class="number">2</span>] = <span class="number">1</span></span><br><span class="line">root.left = <span class="keyword">new</span> root(nums, begin, indexMax<span class="number">-1</span>) = <span class="keyword">new</span> root(nums, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">root.right = <span class="keyword">new</span> root(nums, indexMax+<span class="number">1</span>, end) = <span class="keyword">new</span> root(nums, <span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">               <span class="number">6</span></span><br><span class="line">            /     \</span><br><span class="line">          <span class="number">3</span>        <span class="number">5</span></span><br><span class="line">        /   \     /  \</span><br><span class="line">     <span class="literal">null</span>    <span class="number">2</span>   <span class="number">0</span>   <span class="literal">null</span></span><br><span class="line">           /   \</span><br><span class="line">         <span class="literal">null</span>   <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////////////////////////////</span></span><br><span class="line">[<span class="number">9</span>] right left left</span><br><span class="line">begin = <span class="number">4</span></span><br><span class="line">end = <span class="number">3</span></span><br><span class="line">begin &gt; end</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                   <span class="number">6</span></span><br><span class="line">            /            \</span><br><span class="line">          <span class="number">3</span>               <span class="number">5</span></span><br><span class="line">        /   \            /  \</span><br><span class="line">     <span class="literal">null</span>    <span class="number">2</span>          <span class="number">0</span>   <span class="literal">null</span></span><br><span class="line">           /   \      /</span><br><span class="line">         <span class="literal">null</span>   <span class="number">1</span>   <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////////////////////////////</span></span><br><span class="line">[<span class="number">10</span>] right left right</span><br><span class="line">begin = <span class="number">5</span></span><br><span class="line">end = <span class="number">4</span></span><br><span class="line">begin &gt; end</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                   <span class="number">6</span></span><br><span class="line">            /            \</span><br><span class="line">          <span class="number">3</span>               <span class="number">5</span></span><br><span class="line">        /   \            /  \</span><br><span class="line">     <span class="literal">null</span>    <span class="number">2</span>          <span class="number">0</span>   <span class="literal">null</span></span><br><span class="line">           /   \      /   \</span><br><span class="line">         <span class="literal">null</span>   <span class="number">1</span>   <span class="literal">null</span>  <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////////////////////////////</span></span><br><span class="line">[x]  right right left</span><br><span class="line"></span><br><span class="line">right right = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////////////////////////////</span></span><br><span class="line">[x]  right right right</span><br><span class="line"></span><br><span class="line">right right = <span class="literal">null</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> LeetCode </tag>
            
            <tag> Binary Tree </tag>
            
            <tag> Math.max() </tag>
            
            <tag> ⭐ </tag>
            
            <tag> Recursive </tag>
            
            <tag> ⓁⒸ - Medium </tag>
            
            <tag> Array.slice() </tag>
            
            <tag> Array.index() </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ⓁⒸ ‧‧‧ 807. Max Increase to Keep City Skyline</title>
      <link href="/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-807-Max-Increase-to-Keep-City-Skyline/"/>
      <url>/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-807-Max-Increase-to-Keep-City-Skyline/</url>
      
        <content type="html"><![CDATA[<h1 id="807-Max-Increase-to-Keep-City-Skyline-保持城市天際線的最大增量"><a href="#807-Max-Increase-to-Keep-City-Skyline-保持城市天際線的最大增量" class="headerlink" title="807. Max Increase to Keep City Skyline 保持城市天際線的最大增量"></a><a href="https://blog.csdn.net/fuxuemingzhu/article/details/79820383" target="_blank" rel="noopener">807. Max Increase to Keep City Skyline 保持城市天際線的最大增量</a></h1><h2 id="❀-Origin"><a href="#❀-Origin" class="headerlink" title="❀ Origin"></a>❀ Origin</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>In a 2 dimensional array <code>grid</code>, each value <code>grid[i][j]</code> represents the height of a building located there.<br>We are allowed to increase the height of any number of buildings, by any amount (the amounts can be different for different buildings).<br>Height 0 is considered to be a building as well. </p><p>At the end, the “skyline” when viewed from all four directions of the grid,<br>i.e. top, bottom, left, and right, must be the same as the skyline of the original grid.<br>A city’s skyline is the outer contour of the rectangles formed by all the buildings when viewed from a distance. See the following example.</p><p>What is the maximum total sum that the height of the buildings can be increased?</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Example:</span><br><span class="line">Input: grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]</span><br><span class="line">Output: 35</span><br><span class="line">Explanation: </span><br><span class="line">The grid is:</span><br><span class="line">[ [3, 0, 8, 4], </span><br><span class="line">  [2, 4, 5, 7],</span><br><span class="line">  [9, 2, 6, 3],</span><br><span class="line">  [0, 3, 1, 0] ]</span><br><span class="line"></span><br><span class="line">The skyline viewed from top or bottom is: [9, 4, 8, 7]</span><br><span class="line">The skyline viewed from left or right is: [8, 7, 9, 3]</span><br><span class="line"></span><br><span class="line">The grid after increasing the height of buildings without affecting skylines is:</span><br><span class="line"></span><br><span class="line">gridNew = [ [8, 4, 8, 7],</span><br><span class="line">            [7, 4, 7, 7],</span><br><span class="line">            [9, 4, 8, 7],</span><br><span class="line">            [3, 3, 3, 3] ]</span><br></pre></td></tr></table></figure><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><ul><li>1 &lt; grid.length = grid[0].length &lt;= 50.</li><li>All heights <code>grid[i][j]</code> are in the range <code>[0, 100]</code>.</li><li>All buildings in <code>grid[i][j]</code> occupy the entire grid cell: that is, they are a <code>1 x 1 x grid[i][j]</code> rectangular prism.</li></ul><hr><h2 id="❀-翻譯"><a href="#❀-翻譯" class="headerlink" title="❀ 翻譯"></a>❀ 翻譯</h2><h3 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem"></a>Problem</h3><p>在二維陣列 <code>grid</code> 的網格中, 每一個 <code>grid[i][j]</code> 代表著一個在那裏的建築物的高度.<br>我們允許增加任意數量欲增加高度的建築物, 任意的建築物增高量(數量會因為建築物而不同).<br>高度 0 也被認為是一棟建築物.  </p><p>最後, 從 grid 的四個方向所看到的天際線, 即上下左右, 其必須與原本的 grid 的天際線相同.<br>一個城市的天際線是從遠處看過去時, 所有建築物所組成的矩形外部輪廓.<br>看下面例子.  </p><p>請問每棟建築物可以增加的最大量的總和是?</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>grid 是二維陣列, 因此 grid 的長度和 grid[0] 的長度相等, 且範圍為 1 ~ 50 之間.  </li><li>因此每一個值 <code>grid[i][j]</code> 的範圍在 0 ~ 100 之間.  </li><li>每個在 <code>grid[i][j]</code> 的建築物都占據了整個網格單元, 也就是說每個建築物是的 <code>1 x 1 x grid[i][j]</code> 的直角角柱體.  </li></ul><hr><h2 id="❀-Solution"><a href="#❀-Solution" class="headerlink" title="❀ Solution"></a>❀ Solution</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[][]&#125; grid</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> grid = [[<span class="number">3</span>, <span class="number">0</span>, <span class="number">8</span>, <span class="number">4</span>], [<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>], [<span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">3</span>], [<span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>]];</span><br><span class="line"><span class="keyword">var</span> maxIncreaseKeepingSkyline = <span class="function"><span class="keyword">function</span>(<span class="params">grid</span>) </span>&#123;</span><br><span class="line"><span class="comment">/** 取得列的數量 */</span></span><br><span class="line"><span class="keyword">var</span> lengthRow = grid.length;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 取得行的數量 */</span></span><br><span class="line"><span class="keyword">var</span> lengthCol = grid[<span class="number">0</span>].length;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 因為之後會用 Math.max(a, b) 來比較大小</span></span><br><span class="line"><span class="comment"> *  故存放行列最大值的陣列必須先擺 0 進去.</span></span><br><span class="line"><span class="comment"> *  ( 因應題目, 從前後左右所看過去的大樓天際線高度必須是不變的 ,</span></span><br><span class="line"><span class="comment"> *    故必須取得 Row 和 Col 的最大值)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/** 列方向的天際線最大值 */</span></span><br><span class="line"><span class="keyword">var</span> maxRow = <span class="built_in">Array</span>(lengthRow).fill(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 行方向的天際線最大值 */</span></span><br><span class="line"><span class="keyword">var</span> maxCol = <span class="built_in">Array</span>(lengthCol).fill(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** for 迴圈每一個 Row  */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> indexRow = <span class="number">0</span>; indexRow &lt; lengthRow; indexRow++) &#123;</span><br><span class="line"><span class="comment">/** 定義一個 Row, 暫存此二維陣列的第 indexRow 個列*/</span></span><br><span class="line"><span class="keyword">let</span> Row = grid[indexRow];</span><br><span class="line"><span class="comment">/** for 迴圈每一個 Row 的每一個值, 數量為行的數量 lengthCol */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> indexCol = <span class="number">0</span>; indexCol &lt; lengthCol; indexCol++) &#123;</span><br><span class="line"><span class="comment">/** 定義一個 val, 暫存每一個值 */</span></span><br><span class="line"><span class="keyword">let</span> val = Row[indexCol];</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 計算 maxRow 的過程</span></span><br><span class="line"><span class="comment"> *  Row 迴圈在外, 所以 indexRow 固定, 依照 Col 的數量跑迴圈,</span></span><br><span class="line"><span class="comment"> *  跟 每一個的值 val 做比較.</span></span><br><span class="line"><span class="comment"> *  抓出 第 indexRow 的 Row 的最大值.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">maxRow[indexRow] = <span class="built_in">Math</span>.max(maxRow[indexRow], val);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 計算 maxCol 的過程</span></span><br><span class="line"><span class="comment"> *  maxCol 的 indexCol 固定, 跟 每一個的值 val 做比較.</span></span><br><span class="line"><span class="comment"> *  抓出該 indexCol 在 每一個 Row 的相同位置的最大值.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">maxCol[indexCol] = <span class="built_in">Math</span>.max(maxCol[indexCol], val);</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最高行與最高列, 與每一個大樓至少到的高度</span></span><br><span class="line">    <span class="comment">// __|_9__4__8__7__</span></span><br><span class="line">    <span class="comment">// 8 | 8, 4, 8, 7</span></span><br><span class="line">    <span class="comment">// 7 | 7, 4, 7, 7</span></span><br><span class="line">    <span class="comment">// 9 | 9, 4, 8, 7</span></span><br><span class="line">    <span class="comment">// 3 | 3, 3, 3, 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** 初始化總和 */</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 因為要總共要增加樓層高度的總和, 因此再跑一次遍歷的迴圈 */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> indexRow = <span class="number">0</span>; indexRow &lt; lengthRow; indexRow++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> indexCol = <span class="number">0</span>; indexCol &lt; lengthCol; indexCol++) &#123;</span><br><span class="line"><span class="comment">/** 每個位置的原始值 */</span></span><br><span class="line"><span class="keyword">let</span> val = grid[indexRow][indexCol];</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 題目要求, 從各方向看過去的天際線的高度必須不變,</span></span><br><span class="line"><span class="comment"> *  因此, 每一棟樓調整的值是該棟大樓的列與行的最小值</span></span><br><span class="line"><span class="comment"> *  (因為要看的是天際線, 且必須和原本天際線一樣形狀, 故只可取最小值, 同方向只會看到最高的),</span></span><br><span class="line"><span class="comment"> *  假設我們已經讓其增加到其所在行的最高天際線和其所在列的最高天際線的最小值,</span></span><br><span class="line"><span class="comment"> *  再將該值與原本矩陣位置的值相減, 變可得出該位置需增加多少.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** 該大樓至少增加到的高度,</span></span><br><span class="line"><span class="comment"> *  最高行與最高列的最小值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> new_val = <span class="built_in">Math</span>.min(maxRow[indexRow], maxCol[indexCol]);</span><br><span class="line"></span><br><span class="line">sum += new_val - val;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ⓁⒸ - Medium </tag>
            
            <tag> ⭐⭐ </tag>
            
            <tag> Skyline </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ⓁⒸ ‧‧‧ 832. Flipping an Image</title>
      <link href="/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-832-Flipping-an-Image/"/>
      <url>/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-832-Flipping-an-Image/</url>
      
        <content type="html"><![CDATA[<h1 id="832-Flipping-an-Image-翻轉圖片"><a href="#832-Flipping-an-Image-翻轉圖片" class="headerlink" title="832. Flipping an Image 翻轉圖片"></a><a href="https://leetcode.com/problems/flipping-an-image/description/" target="_blank" rel="noopener">832. Flipping an Image 翻轉圖片</a></h1><h2 id="❀-Origin"><a href="#❀-Origin" class="headerlink" title="❀ Origin"></a>❀ Origin</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Given a binary matrix <code>A</code>, we want to flip the image horizontally, then invert it, and return the resulting image.<br>To flip an image horizontally means that each row of the image is reversed. For example, flipping <code>[1, 1, 0]</code> horizontally results in <code>[0, 1, 1]</code>.<br>To invert an image means that each <code>0</code> is replaced by <code>1</code>, and each <code>1</code> is replaced by <code>0</code>. For example, inverting <code>[0, 1, 1]</code> results in <code>[1, 0, 0]</code>.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: [[1,1,0],[1,0,1],[0,0,0]]</span><br><span class="line">Output: [[1,0,0],[0,1,0],[1,1,1]]</span><br><span class="line">Explanation: First reverse each row: [[0,1,1],[1,0,1],[0,0,0]].</span><br><span class="line">Then, invert the image: [[1,0,0],[0,1,0],[1,1,1]]</span><br></pre></td></tr></table></figure><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]</span><br><span class="line">Output: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]</span><br><span class="line">Explanation: First reverse each row: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]].</span><br><span class="line">Then invert the image: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]</span><br></pre></td></tr></table></figure><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><ul><li>1 &lt;= A.length = A[0].length &lt;= 20</li><li>0 &lt;= A[i][j] &lt;= 1</li></ul><hr><h2 id="❀-翻譯"><a href="#❀-翻譯" class="headerlink" title="❀ 翻譯"></a>❀ 翻譯</h2><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>給定一個二進制矩陣 <code>A</code>, 我們想要將圖片水平翻轉, 並反轉它, 之後回傳結果圖片.<br>想要水平翻轉意味著圖片的每一行都要相反.<br>舉例, 水平翻轉 <code>[1, 1, 0]</code> 的結果為 <code>[0, 1, 1]</code>.<br>想要反轉意味著每個 <code>0</code> 都要被取代成 <code>1</code>, 每個 <code>1</code> 都要被取代成 <code>0</code>.<br>舉例, 反轉 <code>[0, 1, 1]</code> 的結果為 <code>[1, 0, 0]</code>.</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>A 是二進制矩陣, 因此 A 的長度和 A[0] 的長度相等, 且範圍為 1 ~ 20 之間.</li><li>A 是二進制矩陣, 因此每一個值不是 0 就是 1.</li></ul><hr><h2 id="❀-Solution"><a href="#❀-Solution" class="headerlink" title="❀ Solution"></a>❀ Solution</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[][]&#125; A // [[1,1,0],[1,0,1],[0,0,0]]</span></span><br><span class="line"><span class="comment"> * @return &#123;number[][]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> flipAndInvertImage = <span class="function"><span class="keyword">function</span>(<span class="params">A</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/** 對 A 做 map.() */</span></span><br><span class="line">  <span class="keyword">const</span> result = A.map(<span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/** 先將其每一個的元素, 即每一個陣列做 .reverse(), 以完成圖片的水平翻轉.</span></span><br><span class="line"><span class="comment">     *之後再將處理過的陣列做 map.(). */</span></span><br><span class="line">    <span class="keyword">return</span> element.reverse().map(<span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">      <span class="comment">/** 將其值做 0 與 1 的反轉計算, 以完成圖片反轉. */</span></span><br><span class="line">      <span class="keyword">return</span> val == <span class="number">0</span> ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> result; <span class="comment">//[[1,0,0],[0,1,0],[1,1,1]]</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ⓁⒸ - Easy </tag>
            
            <tag> ☄️ </tag>
            
            <tag> Array.reverse() </tag>
            
            <tag> Array.map() </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ⓁⒸ ‧‧‧ 804. Unique Morse Code Words</title>
      <link href="/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-804-Unique-Morse-Code-Words/"/>
      <url>/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-804-Unique-Morse-Code-Words/</url>
      
        <content type="html"><![CDATA[<h1 id="804-Unique-Morse-Code-Words-獨特摩斯密碼字"><a href="#804-Unique-Morse-Code-Words-獨特摩斯密碼字" class="headerlink" title="804. Unique Morse Code Words 獨特摩斯密碼字"></a><a href="https://leetcode.com/problems/unique-morse-code-words/description/" target="_blank" rel="noopener">804. Unique Morse Code Words 獨特摩斯密碼字</a></h1><h2 id="❀-Origin"><a href="#❀-Origin" class="headerlink" title="❀ Origin"></a>❀ Origin</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>International Morse Code defines a standard encoding where each letter is mapped to a series of dots and dashes,<br>as follows: <code>&quot;a&quot;</code> maps to <code>&quot;.-&quot;</code> , <code>&quot;b&quot;</code> maps to <code>&quot;-...&quot;</code> , <code>&quot;c&quot;</code> maps to <code>&quot;-.-.&quot;</code> , and so on.</p><p>For convenience, the full table for the 26 letters of the English alphabet is given below:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  <span class="string">".-"</span>,</span><br><span class="line">  <span class="string">"-..."</span>,</span><br><span class="line">  <span class="string">"-.-."</span>,</span><br><span class="line">  <span class="string">"-.."</span>,</span><br><span class="line">  <span class="string">"."</span>,</span><br><span class="line">  <span class="string">"..-."</span>,</span><br><span class="line">  <span class="string">"--."</span>,</span><br><span class="line">  <span class="string">"...."</span>,</span><br><span class="line">  <span class="string">".."</span>,</span><br><span class="line">  <span class="string">".---"</span>,</span><br><span class="line">  <span class="string">"-.-"</span>,</span><br><span class="line">  <span class="string">".-.."</span>,</span><br><span class="line">  <span class="string">"--"</span>,</span><br><span class="line">  <span class="string">"-."</span>,</span><br><span class="line">  <span class="string">"---"</span>,</span><br><span class="line">  <span class="string">".--."</span>,</span><br><span class="line">  <span class="string">"--.-"</span>,</span><br><span class="line">  <span class="string">".-."</span>,</span><br><span class="line">  <span class="string">"..."</span>,</span><br><span class="line">  <span class="string">"-"</span>,</span><br><span class="line">  <span class="string">"..-"</span>,</span><br><span class="line">  <span class="string">"...-"</span>,</span><br><span class="line">  <span class="string">".--"</span>,</span><br><span class="line">  <span class="string">"-..-"</span>,</span><br><span class="line">  <span class="string">"-.--"</span>,</span><br><span class="line">  <span class="string">"--.."</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>Now, given a list of words, each word can be written as a concatenation of the Morse code of each letter.<br>For example, “cab” can be written as “-.-.-….-“, (which is the concatenation “-.-.” + “-…” + “.-“).<br>We’ll call such a concatenation, the transformation of a word.</p><p>Return the number of different transformations among all words we have.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Input: words = [&quot;gin&quot;, &quot;zen&quot;, &quot;gig&quot;, &quot;msg&quot;]</span><br><span class="line">Output: 2</span><br><span class="line">Explanation:</span><br><span class="line">The transformation of each word is:</span><br><span class="line">&quot;gin&quot; -&gt; &quot;--...-.&quot;</span><br><span class="line">&quot;zen&quot; -&gt; &quot;--...-.&quot;</span><br><span class="line">&quot;gig&quot; -&gt; &quot;--...--.&quot;</span><br><span class="line">&quot;msg&quot; -&gt; &quot;--...--.&quot;</span><br><span class="line"></span><br><span class="line">There are 2 different transformations, &quot;--...-.&quot; and &quot;--...--.&quot;.</span><br></pre></td></tr></table></figure><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><ul><li>The length of words will be at most 100.</li><li>Each words[i] will have length in range [1, 12].</li><li>words[i] will only consist of lowercase letters.</li></ul><hr><h2 id="❀-翻譯"><a href="#❀-翻譯" class="headerlink" title="❀ 翻譯"></a>❀ 翻譯</h2><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>國際摩斯密碼定義了一種標準的編碼,<br>每一個字母會對應到一連串的點點和破折號.<br>如下: <code>&quot;a&quot;</code> 代表 <code>&quot;.-&quot;</code> , <code>&quot;b&quot;</code> 代表 <code>&quot;-...&quot;</code> , <code>&quot;c&quot;</code> 代表 <code>&quot;-.-.&quot;</code> , 以此類推.</p><p>為方便起見, 完整 26 個英文字母的對應表如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  <span class="string">".-"</span>,</span><br><span class="line">  <span class="string">"-..."</span>,</span><br><span class="line">  <span class="string">"-.-."</span>,</span><br><span class="line">  <span class="string">"-.."</span>,</span><br><span class="line">  <span class="string">"."</span>,</span><br><span class="line">  <span class="string">"..-."</span>,</span><br><span class="line">  <span class="string">"--."</span>,</span><br><span class="line">  <span class="string">"...."</span>,</span><br><span class="line">  <span class="string">".."</span>,</span><br><span class="line">  <span class="string">".---"</span>,</span><br><span class="line">  <span class="string">"-.-"</span>,</span><br><span class="line">  <span class="string">".-.."</span>,</span><br><span class="line">  <span class="string">"--"</span>,</span><br><span class="line">  <span class="string">"-."</span>,</span><br><span class="line">  <span class="string">"---"</span>,</span><br><span class="line">  <span class="string">".--."</span>,</span><br><span class="line">  <span class="string">"--.-"</span>,</span><br><span class="line">  <span class="string">".-."</span>,</span><br><span class="line">  <span class="string">"..."</span>,</span><br><span class="line">  <span class="string">"-"</span>,</span><br><span class="line">  <span class="string">"..-"</span>,</span><br><span class="line">  <span class="string">"...-"</span>,</span><br><span class="line">  <span class="string">".--"</span>,</span><br><span class="line">  <span class="string">"-..-"</span>,</span><br><span class="line">  <span class="string">"-.--"</span>,</span><br><span class="line">  <span class="string">"--.."</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>現在, 收到一個字詞列表, 每個單字可以寫成每個字母的摩斯密碼連結.<br>譬如, “cab” 可以寫做 “-.-.-….-“, (即是 “-.-.” + “-…” + “.-“ 的串聯).<br>我們將這樣子的串聯稱做單字轉換.</p><p>回傳所有單字可轉換成摩斯密碼的數量.</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>字詞 words 的長度最多為 100</li><li>每個單字 words[i] 的長度的範圍為 [1, 12]</li><li>單字 words[i] 只包含著小寫字母</li></ul><hr><h2 id="❀-Solution"><a href="#❀-Solution" class="headerlink" title="❀ Solution"></a>❀ Solution</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string[]&#125; words</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 字母 a~z 對應到的 Morse Code */</span></span><br><span class="line"><span class="keyword">const</span> LetterList = [</span><br><span class="line"><span class="string">'.-'</span>,</span><br><span class="line"><span class="string">'-...'</span>,</span><br><span class="line"><span class="string">'-.-.'</span>,</span><br><span class="line"><span class="string">'-..'</span>,</span><br><span class="line"><span class="string">'.'</span>,</span><br><span class="line"><span class="string">'..-.'</span>,</span><br><span class="line"><span class="string">'--.'</span>,</span><br><span class="line"><span class="string">'....'</span>,</span><br><span class="line"><span class="string">'..'</span>,</span><br><span class="line"><span class="string">'.---'</span>,</span><br><span class="line"><span class="string">'-.-'</span>,</span><br><span class="line"><span class="string">'.-..'</span>,</span><br><span class="line"><span class="string">'--'</span>,</span><br><span class="line"><span class="string">'-.'</span>,</span><br><span class="line"><span class="string">'---'</span>,</span><br><span class="line"><span class="string">'.--.'</span>,</span><br><span class="line"><span class="string">'--.-'</span>,</span><br><span class="line"><span class="string">'.-.'</span>,</span><br><span class="line"><span class="string">'...'</span>,</span><br><span class="line"><span class="string">'-'</span>,</span><br><span class="line"><span class="string">'..-'</span>,</span><br><span class="line"><span class="string">'...-'</span>,</span><br><span class="line"><span class="string">'.--'</span>,</span><br><span class="line"><span class="string">'-..-'</span>,</span><br><span class="line"><span class="string">'-.--'</span>,</span><br><span class="line"><span class="string">'--..'</span>,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">var</span> uniqueMorseRepresentations = <span class="function"><span class="keyword">function</span>(<span class="params">words</span>) </span>&#123;</span><br><span class="line"><span class="comment">/* 對 words 跑 reduce, 建立預設結果為 obj */</span></span><br><span class="line"><span class="keyword">var</span> objRes = words.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">res, val, index</span>) </span>&#123;</span><br><span class="line"><span class="comment">/* 欲組成該單字的摩斯密碼的字串 */</span></span><br><span class="line"><span class="keyword">let</span> strMorse = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 對單字的每個字跑for迴圈 */</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; val.length; i++) &#123;</span><br><span class="line"><span class="comment">/* 取得該字母 val[i] 對應到 LetterList 的位置 </span></span><br><span class="line"><span class="comment">   使用 charCodeAt() 以得到單字的 Unicode</span></span><br><span class="line"><span class="comment">   因題目聲明單字必為小寫, 而a-z 為97-112</span></span><br><span class="line"><span class="comment">   故減去 97 後則為其L etterList 上的對應位置 */</span></span><br><span class="line"><span class="keyword">let</span> indexLetter = val[i].charCodeAt() - <span class="number">97</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 將其摩斯密碼組合 */</span></span><br><span class="line">strMorse += LetterList[indexLetter];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 對 res 新增一個 properties, key = strMorse, val = true</span></span><br><span class="line"><span class="comment">// 這樣下次有一樣的 strMorse 時, 便不會在新增一個properties</span></span><br><span class="line">res[strMorse] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;, &#123;&#125;); <span class="comment">// 初始化值為 &#123;&#125;</span></span><br><span class="line"><span class="comment">/* 將 objRes 使用 Object.keys(), 取得其 property 的 array, 並將其長度回傳*/</span></span><br><span class="line"><span class="comment">// (2) ["--...-.", "--...--."]</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Object</span>.keys(objRes).length;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ⓁⒸ - Easy </tag>
            
            <tag> ☄️ </tag>
            
            <tag> Array.reduce() </tag>
            
            <tag> Object.keys() </tag>
            
            <tag> String.charCodeAt() </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ⓁⒸ ‧‧‧ 771. Jewels and Stones</title>
      <link href="/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-771-Jewels-and-Stones/"/>
      <url>/2018/07/20/LC-%E2%80%A7%E2%80%A7%E2%80%A7-771-Jewels-and-Stones/</url>
      
        <content type="html"><![CDATA[<h1 id="771-Jewels-and-Stones-珠寶與石頭"><a href="#771-Jewels-and-Stones-珠寶與石頭" class="headerlink" title="771. Jewels and Stones 珠寶與石頭"></a><a href="https://leetcode.com/problems/jewels-and-stones/description/" target="_blank" rel="noopener">771. Jewels and Stones 珠寶與石頭</a></h1><h2 id="❀-Origin"><a href="#❀-Origin" class="headerlink" title="❀ Origin"></a>❀ Origin</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>You’re given strings J representing the types of stones that are jewels,<br>and S representing the stones you have. Each character in S is a type of stone you have.<br>You want to know how many of the stones you have are also jewels.  </p><p>The letters in J are guaranteed distinct, and all characters in J and S are letters.<br>Letters are case sensitive, so “a” is considered a different type of stone from “A”.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: J = &quot;aA&quot;, S = &quot;aAAbbbb&quot;</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: J = &quot;z&quot;, S = &quot;ZZ&quot;</span><br><span class="line">Output: 0</span><br></pre></td></tr></table></figure><hr><h2 id="❀-翻譯"><a href="#❀-翻譯" class="headerlink" title="❀ 翻譯"></a>❀ 翻譯</h2><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>有一字串 J 代表寶石的種類, 字串 S 代表你擁有的石頭.<br>字串 S 的每一個字元都代表著你有的一個那種石頭.<br>你想要知道你的石頭裡有幾個是寶石.  </p><p>字串 J 的每個字母都保證不同, 而且 J 與 S 的每個字元都保證是字母.<br>字母有區分大小寫, 所以 “a” 被認定為與 “A” 是不同類型的石頭.</p><hr><h2 id="❀-Solution"><a href="#❀-Solution" class="headerlink" title="❀ Solution"></a>❀ Solution</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><pre><code class="js"><span class="comment">/**</span><span class="comment"> * @param {string} J</span><span class="comment"> * @param {string} S</span><span class="comment"> * @return {number}</span><span class="comment"> */</span><span class="keyword">var</span> numJewelsInStones = <span class="function"><span class="keyword">function</span>(<span class="params">J, S</span>) </span>{    <span class="comment">/* 依據 J(types of stones that are jewels) 建立一個新的 Set */</span>    <span class="keyword">const</span> setJ = <span class="keyword">new</span> <span class="built_in">Set</span>([...J]); <span class="comment">// Set(2) {"a", "A"}</span>    <span class="comment">/* 依據 S(the stones you have) 建立一個新的 Array */</span>    <span class="keyword">const</span> arrayS = S.split(<span class="string">''</span>); <span class="comment">// (7) ["a", "A", "A", "b", "b", "b", "b"]</span>    <span class="comment">/* reduce */</span>    <span class="comment">// accumulator: 前一個參數，如果是第一個陣列的話，值是以另外傳入或初始化的值</span>    <span class="comment">// currentValue: 當前變數</span>    <span class="comment">// currentIndex: 當前索引</span>    <span class="comment">// array: 全部陣列</span>    <span class="comment">/* 對 arrayS 跑 reduce,</span><span class="comment">       使用 Set 的 has(value), 判斷該值是否為Set的成員 */</span>    <span class="keyword">const</span> count = arrayS.reduce(        (accumulator, currentValue, currentIndex, array) =&gt; {            <span class="keyword">return</span> accumulator + setJ.has(currentValue);        },        <span class="number">0</span> <span class="comment">// 傳入reduce accumulator 的初始化值為 0</span>    );    <span class="keyword">return</span> count;};</code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ⓁⒸ - Easy </tag>
            
            <tag> ☄️ </tag>
            
            <tag> Array.reduce() </tag>
            
            <tag> String.split() </tag>
            
            <tag> Set() </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ⓁⒸ ‧‧‧ 657. Judge Route Circle</title>
      <link href="/2018/07/18/LC-%E2%80%A7%E2%80%A7%E2%80%A7-657-Judge-Route-Circle/"/>
      <url>/2018/07/18/LC-%E2%80%A7%E2%80%A7%E2%80%A7-657-Judge-Route-Circle/</url>
      
        <content type="html"><![CDATA[<h1 id="657-Judge-Route-Circle"><a href="#657-Judge-Route-Circle" class="headerlink" title="657. Judge Route Circle"></a><a href="https://leetcode.com/problems/judge-route-circle/description/" target="_blank" rel="noopener">657. Judge Route Circle</a></h1><h2 id="❀-Origin"><a href="#❀-Origin" class="headerlink" title="❀ Origin"></a>❀ Origin</h2><h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Initially, there is a Robot at position (0, 0).<br>Given a sequence of its moves, judge if this robot makes a circle, which means it moves back to the original place.</p><p>The move sequence is represented by a string. And each move is represent by a character.<br>The valid robot moves are R (Right), L (Left), U (Up) and D (down).<br>The output should be true or false representing whether the robot makes a circle.</p><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;UD&quot;</span><br><span class="line">Output: true</span><br></pre></td></tr></table></figure><h3 id="Example-2"><a href="#Example-2" class="headerlink" title="Example 2"></a>Example 2</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;LL&quot;</span><br><span class="line">Output: false</span><br></pre></td></tr></table></figure><hr><h2 id="❀-翻譯"><a href="#❀-翻譯" class="headerlink" title="❀ 翻譯"></a>❀ 翻譯</h2><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><p>最初, 有個機器人在位置 (0, 0).<br>給他了一連串的動作之後, 判斷這機器人會不會繞一圈, 也就是回到原點.</p><p>動作的序列將會是字串, 每個字元代表一個動作.<br>有效的動作為 R (往右), L (往左), U (往上)和 D (往下).<br>輸出結果必須是 ture 或是 false, 代表這機器人有沒有繞一圈.</p><hr><h2 id="❀-Solution"><a href="#❀-Solution" class="headerlink" title="❀ Solution"></a>❀ Solution</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; moves</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> judgeCircle = <span class="function"><span class="keyword">function</span>(<span class="params">moves</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 將 moves 用 split 成陣列</span></span><br><span class="line">  <span class="keyword">var</span> arr = moves.split(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果該陣列為基數, 則一定不可能回原點, 直接回傳 false</span></span><br><span class="line">  <span class="keyword">if</span> (arr.length % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 假設起點為 (0, 0)</span></span><br><span class="line">  <span class="comment">// 定義出x,y為移動路徑</span></span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> y = <span class="number">0</span>;</span><br><span class="line">  arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (element) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"U"</span>:</span><br><span class="line">        y++;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"D"</span>:</span><br><span class="line">        y--;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"R"</span>:</span><br><span class="line">        x++;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">"L"</span>:</span><br><span class="line">        x--;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">//若座標為 (0, 0), 則回傳 true</span></span><br><span class="line">  <span class="keyword">if</span> (x == <span class="number">0</span> &amp;&amp; y == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//不在原點, 回傳 false</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> LeetCode </tag>
            
            <tag> ⓁⒸ - Easy </tag>
            
            <tag> ☄️ </tag>
            
            <tag> String.split() </tag>
            
            <tag> Array.forEach() </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Get query string values in JavaScript</title>
      <link href="/2018/01/08/Get-query-string-values-in-JavaScript/"/>
      <url>/2018/01/08/Get-query-string-values-in-JavaScript/</url>
      
        <content type="html"><![CDATA[<h4 id="作法一"><a href="#作法一" class="headerlink" title="作法一"></a>作法一</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getParameterByName</span>(<span class="params">name, url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!url) url = <span class="built_in">window</span>.location.href;</span><br><span class="line">    name = name.replace(<span class="regexp">/[\[\]]/g</span>, <span class="string">"\\$&amp;"</span>);</span><br><span class="line">    <span class="keyword">var</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"[?&amp;]"</span> + name + <span class="string">"(=([^&amp;#]*)|&amp;|#|$)"</span>),</span><br><span class="line">        results = regex.exec(url);</span><br><span class="line">    <span class="keyword">if</span> (!results) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (!results[<span class="number">2</span>]) <span class="keyword">return</span> <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">decodeURIComponent</span>(results[<span class="number">2</span>].replace(<span class="regexp">/\+/g</span>, <span class="string">" "</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Usage:</span></span><br><span class="line"><span class="comment">// query string: ?foo=lorem&amp;bar=&amp;baz</span></span><br><span class="line"><span class="keyword">var</span> foo = getParameterByName(<span class="string">'foo'</span>); <span class="comment">// "lorem"</span></span><br><span class="line"><span class="keyword">var</span> bar = getParameterByName(<span class="string">'bar'</span>); <span class="comment">// "" (present with empty value)</span></span><br><span class="line"><span class="keyword">var</span> baz = getParameterByName(<span class="string">'baz'</span>); <span class="comment">// "" (present with no value)</span></span><br><span class="line"><span class="keyword">var</span> qux = getParameterByName(<span class="string">'qux'</span>); <span class="comment">// null (absent)</span></span><br></pre></td></tr></table></figure><h4 id="其他學習"><a href="#其他學習" class="headerlink" title="其他學習"></a>其他學習</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> urlParams;</span><br><span class="line">(<span class="built_in">window</span>.onpopstate = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> match,</span><br><span class="line">        pl     = <span class="regexp">/\+/g</span>,  <span class="comment">// Regex for replacing addition symbol with a space</span></span><br><span class="line">        search = <span class="regexp">/([^&amp;=]+)=?([^&amp;]*)/g</span>,</span><br><span class="line">        decode = <span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123; <span class="keyword">return</span> <span class="built_in">decodeURIComponent</span>(s.replace(pl, <span class="string">" "</span>)); &#125;,</span><br><span class="line">        query  = <span class="built_in">window</span>.location.search.substring(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    urlParams = &#123;&#125;;</span><br><span class="line">    <span class="keyword">while</span> (match = search.exec(query))</span><br><span class="line">       urlParams[decode(match[<span class="number">1</span>])] = decode(match[<span class="number">2</span>]);</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//Example querystring:</span></span><br><span class="line"><span class="comment">//?i=main&amp;mode=front&amp;sid=de8d49b78a85a322c4155015fdce22c4&amp;enc=+Hello%20&amp;empty</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//Result: </span></span><br><span class="line"><span class="comment">//  urlParams = &#123;</span></span><br><span class="line"><span class="comment">//     enc: " Hello ",</span></span><br><span class="line"><span class="comment">//     i: "main",</span></span><br><span class="line"><span class="comment">//     mode: "front",</span></span><br><span class="line"><span class="comment">//     sid: "de8d49b78a85a322c4155015fdce22c4",</span></span><br><span class="line"><span class="comment">//     empty: ""</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// alert(urlParams["mode"]);</span></span><br><span class="line"><span class="comment">// // -&gt; "front"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// alert("empty" in urlParams);</span></span><br><span class="line"><span class="comment">// // -&gt; true</span></span><br><span class="line"><span class="comment">//  //&#125;</span></span><br></pre></td></tr></table></figure><h4 id="Ref"><a href="#Ref" class="headerlink" title="Ref."></a>Ref.</h4><ol><li><a href="https://stackoverflow.com/questions/901115/how-can-i-get-query-string-values-in-javascript" target="_blank" rel="noopener">How can I get query string values in JavaScript?</a></li></ol><hr>]]></content>
      
      
      
        <tags>
            
            <tag> Front-end </tag>
            
            <tag> JavaScript </tag>
            
            <tag> query </tag>
            
            <tag> parameter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>﹝Jotting﹞ - Nuxt.js</title>
      <link href="/2018/01/08/%EF%B9%9DJotting%EF%B9%9E-Nuxt-js/"/>
      <url>/2018/01/08/%EF%B9%9DJotting%EF%B9%9E-Nuxt-js/</url>
      
        <content type="html"><![CDATA[<h2 id="嵌套路由-2018-01-08"><a href="#嵌套路由-2018-01-08" class="headerlink" title="嵌套路由 - 2018 / 01 / 08"></a>嵌套路由 - 2018 / 01 / 08</h2><h4 id="資料結構"><a href="#資料結構" class="headerlink" title="資料結構"></a>資料結構</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pages/</span><br><span class="line">--| users/</span><br><span class="line">-----| _id.vue</span><br><span class="line">-----| index.vue</span><br><span class="line">--| users.vue</span><br></pre></td></tr></table></figure><h4 id="users-vue"><a href="#users-vue" class="headerlink" title="users.vue"></a>users.vue</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;section <span class="class"><span class="keyword">class</span></span>=<span class="string">"container"</span>&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">       &#123;&#123;message&#125;&#125;</span><br><span class="line">       &lt;hr&gt;</span><br><span class="line">       &lt;nuxt-child/&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>section&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br></pre></td></tr></table></figure><h4 id="users-id-vue"><a href="#users-id-vue" class="headerlink" title="users/_id.vue"></a>users/_id.vue</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  validate (&#123; params &#125;) &#123;</span><br><span class="line">    <span class="comment">// Must be a number</span></span><br><span class="line">    <span class="comment">//判斷是否為數字</span></span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/^\d+$/</span>.test(params.id)</span><br><span class="line">  &#125;,</span><br><span class="line">  asyncData (&#123; params, env, error &#125;) &#123;</span><br><span class="line">    <span class="keyword">const</span> user = &#123;<span class="attr">message</span>: params.id&#125;</span><br><span class="line">    <span class="comment">// if (!user) &#123;</span></span><br><span class="line">    <span class="comment">//   return error(&#123; message: 'User not found', statusCode: 404 &#125;)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="keyword">return</span> user</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h4><p>父層Vue文件內增加<nuxt-child>用於顯示子視圖內容。<br>params.id取得值</nuxt-child></p><h4 id="Ref"><a href="#Ref" class="headerlink" title="Ref."></a>Ref.</h4><ol><li><a href="https://zh.nuxtjs.org/guide/routing#%E5%B5%8C%E5%A5%97%E8%B7%AF%E7%94%B1" target="_blank" rel="noopener">嵌套路由</a></li><li><a href="https://zh.nuxtjs.org/api/components-nuxt-child" target="_blank" rel="noopener">nuxt-child</a></li></ol><hr>]]></content>
      
      
      
        <tags>
            
            <tag> Front-end </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Vue.js </tag>
            
            <tag> Nuxt.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>List rendering with array.map() - React</title>
      <link href="/2017/10/25/List-rendering-with-array-map-React/"/>
      <url>/2017/10/25/List-rendering-with-array-map-React/</url>
      
        <content type="html"><![CDATA[<h3 id="加入JSX，結合原生JavaScript語法"><a href="#加入JSX，結合原生JavaScript語法" class="headerlink" title="加入JSX，結合原生JavaScript語法"></a>加入JSX，結合原生JavaScript語法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">getInitialState() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            details: &#123;</span><br><span class="line">                tw: &#123;</span><br><span class="line">                    form: [</span><br><span class="line">                        &#123; <span class="attr">name</span>: <span class="string">'coutry'</span>, <span class="attr">type</span>: <span class="number">1</span>, <span class="attr">des</span>: <span class="string">'國家'</span>, <span class="attr">ans</span>:  [<span class="string">'區域獨家代理'</span>, <span class="string">'代理'</span>]  &#125;,</span><br><span class="line">                        &#123; <span class="attr">name</span>: <span class="string">'mode'</span>, <span class="attr">type</span>: <span class="number">2</span>, <span class="attr">des</span>: <span class="string">'模式'</span>, <span class="attr">ans</span>: [<span class="string">'區域獨家代理'</span>, <span class="string">'代理'</span>] &#125;,</span><br><span class="line">                        &#123; <span class="attr">name</span>: <span class="string">'state'</span>, <span class="attr">type</span>: <span class="number">4</span>, <span class="attr">des</span>: <span class="string">'洲別'</span>, <span class="attr">ans</span>: [<span class="string">'美洲'</span>, <span class="string">'亞洲'</span>, <span class="string">'歐洲'</span>] &#125;,</span><br><span class="line">                    ],</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    render() &#123;        </span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">          &lt;div&gt;</span><br><span class="line">            &lt;ul className=<span class="string">"form"</span>&gt;</span><br><span class="line">              &#123;<span class="keyword">this</span>.state.details[<span class="keyword">this</span>.props.langVal].form.map(<span class="function">(<span class="params">item, key</span>) =&gt;</span> &#123;               </span><br><span class="line">               <span class="keyword">switch</span>(item.type)&#123;</span><br><span class="line">                   <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                   <span class="keyword">return</span> (</span><br><span class="line">                        &lt;li key=&#123;key&#125; &gt;&lt;input type="text" placeholder=&#123;item.des&#125; /&gt;&lt;/li&gt;</span><br><span class="line">                      );</span><br><span class="line">                   <span class="keyword">break</span>;                   </span><br><span class="line">                   <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                   <span class="keyword">return</span> (</span><br><span class="line">                        &lt;li key=&#123;key&#125; &gt;</span><br><span class="line">                            &lt;input type=<span class="string">"text"</span> placeholder=&#123;item.des&#125; /&gt;</span><br><span class="line">                            &lt;select name=<span class="string">""</span>&gt;</span><br><span class="line">                            &#123;</span><br><span class="line">                                item.ans.map(<span class="function"><span class="keyword">function</span>(<span class="params">value, index</span>)</span>&#123;</span><br><span class="line">                                    <span class="keyword">return</span> (</span><br><span class="line">                                        &lt;option value=&#123;index&#125;&gt;&#123;value&#125;&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">                                    )</span></span><br><span class="line"><span class="regexp">                                &#125;)</span></span><br><span class="line"><span class="regexp">                            &#125;</span></span><br><span class="line"><span class="regexp">                            &lt;/</span>select&gt; </span><br><span class="line">                        &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">                      );</span></span><br><span class="line"><span class="regexp">                   break;</span></span><br><span class="line"><span class="regexp">               &#125;                  </span></span><br><span class="line"><span class="regexp">              &#125;)&#125;</span></span><br><span class="line"><span class="regexp">            &lt;/u</span>l&gt;</span><br><span class="line">          &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br></pre></td></tr></table></figure><hr><p>一個JSX的語法糖裡，只能做一次return （不確定）<br>做第二次array.map()時，必須先包一層HTML Tag （不確定）</p>]]></content>
      
      
      
        <tags>
            
            <tag> Front-end </tag>
            
            <tag> JavaScript </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Get YouTube video&#39;s shortcuts</title>
      <link href="/2017/10/24/Get-Youtube-Video-s-Shortcuts/"/>
      <url>/2017/10/24/Get-Youtube-Video-s-Shortcuts/</url>
      
        <content type="html"><![CDATA[<h3 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//youtube 影片基本縮圖：</span></span><br><span class="line"><span class="string">"http://img.youtube.com/vi/(insert-youtube-video-id-here)/0.jpg"</span></span><br><span class="line"><span class="string">"http://img.youtube.com/vi/(insert-youtube-video-id-here)/1.jpg"</span></span><br><span class="line"><span class="string">"http://img.youtube.com/vi/(insert-youtube-video-id-here)/2.jpg"</span></span><br><span class="line"><span class="string">"http://img.youtube.com/vi/(insert-youtube-video-id-here)/3.jpg"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//youtube 影片 預設圖：</span></span><br><span class="line"><span class="string">"http://img.youtube.com/vi/(insert-youtube-video-id-here)/default.jpg"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//youtube 影片 高解析度預設圖</span></span><br><span class="line"><span class="string">"http://img.youtube.com/vi/(insert-youtube-video-id-here)/hqdefault.jpg"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//youtube 影片 中解析度</span></span><br><span class="line"><span class="string">"http://img.youtube.com/vi/(insert-youtube-video-id-here)/mqdefault.jpg"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//youtube 影片 標準縮圖</span></span><br><span class="line"><span class="string">"http://img.youtube.com/vi/(insert-youtube-video-id-here)/sddefault.jpg"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//youtube 影片 最大縮圖</span></span><br><span class="line"><span class="string">"http://img.youtube.com/vi/(insert-youtube-video-id-here)/maxresdefault.jpg"</span></span><br></pre></td></tr></table></figure><hr><p>其實 Youtube 影片縮圖網址都有一個規則，只要照著規則把影片 id 輸入即可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Front-end </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kill all nodejs on windows</title>
      <link href="/2017/10/24/Kill-all-node-on-windows/"/>
      <url>/2017/10/24/Kill-all-node-on-windows/</url>
      
        <content type="html"><![CDATA[<h3 id="cmd"><a href="#cmd" class="headerlink" title="cmd"></a>cmd</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">TASKKILL</span> /F /IM node.exe</span><br></pre></td></tr></table></figure><hr><p>用Node啟動的網站一般都用ctrl + c關閉，<br>但是有的時候打開服務的終端界面不小心被取消了，<br>再次啟動網頁時會提示“Port 3000已經被占用”，<br>這樣時就可使用TASKKILL去殺掉所有執行的node.exe</p>]]></content>
      
      
      
        <tags>
            
            <tag> Back-end </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Node.js </tag>
            
            <tag> cmd.exe </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Virtual Dom - Vue.js</title>
      <link href="/2017/08/24/Virtual-Dom-Vue-js/"/>
      <url>/2017/08/24/Virtual-Dom-Vue-js/</url>
      
        <content type="html"><![CDATA[<h2 id="Virtual-Dom-Notes"><a href="#Virtual-Dom-Notes" class="headerlink" title="Virtual Dom Notes"></a>Virtual Dom Notes</h2><h3 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Error</span></span><br><span class="line"><span class="comment">//////////</span></span><br><span class="line"><span class="keyword">var</span> dom = $(<span class="string">".obj"</span>);</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#app"</span>,</span><br><span class="line">  mounted: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.func();</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    func: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      dom.height(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//////////</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Ok</span></span><br><span class="line"><span class="comment">//////////</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">"#app"</span>,</span><br><span class="line">  mounted: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.func();</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    func: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> dom = $(<span class="string">".obj"</span>);</span><br><span class="line">      dom.height(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//////////</span></span><br></pre></td></tr></table></figure><hr><p>因為 Vue 在<code>createElement</code>之後會產生出 Virtual Dom，<br>若在這之前指派了 Dom 元素給變數，該變數代表的會是真實的 Dom。故若要操作 Dom，必須在<code>mounted</code>後賦值。</p><h4 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h4><ol><li><a href="https://segmentfault.com/a/1190000008291645" target="_blank" rel="noopener">Vue 原理解析之 Virtual Dom</a></li></ol><hr>]]></content>
      
      
      
        <tags>
            
            <tag> Front-end </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Update Array - Vue.js</title>
      <link href="/2017/08/23/Update-Array-Vue-js/"/>
      <url>/2017/08/23/Update-Array-Vue-js/</url>
      
        <content type="html"><![CDATA[<h2 id="Update-Array"><a href="#Update-Array" class="headerlink" title="Update Array"></a>Update Array</h2><h3 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Vue 2.* </span></span><br><span class="line"><span class="keyword">this</span>.$<span class="keyword">set</span>(this.items, index, val);</span><br></pre></td></tr></table></figure><hr><p>通過數組索引賦值來改動數組時 (比如 arr[1] = value)，Vue 是無法偵測到這類操作的。<br>類似地，你可以使用擴展方法來確保 Vue.js 收到了通知。</p><h4 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h4><ol><li><a href="https://012-cn.vuejs.org/guide/best-practices.html" target="_blank" rel="noopener">Vue.js Guide</a></li><li><a href="https://stackoverflow.com/questions/42807888/vuejs-and-vue-set-update-array" target="_blank" rel="noopener">Stack Overflow</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Front-end </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Base64 String to JPEG Image</title>
      <link href="/2017/03/21/C-Base64-String-to-JPEG-Image/"/>
      <url>/2017/03/21/C-Base64-String-to-JPEG-Image/</url>
      
        <content type="html"><![CDATA[<blockquote><p>延續：<a href="/2017/03/17/Check-size-and-compress-the-picture/">Check size and compress the picture</a></p></blockquote><hr><h2 id="Save-Image"><a href="#Save-Image" class="headerlink" title="Save Image"></a>Save Image</h2><h3 id="C-Sharp"><a href="#C-Sharp" class="headerlink" title="C Sharp"></a>C Sharp</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> path = HttpContext.Current.Server.MapPath(<span class="string">"../img/user_share/"</span> + guid);</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] bytes = Convert.FromBase64String(base64String);</span><br><span class="line"></span><br><span class="line">    System.Drawing.Image image;</span><br><span class="line">    <span class="keyword">using</span> (MemoryStream ms = <span class="keyword">new</span> MemoryStream(bytes))</span><br><span class="line">    &#123;</span><br><span class="line">        image = System.Drawing.Image.FromStream(ms);</span><br><span class="line">        image.Save(path + <span class="string">".jpeg"</span>, System.Drawing.Imaging.ImageFormat.Jpeg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h4><ol><li><a href="https://msdn.microsoft.com/zh-tw/library/system.web.httpserverutility.mappath(v=vs.110).aspx" target="_blank" rel="noopener">Server.MapPath</a><br>對應至 Web 伺服器上的實體檔案路徑 path。</li></ol><hr>]]></content>
      
      
      
        <tags>
            
            <tag> Back-end </tag>
            
            <tag> C Sharp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Check size and compress the picture</title>
      <link href="/2017/03/17/Check-size-and-compress-the-picture/"/>
      <url>/2017/03/17/Check-size-and-compress-the-picture/</url>
      
        <content type="html"><![CDATA[<blockquote><p>延續：<a href="https://xtobu.github.io/2017/03/14/Upload-image-into-HTML5-canvas/">Upload image into HTML5 canvas</a></p></blockquote><hr><h2 id="Check-File-Size"><a href="#Check-File-Size" class="headerlink" title="Check File Size"></a>Check File Size</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">imgCheck</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> file = input.files[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">var</span> fileSize = file.size / <span class="number">1024</span> / <span class="number">1024</span>,</span><br><span class="line">    errors = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (fileSize &gt; <span class="number">8</span>) &#123;</span><br><span class="line">    errors.push(<span class="string">"照片最大僅支持8MB"</span>);</span><br><span class="line">    alert(errors[<span class="number">0</span>]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (errors.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    $(<span class="string">'#upload'</span>).val(<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125; <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h4><ol><li><a href="https://developer.mozilla.org/zh-TW/docs/Using_files_from_web_applications" target="_blank" rel="noopener">input.files[0]</a><br>File API 可以從 File 物件中讀取 FileList ，FileList 內包含使用者所選取的檔案<br>如果使用者只選擇一個檔案，那麼我們只選取第一個物件</li><li>file.size的單位為byte</li><li>回傳bool，用在change時判斷</li></ol><hr><h2 id="Compress"><a href="#Compress" class="headerlink" title="Compress"></a>Compress</h2><h3 id="JavaScript-1"><a href="#JavaScript-1" class="headerlink" title="JavaScript"></a>JavaScript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compress</span>(<span class="params">img</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> c = <span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>);</span><br><span class="line">    <span class="keyword">var</span> ctx = c.getContext(<span class="string">'2d'</span>);</span><br><span class="line"></span><br><span class="line">    c.width = img.width/<span class="number">2</span>;</span><br><span class="line">    c.height = img.height/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    ctx.drawImage(img, <span class="number">0</span>, <span class="number">0</span>, img.width, img.height);</span><br><span class="line">    <span class="keyword">var</span> data = canvas.toDataURL(<span class="string">'image/jpeg'</span>,<span class="number">0.5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Note-1"><a href="#Note-1" class="headerlink" title="Note"></a>Note</h4><ol><li><a href="https://developer.mozilla.org/zh-TW/docs/Web/API/HTMLCanvasElement/toDataURL" target="_blank" rel="noopener">HTMLCanvasElement.toDataURL()</a><br>表達式：canvas.toDataURL(type, encoderOptions);<br>type：圖像格式，預設為image/png<br>encoderOptions：jpeg或是webp的品質，0~1之間，超過或無則為預設值1</li><li>回傳值是data URI的DOMString，若上傳到C#會再砍掉前面的data:image/jpeg;base64, …(base64)</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Front-end </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Upload image into HTML5 canvas</title>
      <link href="/2017/03/14/Upload-image-into-HTML5-canvas/"/>
      <url>/2017/03/14/Upload-image-into-HTML5-canvas/</url>
      
        <content type="html"><![CDATA[<h3 id="External"><a href="#External" class="headerlink" title="External"></a>External</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"upload"</span> <span class="attr">accept</span>=<span class="string">"image/*"</span> <span class="attr">type</span>=<span class="string">"file"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h4><ol><li>input選擇<code>type=&quot;file&quot;</code>，並使用<code>accept</code>屬性來驗證檔案格式。  </li><li>canvas預覽用</li></ol><hr><h3 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#upload'</span>).change(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line">    <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">    </span><br><span class="line">    img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        canvas.width = <span class="keyword">this</span>.width</span><br><span class="line">        canvas.height = <span class="keyword">this</span>.height</span><br><span class="line">        ctx.drawImage(<span class="keyword">this</span>, <span class="number">0</span>, <span class="number">0</span>, canvas.width, canvas.height)</span><br><span class="line">        URL.revokeObjectURL(src)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> file = <span class="keyword">this</span>.files[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> src = URL.createObjectURL(file);</span><br><span class="line">    </span><br><span class="line">    img.src = src;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="Note-1"><a href="#Note-1" class="headerlink" title="Note"></a>Note</h4><ol><li>jQuery的<a href="https://api.jquery.com/change/" target="_blank" rel="noopener">change</a>方法對input做類似監聽的效果，監聽是否資料被存取</li><li>建立一個img，其<a href="https://www.w3schools.com/jsref/event_onload.asp" target="_blank" rel="noopener">onload</a>裡設定canvas的長寬，並用<a href="https://www.w3schools.com/tags/canvas_drawimage.asp" target="_blank" rel="noopener">drawImage</a>將圖片畫到canvas上，用<a href="https://developer.mozilla.org/zh-TW/docs/Web/API/URL/revokeObjectURL" target="_blank" rel="noopener">revokeObjectURL()</a>釋放記憶體<ul><li>createObjectURL()都會產生一個新的URL。<br>為了最佳化效能與記憶體用量，不再需要時便用revokeObjectURL()釋放</li></ul></li><li>HTML5 Web API 的 <a href="https://developer.mozilla.org/zh-TW/docs/Web/API/URL/createObjectURL" target="_blank" rel="noopener">createObjectURL()</a>對input上的檔案建立一個Blob物件，並設為img的src來源  <ul><li>不使用<a href="https://developer.mozilla.org/zh-TW/docs/Web/API/FileReader/readAsDataURL" target="_blank" rel="noopener">readAsDataURL()</a>，因為曾在iOS拍照上踩過雷<br>（無法<a href="https://developer.mozilla.org/zh-TW/docs/Web/API/HTMLCanvasElement/toDataURL" target="_blank" rel="noopener">toDataURL()</a>，會變白圖片）</li><li>好處請看：<a href="http://blog.darkthread.net/post-2014-03-12-html5-object-url.aspx" target="_blank" rel="noopener">黑暗執行緒</a></li></ul></li></ol><hr><h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><h4 id="JSFiddle"><a href="#JSFiddle" class="headerlink" title="JSFiddle"></a>JSFiddle</h4><iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/yctfdtv8/embedded/result,html,js,css/dark" frameborder="0" allowfullscreen></iframe>]]></content>
      
      
      
        <tags>
            
            <tag> Front-end </tag>
            
            <tag> JavaScript </tag>
            
            <tag> Canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown Learning</title>
      <link href="/2017/03/06/Markdown-Learning/"/>
      <url>/2017/03/06/Markdown-Learning/</url>
      
        <content type="html"><![CDATA[<h3 id="程式碼區域-Code-and-Syntax-Highlighting"><a href="#程式碼區域-Code-and-Syntax-Highlighting" class="headerlink" title="程式碼區域 - Code and Syntax Highlighting"></a>程式碼區域 - Code and Syntax Highlighting</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">```javascript </span></span><br><span class="line"><span class="code">function getSize()&#123;</span></span><br><span class="line"><span class="code">    if( typeof( window.innerWidth ) == 'number' ) &#123;</span></span><br><span class="line"><span class="code">      myWidth = window.innerWidth;</span></span><br><span class="line"><span class="code">    &#125; else if( document.documentElement &amp;&amp; document.documentElement.clientWidth) &#123;</span></span><br><span class="line"><span class="code">      myWidth = document.documentElement.clientWidth;</span></span><br><span class="line"><span class="code">    &#125;;</span></span><br><span class="line"><span class="code">  &#125;;</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSize</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">typeof</span>( <span class="built_in">window</span>.innerWidth ) == <span class="string">'number'</span> ) &#123;</span><br><span class="line">      myWidth = <span class="built_in">window</span>.innerWidth;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>( <span class="built_in">document</span>.documentElement &amp;&amp; <span class="built_in">document</span>.documentElement.clientWidth) &#123;</span><br><span class="line">      myWidth = <span class="built_in">document</span>.documentElement.clientWidth;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><h5 id="Remark："><a href="#Remark：" class="headerlink" title="Remark："></a>Remark：</h5><p>如何在Code blocks裡再寫入一個Code blocks<br><img src="/assets/images/markdownin.jpg" alt="markdownin"></p><hr><h3 id="標題-Header"><a href="#標題-Header" class="headerlink" title="標題 - Header"></a>標題 - Header</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># H1</span></span><br><span class="line"><span class="section">## H2</span></span><br><span class="line"><span class="section">### H3</span></span><br><span class="line"><span class="section">#### H4</span></span><br><span class="line"><span class="section">##### H5</span></span><br><span class="line"><span class="section">###### H6</span></span><br><span class="line"></span><br><span class="line">H1</span><br><span class="line">======</span><br><span class="line"></span><br><span class="line">H2</span><br><span class="line">------</span><br></pre></td></tr></table></figure><h1 id="H1"><a href="#H1" class="headerlink" title="H1"></a>H1</h1><h2 id="H2"><a href="#H2" class="headerlink" title="H2"></a>H2</h2><h3 id="H3"><a href="#H3" class="headerlink" title="H3"></a>H3</h3><h4 id="H4"><a href="#H4" class="headerlink" title="H4"></a>H4</h4><h5 id="H5"><a href="#H5" class="headerlink" title="H5"></a>H5</h5><h6 id="H6"><a href="#H6" class="headerlink" title="H6"></a>H6</h6><h1 id="H1-1"><a href="#H1-1" class="headerlink" title="H1"></a>H1</h1><h2 id="H2-1"><a href="#H2-1" class="headerlink" title="H2"></a>H2</h2><hr><h3 id="連結-Links"><a href="#連結-Links" class="headerlink" title="連結 - Links"></a>連結 - Links</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[連結名稱](https://www.google.com)</span><br><span class="line">&lt;https://www.google.com&gt;</span><br><span class="line"></span><br><span class="line">[參考文本][參考文本 reference text]</span><br><span class="line">[數字定義][1]</span><br><span class="line">或是連結本身[連結].</span><br><span class="line"></span><br><span class="line">[參考文本 reference text]: https://www.google.com</span><br><span class="line">[1]:https://www.google.com</span><br><span class="line">[連結]: https://www.google.com</span><br></pre></td></tr></table></figure><p><a href="https://www.google.com" target="_blank" rel="noopener">連結名稱</a><br><a href="https://www.google.com" target="_blank" rel="noopener">https://www.google.com</a>    </p><p>[參考文本][參考文本 reference text]<br>[代號][1]<br>或是連結本身 [連結].<br>[參考文本 reference text]: <a href="https://www.google.com" target="_blank" rel="noopener">https://www.google.com</a><br>[1]: <a href="https://www.google.com" target="_blank" rel="noopener">https://www.google.com</a><br>[連結]: <a href="https://www.google.com" target="_blank" rel="noopener">https://www.google.com</a></p><hr><h3 id="強調-Emphasis"><a href="#強調-Emphasis" class="headerlink" title="強調 - Emphasis"></a>強調 - Emphasis</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*斜體*</span>   <span class="emphasis">_斜體_</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**粗體**</span>  <span class="strong">__粗體__</span></span><br><span class="line"></span><br><span class="line"><span class="strong">***粗斜**</span><span class="bullet">*  ___粗斜___   __*</span>粗斜<span class="strong">*__  _*</span><span class="emphasis">*粗斜*</span>*_</span><br><span class="line"></span><br><span class="line"><span class="strong">**粗體與_粗斜體_*</span>*</span><br><span class="line"></span><br><span class="line">~~刪除字~~</span><br></pre></td></tr></table></figure><p><em>斜體</em>   _斜體_</p><p><strong>粗體</strong>  <strong>粗體</strong></p><p><strong><em>粗斜</em></strong>  <strong>_粗斜_</strong>   <strong><em>粗斜</em></strong>  <em><strong>粗斜</strong></em></p><p><strong>粗體與<em>粗斜體</em></strong></p><p><del>刪除字</del></p><hr><h3 id="清單-Lists"><a href="#清單-Lists" class="headerlink" title="清單 - Lists"></a>清單 - Lists</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>有序列表</span><br><span class="line"><span class="bullet">2. </span>列出所有元素：</span><br><span class="line"><span class="code">    - 無序列表 元素A</span></span><br><span class="line"><span class="code">      1. A的有序子列表</span></span><br><span class="line"><span class="code">      1. A的有序子列表</span></span><br><span class="line"><span class="code">    - 前面加四個空格</span></span><br><span class="line"><span class="bullet">3. </span>列表裡的多段換行：</span><br><span class="line"><span class="code">    前面加四個空格，</span></span><br><span class="line"><span class="code">    這樣換整體的格式才不會亂</span></span><br><span class="line"><span class="bullet">4. </span>列表裡引用：</span><br><span class="line"><span class="code">    &gt;前面加四個空格</span></span><br><span class="line"><span class="code">    &gt;前面加四個空格</span></span><br><span class="line"><span class="bullet">5. </span>列表裡代碼段：</span><br><span class="line"><span class="code">    ```  </span></span><br><span class="line"><span class="code">    Code</span></span><br><span class="line"><span class="code">    ```  </span></span><br><span class="line"><span class="bullet">* </span>無序列表 用星號</span><br><span class="line"><span class="bullet">- </span>減號</span><br><span class="line"><span class="bullet">+ </span>加號</span><br></pre></td></tr></table></figure><ol><li>有序列表</li><li>列出所有元素：<ul><li>無序列表 元素A<ol><li>A的有序子列表</li><li>A的有序子列表</li></ol></li><li>前面加四個空格</li></ul></li><li>列表裡的多段換行：<br> 前面加四個空格，<br> 這樣換整體的格式才不會亂</li><li>列表裡引用：<blockquote><p>前面加四個空格<br>前面加四個空格</p></blockquote></li><li>列表裡代碼段： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Code</span><br></pre></td></tr></table></figure></li></ol><ul><li>無序列表 用星號</li></ul><ul><li>減號</li></ul><ul><li>加號  </li></ul><hr><h3 id="圖片-Image"><a href="#圖片-Image" class="headerlink" title="圖片 - Image"></a>圖片 - Image</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Inline-style: </span><br><span class="line">![<span class="string">alt text</span>](<span class="link">/assets/images/ManWithQuestion.jpg "hover text"</span>)</span><br><span class="line"></span><br><span class="line">Reference-style: </span><br><span class="line">![<span class="string">alt text</span>][<span class="symbol">logo</span>]</span><br><span class="line"></span><br><span class="line">[<span class="symbol">logo</span>]: <span class="link">/assets/images/ManWithQuestion.jpg "hover text"</span></span><br></pre></td></tr></table></figure><p>Inline-style:<br><img src="/assets/images/ManWithQuestion.jpg" alt="alt text" title="hover text"><br>Reference-style:<br><img src="/assets/images/ManWithQuestion.jpg" alt="alt text" title="hover text"></p><hr><h3 id="表格-Table"><a href="#表格-Table" class="headerlink" title="表格 - Table"></a>表格 - Table</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">| Tables        | Are           | Cool  |</span><br><span class="line">| ------------- |:-------------:| -----:|</span><br><span class="line">| col 3 is      | right-aligned | $1600 |</span><br><span class="line">| col 2 is      | centered      |   $12 |</span><br><span class="line">| zebra stripes | are neat      |    $1 |</span><br><span class="line"></span><br><span class="line">Markdown | Less | Pretty</span><br><span class="line">--- | --- | ---</span><br><span class="line">*斜體* | `Code` | **粗體**</span><br><span class="line">1 | 2 | 3</span><br></pre></td></tr></table></figure><table><thead><tr><th>Tables</th><th style="text-align:center">Are</th><th style="text-align:right">Cool</th></tr></thead><tbody><tr><td>col 3 is</td><td style="text-align:center">right-aligned</td><td style="text-align:right">$1600</td></tr><tr><td>col 2 is</td><td style="text-align:center">centered</td><td style="text-align:right">$12</td></tr><tr><td>zebra stripes</td><td style="text-align:center">are neat</td><td style="text-align:right">$1</td></tr></tbody></table><table><thead><tr><th>Markdown</th><th>Less</th><th>Pretty</th></tr></thead><tbody><tr><td><em>斜體</em></td><td><code>Code</code></td><td><strong>粗體</strong></td></tr><tr><td>1</td><td>2</td><td>3</td></tr></tbody></table><hr><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">分隔線 - Horizontal Rule</span><br><span class="line">---</span><br><span class="line">***</span><br><span class="line">___</span><br><span class="line"></span><br><span class="line">引用 - Blockquotes</span><br><span class="line">&gt; 1</span><br><span class="line">&gt; 2</span><br></pre></td></tr></table></figure><p>分隔線 - Horizontal Rule  </p><hr><hr><hr><p>引用 - Blockquotes</p><blockquote><p>1<br>2</p></blockquote><hr><h2 id="參考資料-Reference"><a href="#參考資料-Reference" class="headerlink" title="參考資料 - Reference"></a>參考資料 - Reference</h2><p><a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet" target="_blank" rel="noopener">Markdown-Cheatsheet</a><br><a href="https://segmentfault.com/markdown" target="_blank" rel="noopener">segmentfault</a> </p><h2 id="線上編輯器-Online-Editor"><a href="#線上編輯器-Online-Editor" class="headerlink" title="線上編輯器 - Online Editor"></a>線上編輯器 - Online Editor</h2><p><a href="https://stackedit.io/editor" target="_blank" rel="noopener">stackedit</a><br><a href="http://dillinger.io/" target="_blank" rel="noopener">dillinger</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2017/03/05/hello-world/"/>
      <url>/2017/03/05/hello-world/</url>
      
        <content type="html"><![CDATA[<iframe scrolling="no" width="100%" height="300" src="//jsfiddle.net/7vsLmbmc/embedded/result,html,js,css/dark" frameborder="0" allowfullscreen></iframe> <a id="more"></a><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><h2 id="Quick-Start-1"><a href="#Quick-Start-1" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post-1"><a href="#Create-a-new-post-1" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server-1"><a href="#Run-server-1" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files-1"><a href="#Generate-static-files-1" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites-1"><a href="#Deploy-to-remote-sites-1" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
